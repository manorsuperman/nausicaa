\input texinfo.tex
@c %**start of header
@setfilename nausicaa-cairo.info
@settitle Cairo graphics library for Nausicaa
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Cairo graphics library for Nausicaa

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/Cairo

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-cairo

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marcomaggi@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2009

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a binding
between the Cairo 2D graphics library and the @rnrs{6} Scheme
implementations supported by Nausicaa.  It is built upon the
Nausicaa/Scheme package, making use of its foreign functions interface.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/nausicaa/downloads}

The project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/tree/master}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front--Cover Texts, and no Back--Cover Texts.  A
copy of the license is included in the section entitled ``@gnu{} Free
Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-cairo: (nausicaa-cairo).  Cairo bindings for @rnrs{6} Scheme.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* types::                       Basic data types.
* constants::                   Constant values.
* structs::                     Data structure accessors and mutators.
* marshaling::                  Marshaling values.
* examples::                    Usage examples.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


@value{PACKAGE} is a binding between the Cairo 2D graphics library and
the @rnrs{6} Scheme implementations supported by Nausicaa.  It is built
upon the Nausicaa/Scheme package, making use of its foreign functions
interface; as such, it currently supports only @gnu{}+Linux systems.

@quotation
@strong{NOTE} At present the Cairo functions requiring callbacks are not
supported by Larceny Scheme.  Any attempt to create a callback will
result in an @samp{&unimplemented} exception.
@end quotation

The installed libraries are:

@table @library
@item foreign graphics cairo sizeof
Exports bindings for constant values and data structure accessors and
mutators.

@item foreign graphics cairo platform
Implements a one--to--one map between Cairo's foreign functions and
Scheme functions.  All the Cairo functions are available as Scheme
functions with the same name; for example @cfunc{cairo_create} is
exported as @func{cairo_create}.

@item foreign graphics cairo primitives
Implements a middle level interface with marshaling of function
arguments and return values.  All the Cairo functions are available as
Scheme functions with the same name but underscores turned into dashes;
for example @cfunc{cairo_create} is exported as @func{cairo-create}.

@item foreign graphics cairo
Exports the high level @api{}.  Re--exports everything from
@library{foreign graphics cairo primitive} and @library{foreign graphics
cairo sizeof}.  Additionally, when possible, it exports an interface for
constructors and destructors using the @library{compensations} library.
@nauref{compensations, Compensation stacks}
@end table


The original Cairo documentation can be used as guide for the
@library{foreign graphics cairo platform} library.  A brief Cairo
tutorial is available here (last verified Thu Oct 22, 2009):

@center @url{http://cairographics.org/tutorial/}

@noindent
another long tutorial is available here (last verified Thu Oct 22,
2009):

@center @url{http://zetcode.com/tutorials/cairographicstutorial/}

@noindent
the home page of Cairo has additional documentation (last verified Thu
Oct 22, 2009):

@center @url{http://cairographics.org/}


@c page
@node types
@chapter Basic data types


The following bindings are exported by @library{foreign cairo sizeof}.

@itemize
@item
The ones prefixed with @samp{sizeof-} are the number of bytes required
to hold the type.

@item
The ones prefixed with @samp{strideof-} are the number of bytes used as
stride in arrays of the type.

@item
The ones prefixed with @samp{alignof-} are the number of bytes used in
aligning the type in data structures.

@item
The non--prefixed ones are bound to Scheme symbols representing the type
specifier for the @library{foreign ffi} interface.
@end itemize


@deffn Constant cairo_bool_t
@deffnx Constant sizeof-cairo_bool_t
@deffnx Constant strideof-cairo_bool_t
@deffnx Constant alignof-cairo_bool_t
Describe the type @samp{cairo_bool_t}.
@end deffn


@deffn Constant cairo_status_t
@deffnx Constant sizeof-cairo_status_t
@deffnx Constant strideof-cairo_status_t
@deffnx Constant alignof-cairo_status_t
Describe the type @samp{cairo_status_t}.
@end deffn


@deffn Constant cairo_content_t
@deffnx Constant sizeof-cairo_content_t
@deffnx Constant strideof-cairo_content_t
@deffnx Constant alignof-cairo_content_t
Describe the type @samp{cairo_content_t}.
@end deffn


@deffn Constant sizeof-cairo_matrix_t
@deffnx Constant strideof-cairo_matrix_t
@deffnx Constant alignof-cairo_matrix_t
Describe the type @samp{cairo_matrix_t}.
@end deffn


@deffn Constant sizeof-cairo_user_data_key_t
@deffnx Constant strideof-cairo_user_data_key_t
@deffnx Constant alignof-cairo_user_data_key_t
Describe the type @samp{cairo_user_data_key_t}.
@end deffn


@deffn Constant cairo_operator_t
@deffnx Constant sizeof-cairo_operator_t
@deffnx Constant strideof-cairo_operator_t
@deffnx Constant alignof-cairo_operator_t
Describe the type @samp{cairo_operator_t}.
@end deffn


@deffn Constant cairo_fill_rule_t
@deffnx Constant sizeof-cairo_fill_rule_t
@deffnx Constant strideof-cairo_fill_rule_t
@deffnx Constant alignof-cairo_fill_rule_t
Describe the type @samp{cairo_fill_rule_t}.
@end deffn


@deffn Constant sizeof-cairo_rectangle_t
@deffnx Constant strideof-cairo_rectangle_t
@deffnx Constant alignof-cairo_rectangle_t
Describe the data structure type @samp{cairo_rectangle_t}.
@end deffn


@deffn Constant sizeof-cairo_rectangle_list_t
@deffnx Constant strideof-cairo_rectangle_list_t
@deffnx Constant alignof-cairo_rectangle_list_t
Describe the data structure type @samp{cairo_rectangle_list_t}.
@end deffn


@deffn Constant sizeof-cairo_glyph_t
@deffnx Constant strideof-cairo_glyph_t
@deffnx Constant alignof-cairo_glyph_t
Describe the data structure type @samp{cairo_glyph_t}.
@end deffn


@deffn Constant sizeof-cairo_text_cluster_t
@deffnx Constant strideof-cairo_text_cluster_t
@deffnx Constant alignof-cairo_text_cluster_t
Describe the data structure type @samp{cairo_text_cluster_t}.
@end deffn


@deffn Constant sizeof-cairo_text_extents_t
@deffnx Constant strideof-cairo_text_extents_t
@deffnx Constant alignof-cairo_text_extents_t
Describe the data structure type @samp{cairo_text_extents_t}.
@end deffn


@deffn Constant sizeof-cairo_font_extents_t
@deffnx Constant strideof-cairo_font_extents_t
@deffnx Constant alignof-cairo_font_extents_t
Describe the data structure type @samp{cairo_font_extents_t}.
@end deffn


@deffn Constant cairo_subpixel_order_t
@deffnx Constant sizeof-cairo_subpixel_order_t
@deffnx Constant strideof-cairo_subpixel_order_t
@deffnx Constant alignof-cairo_subpixel_order_t
Describe the type @samp{cairo_subpixel_order_t}.
@end deffn


@deffn Constant cairo_hint_style_t
@deffnx Constant sizeof-cairo_hint_style_t
@deffnx Constant strideof-cairo_hint_style_t
@deffnx Constant alignof-cairo_hint_style_t
Describe the type @samp{cairo_hint_style_t}.
@end deffn


@deffn Constant cairo_hint_metrics_t
@deffnx Constant sizeof-cairo_hint_metrics_t
@deffnx Constant strideof-cairo_hint_metrics_t
@deffnx Constant alignof-cairo_hint_metrics_t
Describe the type @samp{cairo_hint_metrics_t}.
@end deffn


@deffn Constant cairo_font_type_t
@deffnx Constant sizeof-cairo_font_type_t
@deffnx Constant strideof-cairo_font_type_t
@deffnx Constant alignof-cairo_font_type_t
Describe the type @samp{cairo_font_type_t}.
@end deffn

@deffn Constant sizeof-cairo_path_t
@deffnx Constant strideof-cairo_path_t
@deffnx Constant alignof-cairo_path_t
Describe the type @samp{cairo_path_t}.
@end deffn


@deffn Constant cairo_surface_type_t
@deffnx Constant sizeof-cairo_surface_type_t
@deffnx Constant strideof-cairo_surface_type_t
@deffnx Constant alignof-cairo_surface_type_t
Describe the type @samp{cairo_surface_type_t}.
@end deffn


@deffn Constant cairo_format_t
@deffnx Constant sizeof-cairo_format_t
@deffnx Constant strideof-cairo_format_t
@deffnx Constant alignof-cairo_format_t
Describe the type @samp{cairo_format_t}.
@end deffn


@deffn Constant cairo_pattern_type_t
@deffnx Constant sizeof-cairo_pattern_type_t
@deffnx Constant strideof-cairo_pattern_type_t
@deffnx Constant alignof-cairo_pattern_type_t
Describe the type @samp{cairo_pattern_type_t}.
@end deffn


@deffn Constant cairo_extend_t
@deffnx Constant sizeof-cairo_extend_t
@deffnx Constant strideof-cairo_extend_t
@deffnx Constant alignof-cairo_extend_t
Describe the type @samp{cairo_extend_t}.
@end deffn


@deffn Constant cairo_filter_t
@deffnx Constant sizeof-cairo_filter_t
@deffnx Constant strideof-cairo_filter_t
@deffnx Constant alignof-cairo_filter_t
Describe the type @samp{cairo_filter_t}.
@end deffn


@deffn Constant cairo_antialias_t
@deffnx Constant sizeof-cairo_antialias_t
@deffnx Constant strideof-cairo_antialias_t
@deffnx Constant alignof-cairo_antialias_t
Describe the type @samp{cairo_antialias_t}.
@end deffn


@deffn Constant cairo_line_cap_t
@deffnx Constant sizeof-cairo_line_cap_t
@deffnx Constant strideof-cairo_line_cap_t
@deffnx Constant alignof-cairo_line_cap_t
Describe the type @samp{cairo_line_cap_t}.
@end deffn


@deffn Constant cairo_line_join_t
@deffnx Constant sizeof-cairo_line_join_t
@deffnx Constant strideof-cairo_line_join_t
@deffnx Constant alignof-cairo_line_join_t
Describe the type @samp{cairo_line_join_t}.
@end deffn


@deffn Constant cairo_font_slant_t
@deffnx Constant sizeof-cairo_font_slant_t
@deffnx Constant strideof-cairo_font_slant_t
@deffnx Constant alignof-cairo_font_slant_t
Describe the type @samp{cairo_font_slant_t}.
@end deffn


@deffn Constant cairo_font_weight_t
@deffnx Constant sizeof-cairo_font_weight_t
@deffnx Constant strideof-cairo_font_weight_t
@deffnx Constant alignof-cairo_font_weight_t
Describe the type @samp{cairo_font_weight_t}.
@end deffn


@deffn Constant cairo_text_cluster_flags_t
@deffnx Constant sizeof-cairo_text_cluster_flags_t
@deffnx Constant strideof-cairo_text_cluster_flags_t
@deffnx Constant alignof-cairo_text_cluster_flags_t
Describe the type @samp{cairo_text_cluster_flags_t}.
@end deffn


@deffn Constant cairo_svg_version_t
@deffnx Constant sizeof-cairo_svg_version_t
@deffnx Constant strideof-cairo_svg_version_t
@deffnx Constant alignof-cairo_svg_version_t
Describe the type @samp{cairo_svg_version_t}.
@end deffn


@deffn Constant cairo_ps_level_t
@deffnx Constant sizeof-cairo_ps_level_t
@deffnx Constant strideof-cairo_ps_level_t
@deffnx Constant alignof-cairo_ps_level_t
Describe the type @samp{cairo_ps_level_t}.
@end deffn

@c page
@node constants
@chapter Constant values


The following bindings are exported by @library{foreign cairo sizeof}.


@deffn Constant CAIRO_VERSION_MAJOR
@deffnx Constant CAIRO_VERSION_MINOR
@deffnx Constant CAIRO_VERSION_MICRO
Bound to integers representing version numbers.
@end deffn


@deffn Constant CAIRO_STATUS_SUCCESS
@deffnx Constant CAIRO_STATUS_NO_MEMORY
@deffnx Constant CAIRO_STATUS_INVALID_RESTORE
@deffnx Constant CAIRO_STATUS_INVALID_POP_GROUP
@deffnx Constant CAIRO_STATUS_NO_CURRENT_POINT
@deffnx Constant CAIRO_STATUS_INVALID_MATRIX
@deffnx Constant CAIRO_STATUS_INVALID_STATUS
@deffnx Constant CAIRO_STATUS_NULL_POINTER
@deffnx Constant CAIRO_STATUS_INVALID_STRING
@deffnx Constant CAIRO_STATUS_INVALID_PATH_DATA
@deffnx Constant CAIRO_STATUS_READ_ERROR
@deffnx Constant CAIRO_STATUS_WRITE_ERROR
@deffnx Constant CAIRO_STATUS_SURFACE_FINISHED
@deffnx Constant CAIRO_STATUS_SURFACE_TYPE_MISMATCH
@deffnx Constant CAIRO_STATUS_PATTERN_TYPE_MISMATCH
@deffnx Constant CAIRO_STATUS_INVALID_CONTENT
@deffnx Constant CAIRO_STATUS_INVALID_FORMAT
@deffnx Constant CAIRO_STATUS_INVALID_VISUAL
@deffnx Constant CAIRO_STATUS_FILE_NOT_FOUND
@deffnx Constant CAIRO_STATUS_INVALID_DASH
@deffnx Constant CAIRO_STATUS_INVALID_DSC_COMMENT
@deffnx Constant CAIRO_STATUS_INVALID_INDEX
@deffnx Constant CAIRO_STATUS_CLIP_NOT_REPRESENTABLE
@deffnx Constant CAIRO_STATUS_TEMP_FILE_ERROR
@deffnx Constant CAIRO_STATUS_INVALID_STRIDE
@deffnx Constant CAIRO_STATUS_FONT_TYPE_MISMATCH
@deffnx Constant CAIRO_STATUS_USER_FONT_IMMUTABLE
@deffnx Constant CAIRO_STATUS_USER_FONT_ERROR
@deffnx Constant CAIRO_STATUS_NEGATIVE_COUNT
@deffnx Constant CAIRO_STATUS_INVALID_CLUSTERS
@deffnx Constant CAIRO_STATUS_INVALID_SLANT
@deffnx Constant CAIRO_STATUS_INVALID_WEIGHT
Values of the enumeration @samp{cairo_status_t}.
@end deffn


@deffn Constant CAIRO_CONTENT_COLOR
@deffnx Constant CAIRO_CONTENT_ALPHA
@deffnx Constant CAIRO_CONTENT_COLOR_ALPHA
Values of the enumeration @samp{cairo_content_t}.
@end deffn


@deffn Constant CAIRO_OPERATOR_CLEAR
@deffnx Constant CAIRO_OPERATOR_SOURCE
@deffnx Constant CAIRO_OPERATOR_OVER
@deffnx Constant CAIRO_OPERATOR_IN
@deffnx Constant CAIRO_OPERATOR_OUT
@deffnx Constant CAIRO_OPERATOR_ATOP
@deffnx Constant CAIRO_OPERATOR_DEST
@deffnx Constant CAIRO_OPERATOR_DEST_OVER
@deffnx Constant CAIRO_OPERATOR_DEST_IN
@deffnx Constant CAIRO_OPERATOR_DEST_OUT
@deffnx Constant CAIRO_OPERATOR_DEST_ATOP
@deffnx Constant CAIRO_OPERATOR_XOR
@deffnx Constant CAIRO_OPERATOR_ADD
@deffnx Constant CAIRO_OPERATOR_SATURATE
Values of the enumeration @samp{cairo_operator_t}.
@end deffn


@deffn Constant CAIRO_ANTIALIAS_DEFAULT
@deffnx Constant CAIRO_ANTIALIAS_NONE
@deffnx Constant CAIRO_ANTIALIAS_GRAY
@deffnx Constant CAIRO_ANTIALIAS_SUBPIXEL
Values of the enumeration @samp{cairo_antialias_t}.
@end deffn


@deffn Constant CAIRO_LINE_CAP_BUTT
@deffnx Constant CAIRO_LINE_CAP_ROUND
@deffnx Constant CAIRO_LINE_CAP_SQUARE
Values of the enumeration @samp{cairo_line_cap_t}.
@end deffn


@deffn Constant CAIRO_LINE_JOIN_MITER
@deffnx Constant CAIRO_LINE_JOIN_ROUND
@deffnx Constant CAIRO_LINE_JOIN_BEVEL
Values of the enumeration @samp{cairo_line_join_t}.
@end deffn


@deffn Constant CAIRO_TEXT_CLUSTER_FLAG_BACKWARD
Values of the enumeration @samp{cairo_text_cluster_flags_t}.
@end deffn


@deffn Constant CAIRO_FONT_SLANT_NORMAL
@deffnx Constant CAIRO_FONT_SLANT_ITALIC
@deffnx Constant CAIRO_FONT_SLANT_OBLIQUE
Values of the enumeration @samp{cairo_font_slant_t}.
@end deffn


@deffn Constant CAIRO_FONT_WEIGHT_NORMAL
@deffnx Constant CAIRO_FONT_WEIGHT_BOLD
Values of the enumeration @samp{cairo_font_weight_t}.
@end deffn


@deffn Constant CAIRO_SUBPIXEL_ORDER_DEFAULT
@deffnx Constant CAIRO_SUBPIXEL_ORDER_RGB
@deffnx Constant CAIRO_SUBPIXEL_ORDER_BGR
@deffnx Constant CAIRO_SUBPIXEL_ORDER_VRGB
@deffnx Constant CAIRO_SUBPIXEL_ORDER_VBGR
Values of the enumeration @samp{cairo_subpixel_order_t}.
@end deffn


@deffn Constant CAIRO_HINT_STYLE_DEFAULT
@deffnx Constant CAIRO_HINT_STYLE_NONE
@deffnx Constant CAIRO_HINT_STYLE_SLIGHT
@deffnx Constant CAIRO_HINT_STYLE_MEDIUM
@deffnx Constant CAIRO_HINT_STYLE_FULL
Values of the enumeration @samp{cairo_hint_style_t}.
@end deffn


@deffn Constant CAIRO_HINT_METRICS_DEFAULT
@deffnx Constant CAIRO_HINT_METRICS_OFF
@deffnx Constant CAIRO_HINT_METRICS_ON
Values of the enumeration @samp{cairo_hint_metrics_t}.
@end deffn


@deffn Constant CAIRO_FONT_TYPE_TOY
@deffnx Constant CAIRO_FONT_TYPE_FT
@deffnx Constant CAIRO_FONT_TYPE_WIN32
@deffnx Constant CAIRO_FONT_TYPE_QUARTZ
@deffnx Constant CAIRO_FONT_TYPE_USER
Values of the enumeration @samp{cairo_font_type_t}.
@end deffn


@deffn Constant CAIRO_PATH_MOVE_TO
@deffnx Constant CAIRO_PATH_LINE_TO
@deffnx Constant CAIRO_PATH_CURVE_TO
@deffnx Constant CAIRO_PATH_CLOSE_PATH
Values of the enumeration @samp{cairo_path_data_type_t}.
@end deffn


@deffn Constant CAIRO_FORMAT_ARGB32
@deffnx Constant CAIRO_FORMAT_RGB24
@deffnx Constant CAIRO_FORMAT_A8
@deffnx Constant CAIRO_FORMAT_A1
Values of the enumeration @samp{cairo_format_t}.
@end deffn


@deffn Constant CAIRO_PATTERN_TYPE_SOLID
@deffnx Constant CAIRO_PATTERN_TYPE_SURFACE
@deffnx Constant CAIRO_PATTERN_TYPE_LINEAR
@deffnx Constant CAIRO_PATTERN_TYPE_RADIAL
Values of the enumeration @samp{cairo_pattern_type_t}.
@end deffn


@deffn Constant CAIRO_SVG_VERSION_1_1
@deffnx Constant CAIRO_SVG_VERSION_1_2
Values of the enumeration @samp{cairo_svg_version_t}.
@end deffn


@deffn Constant CAIRO_HAS_PNG_FUNCTIONS
Bound to @true{} if the library inspected at installation time by the
@value{PACKAGE} infrastructure supports reading and writing images in
@acronym{PNG} format.
@end deffn


@deffn Constant CAIRO_HAS_FT_FONT
@deffnx Constant CAIRO_HAS_IMAGE_SURFACE
@deffnx Constant CAIRO_HAS_PDF_SURFACE
@deffnx Constant CAIRO_HAS_PS_SURFACE
@deffnx Constant CAIRO_HAS_QUARTZ_FONT
@deffnx Constant CAIRO_HAS_QUARTZ_SURFACE
@deffnx Constant CAIRO_HAS_SVG_SURFACE
@deffnx Constant CAIRO_HAS_USER_FONT
@deffnx Constant CAIRO_HAS_WIN32_FONT
@deffnx Constant CAIRO_HAS_WIN32_SURFACE
@deffnx Constant CAIRO_HAS_XLIB_SURFACE
@deffnx Constant CAIRO_HAS_XLIB_XRENDER_SURFACE
Bound to @true{} if the library inspected at installation time by the
@value{PACKAGE} infrastructure supports the named feature.
@end deffn

@c page
@node structs
@chapter Data structure accessors and mutators


The following bindings are exported by @library{foreign cairo sizeof}.


@deffn Syntax cairo_matrix_t-xx-set! @var{pointer} @var{value}
@deffnx Syntax cairo_matrix_t-xx-ref @var{pointer}
@deffnx Syntax cairo_matrix_t-xy-set! @var{pointer} @var{value}
@deffnx Syntax cairo_matrix_t-xy-ref @var{pointer}
@deffnx Syntax cairo_matrix_t-yx-set! @var{pointer} @var{value}
@deffnx Syntax cairo_matrix_t-yx-ref @var{pointer}
@deffnx Syntax cairo_matrix_t-yy-set! @var{pointer} @var{value}
@deffnx Syntax cairo_matrix_t-yy-ref @var{pointer}
@deffnx Syntax cairo_matrix_t-x0-set! @var{pointer} @var{value}
@deffnx Syntax cairo_matrix_t-x0-ref @var{pointer}
@deffnx Syntax cairo_matrix_t-y0-set! @var{pointer} @var{value}
@deffnx Syntax cairo_matrix_t-y0-ref @var{pointer}
Accessors and mutators for the data structure type
@samp{cairo_matrix_t}.
@end deffn


@deffn Syntax cairo_rectangle_t-x-set! @var{pointer} @var{value}
@deffnx Syntax cairo_rectangle_t-x-ref @var{pointer}
@deffnx Syntax cairo_rectangle_t-y-set! @var{pointer} @var{value}
@deffnx Syntax cairo_rectangle_t-y-ref @var{pointer}
@deffnx Syntax cairo_rectangle_t-width-set! @var{pointer} @var{value}
@deffnx Syntax cairo_rectangle_t-width-ref @var{pointer}
@deffnx Syntax cairo_rectangle_t-height-set! @var{pointer} @var{value}
@deffnx Syntax cairo_rectangle_t-height-ref @var{pointer}
Accessors and mutators for the data structure type
@samp{cairo_rectangle_t}.
@end deffn


@deffn Syntax cairo_rectangle_list_t-status-set! @var{pointer} @var{value}
@deffnx Syntax cairo_rectangle_list_t-status-ref @var{pointer}
@deffnx Syntax cairo_rectangle_list_t-rectangles-set! @var{pointer} @var{value}
@deffnx Syntax cairo_rectangle_list_t-rectangles-ref @var{pointer}
@deffnx Syntax cairo_rectangle_list_t-num_rectangles-set! @var{pointer} @var{value}
@deffnx Syntax cairo_rectangle_list_t-num_rectangles-ref @var{pointer}
Accessors and mutators for the data structure type
@samp{cairo_rectangle_list_t}.
@end deffn


@deffn Syntax cairo_glyph_t-index-set! @var{pointer} @var{value}
@deffnx Syntax cairo_glyph_t-index-ref @var{pointer}
@deffnx Syntax cairo_glyph_t-x-set! @var{pointer} @var{value}
@deffnx Syntax cairo_glyph_t-x-ref @var{pointer}
@deffnx Syntax cairo_glyph_t-y-set! @var{pointer} @var{value}
@deffnx Syntax cairo_glyph_t-y-ref @var{pointer}
Accessors and mutators for the data structure type
@samp{cairo_glyph_t}.
@end deffn


@deffn Syntax cairo_text_cluster_t-num_bytes-set! @var{pointer} @var{value}
@deffnx Syntax cairo_text_cluster_t-num_bytes-ref @var{pointer}
@deffnx Syntax cairo_text_cluster_t-num_glyphs-set! @var{pointer} @var{value}
@deffnx Syntax cairo_text_cluster_t-num_glyphs-ref @var{pointer}
Accessors and mutators for the data structure type
@samp{cairo_text_cluster_t}.
@end deffn


@deffn Syntax cairo_text_extents_t-x_bearing-set! @var{pointer} @var{value}
@deffnx Syntax cairo_text_extents_t-x_bearing-ref @var{pointer}
@deffnx Syntax cairo_text_extents_t-y_bearing-set! @var{pointer} @var{value}
@deffnx Syntax cairo_text_extents_t-y_bearing-ref @var{pointer}
@deffnx Syntax cairo_text_extents_t-width-set! @var{pointer} @var{value}
@deffnx Syntax cairo_text_extents_t-width-ref @var{pointer}
@deffnx Syntax cairo_text_extents_t-height-set! @var{pointer} @var{value}
@deffnx Syntax cairo_text_extents_t-height-ref @var{pointer}
@deffnx Syntax cairo_text_extents_t-x_advance-set! @var{pointer} @var{value}
@deffnx Syntax cairo_text_extents_t-x_advance-ref @var{pointer}
@deffnx Syntax cairo_text_extents_t-y_advance-set! @var{pointer} @var{value}
@deffnx Syntax cairo_text_extents_t-y_advance-ref @var{pointer}
Accessors and mutators for the data structure type
@samp{cairo_text_extents_t}.
@end deffn


@deffn Syntax cairo_font_extents_t-ascent-set! @var{pointer} @var{value}
@deffnx Syntax cairo_font_extents_t-ascent-ref @var{pointer}
@deffnx Syntax cairo_font_extents_t-descent-set! @var{pointer} @var{value}
@deffnx Syntax cairo_font_extents_t-descent-ref @var{pointer}
@deffnx Syntax cairo_font_extents_t-height-set! @var{pointer} @var{value}
@deffnx Syntax cairo_font_extents_t-height-ref @var{pointer}
@deffnx Syntax cairo_font_extents_t-max_x_advance-set! @var{pointer} @var{value}
@deffnx Syntax cairo_font_extents_t-max_x_advance-ref @var{pointer}
@deffnx Syntax cairo_font_extents_t-max_y_advance-set! @var{pointer} @var{value}
@deffnx Syntax cairo_font_extents_t-max_y_advance-ref @var{pointer}
Accessors and mutators for the data structure type
@samp{cairo_font_extents_t}.
@end deffn


@deffn Syntax cairo_path_data_t-header.type-set! @var{pointer} @var{value}
@deffnx Syntax cairo_path_data_t-header.type-ref @var{pointer}
@deffnx Syntax cairo_path_data_t-header.length-set! @var{pointer} @var{value}
@deffnx Syntax cairo_path_data_t-header.length-ref @var{pointer}
Accessors and mutators for the union type @samp{cairo_path_data_t}, data
structure field @samp{header}.
@end deffn


@deffn Syntax cairo_path_data_t-point.x-set! @var{pointer} @var{value}
@deffnx Syntax cairo_path_data_t-point.x-ref @var{pointer}
@deffnx Syntax cairo_path_data_t-point.y-set! @var{pointer} @var{value}
@deffnx Syntax cairo_path_data_t-point.y-ref @var{pointer}
Accessors and mutators for the union type @samp{cairo_path_data_t}, data
structure field @samp{point}.
@end deffn


@deffn Syntax cairo_path_t-status-set! @var{pointer} @var{value}
@deffnx Syntax cairo_path_t-status-ref @var{pointer}
@deffnx Syntax cairo_path_t-data-set! @var{pointer} @var{value}
@deffnx Syntax cairo_path_t-data-ref @var{pointer}
@deffnx Syntax cairo_path_t-num_data-set! @var{pointer} @var{value}
@deffnx Syntax cairo_path_t-num_data-ref @var{pointer}
Accessors and mutators for the data structure type @samp{cairo_path_t}.
@end deffn

@c page
@node marshaling
@chapter Marshaling values


The @library{foreign graphics cairo primitives} library implements
marshaling of function arguments and return values.

@menu
* marshaling cstrings::         Marshaling C strings.
* marshaling misc::             Miscellaneous functions.
@end menu

@c page
@node marshaling cstrings
@section Marshaling C strings


When the type is a pointer to a C string, the string is interpreted as
zero--terminated and @acronym{UTF8}--encoded; it is converted from/to a
Scheme string using @func{string->cstring/c} and @func{cstring->string}
from the @library{foreign cstrings} library.  @nauref{cstrings, C
language strings handling}

For function arguments: Memory is allocated on the spot and released
after the foreign function has returned.  For return values: It is
assumed that the string is owned by the Cairo library, so it is
converted but the memory block itself is left alone.

As a special case, the marshaling function
@func{cairo-scaled-font-text-to-glyphs} collapses the two arguments of
@cfunc{cairo_scaled_font_text_to_glyphs} representing the pointer to the
string and the string length, into a single Scheme string argument.  So
the C language call:

@example
cairo_scaled_font_text_to_glyphs(scaled_font, x, y,
                                 utf8, utf8_len,
                                 glyphs, num_glyphs,
                                 clusters, num_clusters,
                                 cluster_flags);
@end example

@noindent
becomes the Scheme call:

@example
(cairo-scaled-font-text-to-glyphs scaled_font x y
                                  text
                                  glyphs num_glyphs
                                  clusters num_clusters
                                  cluster_flags)
@end example

@c page
@node marshaling misc
@section Miscellaneous functions


@defun cairo-get-current-point @var{cr}
Given a pointer to a Cairo context, return two values representing the
coordinates of the current point in the current path: the first is the
@math{X} coordinate, the second is the @math{Y} coordinate.
@end defun


@defun cairo-get-dash @var{cr}
Given a pointer to a Cairo context, return two values representing the
current line dash configuration: the first is a vector of rational
numbers (according to @func{rational?}) representing the dashes, the
second is a number representing the offset.
@end defun


@defun cairo-surface-get-device-offset @var{surface}
Given a pointer to a surface, return two values representing the
previous device offset set by @func{cairo-surface-set-device-offset}:
the first is the offset in the @math{X} direction in device units, the
second is the offset in the @math{Y} direction in device units.
@end defun


@defun cairo-surface-get-fallback-resolution @var{surface}
Given a pointer to a surface, return two values representing the
previous fallback resolution set by
@func{cairo-surface-set-fallback-resolution}: the first is the number of
horizontal pixels per inch, the second is the number of vertical pixels
per inch.
@end defun


@defun cairo-pattern-get-rgba @var{pattern}
Given a pointer to a pattern structure, return four values describing
the color of a solid color pattern in the order: red, green, blue, alpha
component.  Raise an assertion violation exception if the pattern is not
a solid color.
@end defun


@defun cairo-pattern-get-color-stop-rgba @var{pattern} @var{index}
Given a pointer to a pattern structure and a color stop index, return
five values describing the color stop in this order: offset, red, green,
blue, alpha component.  Raise an assertion violation exception if
@var{index} is invalid or the pattern is not a gradient pattern.
@end defun


@defun cairo-pattern-get-color-stop-count @var{pattern}
Given a pointer to a pattern structure return the number of color stops
in it.  Raise an assertion violation exception if the pattern is not a
gradient pattern.
@end defun


@defun cairo-pattern-get-linear-points @var{pattern}
Given a pointer to a pattern structure, return four values representing
the gradient endpoints for a linear gradient in this order: the first
and second are the @math{X} and @math{Y} coordinates of the start point,
the third and fourth are the @math{X} and @math{Y} coordinates of the
end point.  Raise an assertion violation exception if the pattern is not
a gradient pattern.
@end defun


@defun cairo-pattern-get-radial-circles @var{pattern}
Given a pointer to a pattern structure, return four values representing
the gradient endpoint circles for a radial gradient, each specified as a
center coordinate and a radius in this order: the first and second are
the @math{X} and @math{Y} coordinates of the center of the first circle;
the third is the radius of the first circle; the fourth and fifth are
the @math{X} and @math{Y} coordinates of the center of the second
circle; the sixth is the radius of the second circle.  Raise an
assertion violation exception if the pattern is not a gradient pattern.
@end defun


@c page
@node examples
@chapter Usage examples


In this section we see some usage example to familiarise with the @api{}
of @library{cairo}.  All the examples make use of the
@library{compensations} library to handle resources allocation.
@nauref{compensations, Compensation stacks}

Many examples come from the tutorial at:

@center @url{http://zetcode.com/tutorials/cairographicstutorial/}

@noindent
by Jan Bodnar.

@menu
* examples text::               Writing text.
* examples line::               Drawing lines.
@end menu

@c page
@node examples text
@section Writing text


The following example draws a @math{390 x 60} image with text in it and
saves it to a file in @acronym{PNG} format.  Notice that the functions
required to save a @acronym{PNG} file are available only if
@samp{CAIRO_HAS_PNG_FUNCTIONS} is bound to @true{}.

@example
(import (rnrs)
  (foreign cairo)
  (foreign cairo sizeof)
  (foreign cstrings)
  (compensations))

(with-compensations
  (letrec* ((surface (compensate
                         (cairo_image_surface_create
                            CAIRO_FORMAT_ARGB32 390 60)
                       (with
                        (cairo_surface_destroy surface))))
            (cr      (compensate
                         (cairo_create surface)
                       (with
                        (cairo_destroy cr)))))

    ;; draw in black ink
    (cairo_set_source_rgb cr 0. 0. 0.)

    ;; select the font
    (cairo_select_font_face cr (string->cstring/c "Sans")
                            CAIRO_FONT_SLANT_NORMAL
                            CAIRO_FONT_WEIGHT_NORMAL)
    (cairo_set_font_size cr 40.0)

    ;; move to the beginning of the text
    (cairo_move_to cr 10.0 50.0)

    ;; draw text
    (cairo_show_text cr
      (string->cstring/c "Disziplin ist Macht."))

    ;; draw the image on the output
    (cairo_surface_write_to_png surface
      (string->cstring/c "image.png"))))
@end example

The following example does the same but outputs a @acronym{PDF} file.
Notice that the functions required to create a @acronym{PDF} surface are
available only if @samp{CAIRO_HAS_PDF_SURFACE} is bound to @true{}.

@example
(import (rnrs)
  (foreign cairo)
  (foreign cairo sizeof)
  (foreign cstrings)
  (compensations))

(with-compensations
  (letrec* ((surface (compensate
                         (cairo_pdf_surface_create
                            (string->cstring/c "image.pdf")
                            390. 60.)
                       (with
                        (cairo_surface_destroy surface))))
            (cr      (compensate
                         (cairo_create surface)
                       (with
                        (cairo_destroy cr)))))
    (cairo_set_source_rgb cr 0. 0. 0.)
    (cairo_select_font_face cr (string->cstring/c "Sans")
                            CAIRO_FONT_SLANT_NORMAL
                            CAIRO_FONT_WEIGHT_NORMAL)
    (cairo_set_font_size cr 40.0)
    (cairo_move_to cr 10.0 50.0)
    (cairo_show_text cr
      (string->cstring/c "Disziplin ist Macht."))
    (cairo_show_page cr)))
@end example

@c page
@node examples line
@section Drawing lines


The following example draws a @math{300 x 300} image with a red square
in it and saves it to a file in @acronym{PNG} format.  Notice that the
functions required to save a @acronym{PNG} file are available only if
@samp{CAIRO_HAS_PNG_FUNCTIONS} is bound to @true{}.

@example
(with-compensations
  (letrec* ((surface (compensate
                         (cairo_image_surface_create
                           CAIRO_FORMAT_ARGB32 300 300)
                       (with
                        (cairo_surface_destroy surface))))
            (cr      (compensate
                         (cairo_create surface)
                       (with
                        (cairo_destroy cr)))))

    (cairo_set_source_rgb cr 100. 0. 0.)
    (cairo_set_line_width cr 1.)

    (cairo-move-to cr 10. 10.)
    (cairo-line-to cr 290. 10.)
    (cairo-line-to cr 290. 290.)
    (cairo-line-to cr 10. 290.)
    (cairo-line-to cr 10. 10.)
    (cairo-stroke cr)

    (cairo_surface_write_to_png surface
      (string->cstring/c "test-line.png"))))
@end example

To fill the square we just change:

@example
(cairo-stroke cr)
@end example

@noindent
to:

@example
(cairo-fill cr)
@end example

To draw a circle we do:

@example
(define pi  (acos -1))
(define pi2 (* 2 pi))

(cairo-arc cr 150. 150. 90. 0. pi2)
(cairo-stroke cr)
@end example


@c page

@include gpl-3.0.texiinc
@include fdl-1.3.texiinc

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
