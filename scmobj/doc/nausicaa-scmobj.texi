\input texinfo.tex
@c %**start of header
@setfilename nausicaa-scmobj.info
@settitle ScmObj for Ikarus Scheme
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc


@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro lgpl{}
@acronym{LGPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@macro bsd{}
@acronym{BSD}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro ram{}
@acronym{RAM}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@c Remember that @url is already used by Texinfo.
@macro urla{}
@acronym{URL}
@end macro

@macro utf{}
@acronym{UTF}
@end macro


@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Software related macros.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@macro glibc{}
@gnu{} C Library
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro icmp{}
@acronym{ICMP}
@end macro

@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro https{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@macro snmp{}
@acronym{SNMP}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Arguments macros.
@c ------------------------------------------------------------

@macro vari{ARG}
@var{\ARG\1}
@end macro

@macro varii{ARG}
@var{\ARG\2}
@end macro

@macro variii{ARG}
@var{\ARG\3}
@end macro

@macro variv{ARG}
@var{\ARG\4}
@end macro

@macro varn{ARG}
@var{\ARG\n}
@end macro

@macro vark{ARG}
@var{\ARG\k}
@end macro

@macro varj{ARG}
@var{\ARG\j}
@end macro

@c ------------------------------------------------------------

@macro meta{ARG}
<\ARG\>
@end macro

@macro metai{ARG}
@meta{\ARG\1}
@end macro

@macro metaii{ARG}
@meta{\ARG\2}
@end macro

@macro metaiii{ARG}
@meta{\ARG\3}
@end macro

@macro metaiv{ARG}
@meta{\ARG\4}
@end macro

@macro metan{ARG}
@meta{\ARG\n}
@end macro

@macro metak{ARG}
@meta{\ARG\k}
@end macro

@macro metaj{ARG}
@meta{\ARG\j}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro null{}
@code{NULL}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{NAME}
@code{(\NAME\)}
@end macro

@macro module{NAME}
@code{\NAME\}
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@ignore
Separating the @srfi{}  macro from the number with a  '--' rather than a
'-' makes the expansion look ugly in menu entries under the Info reader.
IMHO this should not happen, but  it does; so we live with this, because
the main purpose of this document is to provide an Info version.
@end ignore
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@c ------------------------------------------------------------

@macro func{NAME}
@code{@sc{\NAME\}}
@end macro

@macro nil{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@macro rsixref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@end macro

@macro rfiveref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r5rs}
@end macro

@macro ikarusref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,ikarus}
@end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro


@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      ScmObj for Ikarus Scheme

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/ScmObj

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-scmobj

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Dorai Sitaram

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            1996

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a
repackaging of ScmObj, a @clos{}--like object system for Scheme
implemented by Dorai Sitaram.  It offers a programming environment, with
simple and multiple inheritance and generic functions, but with
@strong{no} meta--object protocol (@acronym{MOP}).

The package is distributed under the terms of the @gnu{} Lesser General
Public License (@lgpl{}).

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR}

@quotation
This is free software; you can redistribute it and/or modify it under
the terms of the @gnu{} Lesser General Public License as published by the
Free Software Foundation; either version 2.1 of the License, or (at your
option) any later version.

This library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @gnu{}
Lesser General Public License for more details.

You should have received a copy of the @gnu{} Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
@end quotation
@end copying

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory DIR-CATEGORY
@direntry
* NODE: (FILE).                 DESCRIPTION. 
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c ------------------------------------------------------------

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying
     
@menu
* overview::                    Overview of the package. 
* class::                       Classes.
* instance::                    Instances.
* slot::                        Accessing slots.
* classification::              ScmObj and Scheme.
* generic::                     Generic procedures and methods.

Appendices

* Package License::             GNU Lesser General Public License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept. 
* function index::              An entry for each function. 
* variable index::              An entry for each variable. 
* type index::                  An entry for each type. 
@end menu
@end ifnottex

@c ------------------------------------------------------------

@c page
@node overview
@chapter Overview of the package


@noindent
@value{PACKAGE} is an object system for Scheme that provides

@itemize
@item
classes with multiple inheritance;

@item
generic procedures;

@item
methods that can specialize on one or more arguments (``multimethods'');

@item
@code{:before}, @code{:after}, and @code{:around} auxiliary methods in
addition to primary methods;

@item
@func{call-next-method} and @func{next-method?} in primary and
@code{:around} methods;

@item
standard method combination a la the default protocol in @clos{}.
@end itemize

@quotation
This document is a Texinfo reformatting of the original documentation by
@value{AUTHOR}.  The repackaged code has been ported to @rnrs{6} Scheme
and tested under Ikarus Scheme.

The author and maintainer of the repackaging and the changes is Marco
Maggi @email{marcomaggi@@gna.org}.

Also some identifiers in the public interface have been changed to make
them more similar to the @clos{} conventions.  For example: the base
class is called @class{class} rather than the original
@code{standard-class}; the syntax used to add methods is
@func{define-method} rather than the original @func{defmethod}.
@end quotation


@c ------------------------------------------------------------

@c page
@node class
@chapter Classes


There is no reason to hide that class values are in truth alists.


@deftp {Class} <class>
The base class of all the @value{PACKAGE} classes.
@end deftp


@deffn Syntax make-class @var{list-of-superclasses} @var{list-of-slots}
Build and return a new class value.

@var{list-of-superclasses} is the list of superclasses of the new
class; acceptable values are:

@itemize
@item
the empty list, in which case @class{class} is added by default;

@item
a list containing only the @class{class} value;

@item
a list of previously defined base classes.
@end itemize

@var{list-of-slots} must be a list of symbols representing the slot
names.  By convention their names should start with a colon character,
@code{:}.

Notice that classes instantiated with @func{make-class} will have no
class definition name.  The @func{class-definition-name} function
applied to them will return the symbol @code{:uninitialized}.
@end deffn


@deffn Syntax define-class @var{name} @var{list-of-superclasses} . @var{list-of-slots}
A wrapper for @func{make-class} that defines a new variable named
@var{name} and assignes the new class to it.  The class definition name
of the class is initialised to @var{name}.
@end deffn


@defun class-definition-name @var{class-object}
Return the class definition name for @var{class-object}.  It is set only
for classes instantiated with @func{define-class}, for classes
instantiated with @func{make-class} the return value is
@code{:uninitialized}.
@end defun


@defun class-precedence-list @var{class-object}
Return a list of classes representing the class precendence list for
@var{class-object} used to dispatch methods.  The first element of the
list if @var{class-object} itself.
@end defun


@defun list-of-slots @var{class-object}
Return a list of symbols representing the slot names of
@var{class-object}.
@end defun


@defun subclass? @var{class-object-1} @var{class-object-2}
Return true if @var{class-object-1} is a subclass of
@var{class-object-2}; @false{} otherwise.
@end defun


@defun class-of @var{object}
Return the class of @var{object}.  This function can be applied to both
class object and instance objects.
@end defun


@c ------------------------------------------------------------

@subsubheading Examples


Definition of a class with no superclasses and 3 slots named: @code{:a},
@code{:b} and @code{:c}:

@example
(define <one>
  (make-class () (:a :b :c))
@end example

@noindent
the same with explicit selection of the base @class{class}:

@example
(define <one>
  (make-class (<class>) (:a :b :c))
@end example

Simple inheritance:

@example
(let* ((<one>   (make-class ()      (:a :b :c)))
       (<two>   (make-class (<one>) (:d :e :f)))
       (<three> (make-class (<two>) (:g :h :i))))
  ---)
@end example

@noindent
and multiple inheritance:

@example
(let* ((<one>   (make-class ()            (:a :b :c)))
       (<two>   (make-class (<one>)       (:d :e :f)))
       (<three> (make-class (<two> <one>) (:g :h :i))))
  ---)
@end example

Defining classes using @func{define-class}:

@example
(define-class <one> ()
  :a :b :c)

(define-class <two> (<one>)
  :d :e :f)

(define-class <three> (<two>)
  :g :h :i)
@end example


@c ------------------------------------------------------------

@c page
@node instance
@chapter Instances


An instance of a class is defined with the @func{make}
procedure.


@defun make @var{class-object} . @var{init-slots}
Take a class argument followed optionally by additional arguments that
are in twosomes, where the first element of a twosome names a slot in
the class, and the second element specifies the value we want that slot
to have in the current instance.

Both the class and the slots of an instance can be read.  Only the slots
can be mutated.
@end defun

@c ------------------------------------------------------------

@subsubheading Examples


Instantiate a class with 3 slots:

@example
(let* ((<one> (make-class () (:a :b :c)))
       (o     (make <one>
                 ':a 1 ':b 2 ':c 3)))
  ---)
@end example

Instantiate a class with superclasses, initialising all the slots:

@example
(let* ((<one>   (make-class () (:a :b :c)))
       (<two>   (make-class (<one>) (:d :e :f)))
       (<three> (make-class (<two>) (:g :h :i)))
       (o       (make <three>
                   ':a 1 ':b 2 ':c 3
                   ':d 4 ':e 5 ':f 6
                   ':g 7 ':h 8 ':i 9)))
  ---)
@end example


@c ------------------------------------------------------------

@c page
@node slot
@chapter Accessing slots


@defun slot-ref @var{object} @var{slot-name}
Return the value of @var{slot-name} in @var{object}.

@var{slot-name} must be a symbol.  It is an error if @var{object} has no
slot named @var{slot-name}.
@end defun


@defun {slot-set!} @var{object} @var{slot-name} @var{new-value}
Overwrite the value of @var{slot-name} in @var{object} with
@var{new-value}.

@var{slot-name} must be a symbol.  It is an error if @var{object} has no
slot named @var{slot-name}.
@end defun


@c ------------------------------------------------------------

@subsubheading Examples


@example
(let* ((<one>  (make-class () (:a :b :c)))
       (o      (make <one>
                 ':a 1 ':b 2 ':c 3)))

  (slot-set! o ':b 123)

  (list (slot-ref o ':b)
        (slot-ref o ':a)
        (slot-ref o ':c)))
=> '(123 1 3)
@end example


@c ------------------------------------------------------------

@c page
@node classification
@chapter ScmObj and Scheme


We will now explain the object classification.  First, some informal
notation:

@itemize @emph
@item ScmObj class
is a class created using ScmObj, typically using @func{make-class};

@item ScmObj class instance
is a class instance created using ScmObj, typically by calling
@func{make} on a ScmObj class;

@item ScmObj object
is an ScmObj class or an ScmObj class instances;

@item pre--ScmObj object
are objects that we had in Scheme before loading ScmObj;

@item Scheme object
is any object we can think of in Scheme, before or after loading ScmObj.
@end itemize

Thus Scheme objects include both pre--ScmObj and ScmObj objects, and
ScmObj objects include both ScmObj classes and instances of ScmObj
classes.

We are now ready to describe where ScmObj classes stand in relation to
ScmObj class instances, and where ScmObj objects stand in relation to
pre--ScmObj objects.

@c ------------------------------------------------------------

@section Classes Are Class Instances Too

From the discussion thus far, it would appear that there are two kinds
of ScmObj objects:

@itemize
@item
a ScmObj class that specifies how its instances look like;

@item
a ScmObj class instance, a particular representative of a ScmObj class.
@end itemize

Actually, this distinction is blurrable.  All ScmObj classes are
themselves instances of a distinguished ScmObj class called
@class{class}.  @class{class} is no exception: it is an instance of
itself.

In other words, all ScmObj objects (both classes and instances) are
instances of instances of @class{class}.  To use @clos{} terminology,
@class{class} is a metaclass of (i.e. ``class of class of'') all ScmObj
objects.

Thus, when we invoke @func{make-class},fwe are actually invoking
@func{make} on @class{class}.  However, the @func{make-class} macro is
still convenient, because it does some extra bookkeeping that
appropriately fills all the slots of the created @class{class} instance.

@c ------------------------------------------------------------

@section Scheme Objects Are Class Instances Too

The previous section described the ScmObj objects: some of them are
ScmObj classes; all of them are ScmObj class instances.

But what about the objects of Scheme itself, the ones it had prior to
loading ScmObj, viz, objects like booleans, numbers, characters,
procedures, pairs, strings, and vectors?  Are they instances of any
class?

Yes they are.  All the objects of Scheme, whether ScmObj or pre--ScmObj,
are considered to be instances of the distinguished class @true{} (the
boolean), the only class that is not a ScmObj object.  @true{} is
implicitly a superclass of every class, and as such is the least
specific class.

Clearly, @true{} too is an instance of @true{}.  Thus it follows that
@true{} is a metaclass of all Scheme objects.

Note that pre--ScmObj objects can claim only @true{} as their class.
ScmObj objects, on the other hand, can claim at least one non--@true{}
class as their class (in addition to @true{}).  We can exploit this to
operationally distinguish between ScmObj and pre--ScmObj objects: simply
call @func{class-of} on the object.  A pre--ScmObj object returns
@true{}, while a ScmObj object returns some non--@true{} class.

@quotation
Recall that @func{class-of} returns the most specific class: if the
object has any non--@true{} class at all, then @true{}, being less
specific, won't be the class that is returned.
@end quotation

At the metaclass level, note that pre--ScmObj objects can only claim
@true{} as their metaclass, whereas ScmObj objects can claim both
@true{} and @class{class} as their metaclass.

ScmObj has no metaclass other than @true{} and @class{class}.

@quotation
In @clos{}, other metaclasses can be posited.  The @clos{} analog of
@func{make-class} takes an optional @code{:metaclass} argument, which
specifies what the metaclass of the class instances should be.
Typically, these metaclasses are defined as subclasses of
@code{standard-class}.
@end quotation


@c ------------------------------------------------------------

@c page
@node generic
@chapter Generic procedures and methods


Generic procedures are procedures that can be specialized to the classes
of their arguments.  Each specialization of a generic procedure is
called a method.  When applying a generic procedure to a set of
arguments, the most specific method vis--a--vis the arguments' classes
is chosen.

@menu
* generic methods::             Methods.
* generic calling::             Calling generic procedures.
@end menu


@c ------------------------------------------------------------

@c page
@node generic methods
@section Methods


Let's first declare a generic procedure using the macro
@func{make-generic-function}:

@example
(define ingests
  (make-generic-function person food))
@end example

This defines a procedure called ingests that requires two arguments.
Presumably it describes the fact of person ingesting food.  (We are
forced here to use the Latinate ``ingests'' rather than the Saxon
``eats'', because we will subsequently distinguish between eating
(solids) and drinking (liquids).)

We are now ready to define methods describing the eating and drinking
habits of the people.  To do this, we use the macro @func{define-method}
to add methods to the generic procedure @func{ingests} define before.

Schemers will drink something only if it's at least .5 wholesome: (These
examples require the format feature.)

@example
(define-method ingests ((p <schemer>) (f <beverage>))
  (if (>= (slot-ref f ':wholesomeness)
          .5)
    (format #t "~a sips some ~a.~%"
      (slot-ref p ':name)
      (slot-ref f ':name))))
@end example

The first subexpression of @func{define-method} is the generic
procedure.  In this case, it is @func{ingests}.

The second subexpression is a lambda--list of arguments to the method.
This lambda--list starts off with the required arguments, where each
argument is specified as a two--element list: the parameter followed by
its class.  The number of required arguments is the same as the number
of arguments specified by @func{make-generic-function} for the generic
procedure.  The rest of the lambda--list may contain additional
arguments, including a ``rest'' argument.  In the case above, the
required arguments are @var{p} of class @class{schemer} and @var{f} of
class @class{beverage}.  There are no additional arguments.

After the second subexpression, we have the method body.

Proceeding with other methods for ingests: no snack is too lowly for a
Schemer:

@example
(define-method ingests ((p <schemer>) (f <snack>))
  (format #t "~a wolfs down some ~a.~%"
    (slot-ref p ':name)
    (slot-ref f ':name)))
@end example

Lispers are open to any drink:

@example
(define-method ingests ((p <lisper>) (f <beverage>))
  (format #t "~a guzzles some ~a.~%"
    (slot-ref p ':name)
    (slot-ref f ':name)))
@end example

Lispers won't eat anything that isn't at least .5 wholesome:

@example
(define-method ingests ((p <lisper>) (f <snack>))
  (if (>= (slot-ref f ':wholesomeness)
          .5)
    (format #t "~a pecks at some ~a.~%"
      (slot-ref p ':name)
      (slot-ref f ':name))))
@end example

The default method: humans eat and drink anything:

@example
(define-method ingests ((p <human>) (f <food>))
  (format #t "~a consumes ~a.~%"
    (slot-ref p ':name)
    (slot-ref f ':name)))
@end example

Note that ScmObj methods can specialize on more than one argument class.
In other words, ScmObj methods, like @clos{} methods, are multimethods.

@c ------------------------------------------------------------

@c page
@node generic calling
@section Calling generic procedures


We can now offer Telemakhos, Odysseus, Diomedes, Nestor, Menelaos, and
Penelope some beer, coke, milk, candy, french fries, and carrots. We
call the generic procedure ingests, and let it dispatch the appropriate
method based on the class of the person and the food arguments:

@example
(for-each
  (lambda (person)
    (for-each
      (lambda (food)
        (eat person food))
      (list beer coke milk candy
        french-fries carrots)))
  (list Telemakhos Odysseus Diomedes
    Nestor Menelaos Penelope))
@end example

You will find that, as expected,

    *

      Telemakhos consumes everything in sight;

    *

      the Schemers Odysseus and Diomedes wolf down candy, french fries and carrots but sip only milk; and

    *

      the Lispers Nestor and Menelaos guzzle beer, coke and milk but eat only carrots.

But how does the eclectic Lisper Penelope, who is both Schemer and
Lisper, fare? We'll find that for the purposes of nourishment, Penelope
sits down with the Schemers. She too wolfs down candy, french fries and
carrots but sips only milk, eschewing the more Lispy delights of beer
and coke. This is because the class eclectic-lisper-c lists <schemer>
before lisper-c in its superclass list.


@c ------------------------------------------------------------

@c page
@node Package License
@appendix GNU LESSER GENERAL PUBLIC LICENSE

@cindex LGPL, Lesser General Public License
@center Version 2.1, February 1999

@display
Copyright @copyright{} 1991, 1999 Free Software Foundation, Inc.
59 Temple Place -- Suite 330, Boston, MA 02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.

[This is the first released version of the Lesser GPL.  It also counts
as the successor of the GNU Library Public License, version 2, hence the
version number 2.1.]
@end display

@appendixsubsec Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
Licenses are intended to guarantee your freedom to share and change
free software---to make sure the software is free for all its users.

  This license, the Lesser General Public License, applies to some
specially designated software---typically libraries---of the Free
Software Foundation and other authors who decide to use it.  You can use
it too, but we suggest you first think carefully about whether this
license or the ordinary General Public License is the better strategy to
use in any particular case, based on the explanations below.

  When we speak of free software, we are referring to freedom of use,
not price.  Our General Public Licenses are designed to make sure that
you have the freedom to distribute copies of free software (and charge
for this service if you wish); that you receive source code or can get
it if you want it; that you can change the software and use pieces of it
in new free programs; and that you are informed that you can do these
things.

  To protect your rights, we need to make restrictions that forbid
distributors to deny you these rights or to ask you to surrender these
rights.  These restrictions translate to certain responsibilities for
you if you distribute copies of the library or if you modify it.

  For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link other code with the library, you must provide
complete object files to the recipients, so that they can relink them
with the library after making changes to the library and recompiling
it.  And you must show them these terms so they know their rights.

  We protect your rights with a two-step method: (1) we copyright the
library, and (2) we offer you this license, which gives you legal
permission to copy, distribute and/or modify the library.

  To protect each distributor, we want to make it very clear that
there is no warranty for the free library.  Also, if the library is
modified by someone else and passed on, the recipients should know
that what they have is not the original version, so that the original
author's reputation will not be affected by problems that might be
introduced by others.

  Finally, software patents pose a constant threat to the existence of
any free program.  We wish to make sure that a company cannot
effectively restrict the users of a free program by obtaining a
restrictive license from a patent holder.  Therefore, we insist that
any patent license obtained for a version of the library must be
consistent with the full freedom of use specified in this license.

  Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License.  This license, the GNU Lesser
General Public License, applies to certain designated libraries, and
is quite different from the ordinary General Public License.  We use
this license for certain libraries in order to permit linking those
libraries into non-free programs.

  When a program is linked with a library, whether statically or using
a shared library, the combination of the two is legally speaking a
combined work, a derivative of the original library.  The ordinary
General Public License therefore permits such linking only if the
entire combination fits its criteria of freedom.  The Lesser General
Public License permits more lax criteria for linking other code with
the library.

  We call this license the @dfn{Lesser} General Public License because it
does @emph{Less} to protect the user's freedom than the ordinary General
Public License.  It also provides other free software developers Less
of an advantage over competing non-free programs.  These disadvantages
are the reason we use the ordinary General Public License for many
libraries.  However, the Lesser license provides advantages in certain
special circumstances.

  For example, on rare occasions, there may be a special need to
encourage the widest possible use of a certain library, so that it becomes
a de-facto standard.  To achieve this, non-free programs must be
allowed to use the library.  A more frequent case is that a free
library does the same job as widely used non-free libraries.  In this
case, there is little to gain by limiting the free library to free
software only, so we use the Lesser General Public License.

  In other cases, permission to use a particular library in non-free
programs enables a greater number of people to use a large body of
free software.  For example, permission to use the GNU C Library in
non-free programs enables many more people to use the whole GNU
operating system, as well as its variant, the GNU/Linux operating
system.

  Although the Lesser General Public License is Less protective of the
users' freedom, it does ensure that the user of a program that is
linked with the Library has the freedom and the wherewithal to run
that program using a modified version of the Library.

  The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
``work based on the library'' and a ``work that uses the library''.  The
former contains code derived from the library, whereas the latter must
be combined with the library in order to run.

@iftex
@appendixsubsec TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end iftex
@ifinfo
@center GNU LESSER GENERAL PUBLIC LICENSE
@center TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end ifinfo

@enumerate 0
@item
This License Agreement applies to any software library or other program
which contains a notice placed by the copyright holder or other
authorized party saying it may be distributed under the terms of this
Lesser General Public License (also called ``this License'').  Each
licensee is addressed as ``you''.

  A ``library'' means a collection of software functions and/or data
prepared so as to be conveniently linked with application programs
(which use some of those functions and data) to form executables.

  The ``Library'', below, refers to any such software library or work
which has been distributed under these terms.  A ``work based on the
Library'' means either the Library or any derivative work under
copyright law: that is to say, a work containing the Library or a
portion of it, either verbatim or with modifications and/or translated
straightforwardly into another language.  (Hereinafter, translation is
included without limitation in the term ``modification''.)

  ``Source code'' for a work means the preferred form of the work for
making modifications to it.  For a library, complete source code means
all the source code for all modules it contains, plus any associated
interface definition files, plus the scripts used to control compilation
and installation of the library.

  Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running a program using the Library is not restricted, and output from
such a program is covered only if its contents constitute a work based
on the Library (independent of the use of the Library in a tool for
writing it).  Whether that is true depends on what the Library does
and what the program that uses the Library does.

@item
You may copy and distribute verbatim copies of the Library's
complete source code as you receive it, in any medium, provided that
you conspicuously and appropriately publish on each copy an
appropriate copyright notice and disclaimer of warranty; keep intact
all the notices that refer to this License and to the absence of any
warranty; and distribute a copy of this License along with the
Library.

  You may charge a fee for the physical act of transferring a copy,
and you may at your option offer warranty protection in exchange for a
fee.

@item
You may modify your copy or copies of the Library or any portion
of it, thus forming a work based on the Library, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

@enumerate a
@item
The modified work must itself be a software library.

@item
You must cause the files modified to carry prominent notices
stating that you changed the files and the date of any change.

@item
You must cause the whole of the work to be licensed at no
charge to all third parties under the terms of this License.

@item
If a facility in the modified Library refers to a function or a
table of data to be supplied by an application program that uses
the facility, other than as an argument passed when the facility
is invoked, then you must make a good faith effort to ensure that,
in the event an application does not supply such function or
table, the facility still operates, and performs whatever part of
its purpose remains meaningful.

(For example, a function in a library to compute square roots has
a purpose that is entirely well-defined independent of the
application.  Therefore, Subsection 2d requires that any
application-supplied function or table used by this function must
be optional: if the application does not supply it, the square
root function must still compute square roots.)
@end enumerate

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Library,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Library, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote
it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Library.

In addition, mere aggregation of another work not based on the Library
with the Library (or with a work based on the Library) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

@item
You may opt to apply the terms of the ordinary GNU General Public
License instead of this License to a given copy of the Library.  To do
this, you must alter all the notices that refer to this License, so
that they refer to the ordinary GNU General Public License, version 2,
instead of to this License.  (If a newer version than version 2 of the
ordinary GNU General Public License has appeared, then you can specify
that version instead if you wish.)  Do not make any other change in
these notices.

  Once this change is made in a given copy, it is irreversible for
that copy, so the ordinary GNU General Public License applies to all
subsequent copies and derivative works made from that copy.

  This option is useful when you wish to copy part of the code of
the Library into a program that is not a library.

@item
You may copy and distribute the Library (or a portion or
derivative of it, under Section 2) in object code or executable form
under the terms of Sections 1 and 2 above provided that you accompany
it with the complete corresponding machine-readable source code, which
must be distributed under the terms of Sections 1 and 2 above on a
medium customarily used for software interchange.

  If distribution of object code is made by offering access to copy
from a designated place, then offering equivalent access to copy the
source code from the same place satisfies the requirement to
distribute the source code, even though third parties are not
compelled to copy the source along with the object code.

@item
A program that contains no derivative of any portion of the
Library, but is designed to work with the Library by being compiled or
linked with it, is called a ``work that uses the Library''.  Such a
work, in isolation, is not a derivative work of the Library, and
therefore falls outside the scope of this License.

  However, linking a ``work that uses the Library'' with the Library
creates an executable that is a derivative of the Library (because it
contains portions of the Library), rather than a ``work that uses the
library''.  The executable is therefore covered by this License.
Section 6 states terms for distribution of such executables.

  When a ``work that uses the Library'' uses material from a header file
that is part of the Library, the object code for the work may be a
derivative work of the Library even though the source code is not.
Whether this is true is especially significant if the work can be
linked without the Library, or if the work is itself a library.  The
threshold for this to be true is not precisely defined by law.

  If such an object file uses only numerical parameters, data
structure layouts and accessors, and small macros and small inline
functions (ten lines or less in length), then the use of the object
file is unrestricted, regardless of whether it is legally a derivative
work.  (Executables containing this object code plus portions of the
Library will still fall under Section 6.)

  Otherwise, if the work is a derivative of the Library, you may
distribute the object code for the work under the terms of Section 6.
Any executables containing that work also fall under Section 6,
whether or not they are linked directly with the Library itself.

@item
As an exception to the Sections above, you may also combine or
link a ``work that uses the Library'' with the Library to produce a
work containing portions of the Library, and distribute that work
under terms of your choice, provided that the terms permit
modification of the work for the customer's own use and reverse
engineering for debugging such modifications.

  You must give prominent notice with each copy of the work that the
Library is used in it and that the Library and its use are covered by
this License.  You must supply a copy of this License.  If the work
during execution displays copyright notices, you must include the
copyright notice for the Library among them, as well as a reference
directing the user to the copy of this License.  Also, you must do one
of these things:

@enumerate a
@item
Accompany the work with the complete corresponding
machine-readable source code for the Library including whatever
changes were used in the work (which must be distributed under
Sections 1 and 2 above); and, if the work is an executable linked
with the Library, with the complete machine-readable ``work that
uses the Library'', as object code and/or source code, so that the
user can modify the Library and then relink to produce a modified
executable containing the modified Library.  (It is understood
that the user who changes the contents of definitions files in the
Library will not necessarily be able to recompile the application
to use the modified definitions.)

@item
Use a suitable shared library mechanism for linking with the Library.  A
suitable mechanism is one that (1) uses at run time a copy of the
library already present on the user's computer system, rather than
copying library functions into the executable, and (2) will operate
properly with a modified version of the library, if the user installs
one, as long as the modified version is interface-compatible with the
version that the work was made with.

@item
Accompany the work with a written offer, valid for at
least three years, to give the same user the materials
specified in Subsection 6a, above, for a charge no more
than the cost of performing this distribution.

@item
If distribution of the work is made by offering access to copy
from a designated place, offer equivalent access to copy the above
specified materials from the same place.

@item
Verify that the user has already received a copy of these
materials or that you have already sent this user a copy.
@end enumerate

  For an executable, the required form of the ``work that uses the
Library'' must include any data and utility programs needed for
reproducing the executable from it.  However, as a special exception,
the materials to be distributed need not include anything that is
normally distributed (in either source or binary form) with the major
components (compiler, kernel, and so on) of the operating system on
which the executable runs, unless that component itself accompanies the
executable.

  It may happen that this requirement contradicts the license
restrictions of other proprietary libraries that do not normally
accompany the operating system.  Such a contradiction means you cannot
use both them and the Library together in an executable that you
distribute.

@item
You may place library facilities that are a work based on the
Library side-by-side in a single library together with other library
facilities not covered by this License, and distribute such a combined
library, provided that the separate distribution of the work based on
the Library and of the other library facilities is otherwise
permitted, and provided that you do these two things:

@enumerate a
@item
Accompany the combined library with a copy of the same work
based on the Library, uncombined with any other library
facilities.  This must be distributed under the terms of the
Sections above.

@item
Give prominent notice with the combined library of the fact
that part of it is a work based on the Library, and explaining
where to find the accompanying uncombined form of the same work.
@end enumerate

@item
You may not copy, modify, sublicense, link with, or distribute
the Library except as expressly provided under this License.  Any
attempt otherwise to copy, modify, sublicense, link with, or
distribute the Library is void, and will automatically terminate your
rights under this License.  However, parties who have received copies,
or rights, from you under this License will not have their licenses
terminated so long as such parties remain in full compliance.

@item
You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Library or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Library (or any work based on the
Library), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Library or works based on it.

@item
Each time you redistribute the Library (or any work based on the
Library), the recipient automatically receives a license from the
original licensor to copy, distribute, link with or modify the Library
subject to these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties with
this License.

@item
If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Library at all.  For example, if a patent
license would not permit royalty-free redistribution of the Library by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Library.

If any portion of this section is held invalid or unenforceable under any
particular circumstance, the balance of the section is intended to apply,
and the section as a whole is intended to apply in other circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

@item
If the distribution and/or use of the Library is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Library under this License may add
an explicit geographical distribution limitation excluding those countries,
so that distribution is permitted only in or among countries not thus
excluded.  In such case, this License incorporates the limitation as if
written in the body of this License.

@item
The Free Software Foundation may publish revised and/or new
versions of the Lesser General Public License from time to time.
Such new versions will be similar in spirit to the present version,
but may differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Library
specifies a version number of this License which applies to it and
``any later version'', you have the option of following the terms and
conditions either of that version or of any later version published by
the Free Software Foundation.  If the Library does not specify a
license version number, you may choose any version ever published by
the Free Software Foundation.

@item
If you wish to incorporate parts of the Library into other free
programs whose distribution conditions are incompatible with these,
write to the author to ask for permission.  For software which is
copyrighted by the Free Software Foundation, write to the Free
Software Foundation; we sometimes make exceptions for this.  Our
decision will be guided by the two goals of preserving the free status
of all derivatives of our free software and of promoting the sharing
and reuse of software generally.

@iftex
@heading NO WARRANTY
@end iftex
@ifinfo
@center NO WARRANTY
@end ifinfo

@item
BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
OTHER PARTIES PROVIDE THE LIBRARY ``AS IS'' WITHOUT WARRANTY OF ANY
KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

@item
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.
@end enumerate

@iftex
@heading END OF TERMS AND CONDITIONS
@end iftex
@ifinfo
@center END OF TERMS AND CONDITIONS
@end ifinfo

@page
@appendixsubsec How to Apply These Terms to Your New Libraries

  If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of the
ordinary General Public License).

  To apply these terms, attach the following notices to the library.  It is
safest to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least the
``copyright'' line and a pointer to where the full notice is found.

@smallexample
@var{one line to give the library's name and an idea of what it does.}
Copyright (C) @var{year}  @var{name of author}

This library is free software; you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 2.1 of the License, or (at
your option) any later version.

This library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.
@end smallexample

Also add information on how to contact you by electronic and paper mail.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a ``copyright disclaimer'' for the library, if
necessary.  Here is a sample; alter the names:

@smallexample
Yoyodyne, Inc., hereby disclaims all copyright interest in the library
`Frob' (a library for tweaking knobs) written by James Random Hacker.

@var{signature of Ty Coon}, 1 April 1990
Ty Coon, President of Vice
@end smallexample

That's all there is to it!

@c ------------------------------------------------------------

@c page
@node references
@appendix Bibliography and references



@c ------------------------------------------------------------

@c page
@node concept index
@appendix An entry for each concept
     
@printindex cp
     
@node function index
@appendix An entry for each function. 

@printindex fn

@node variable index
@appendix An entry for each variable. 

@printindex vr

@node type index
@appendix An entry for each type. 

@printindex tp

@contents
@bye

@c end of file
