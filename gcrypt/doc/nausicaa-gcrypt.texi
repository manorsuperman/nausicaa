\input texinfo.tex
@c %**start of header
@setfilename nausicaa-gcrypt.info
@settitle Libgcrypt for Nausicaa
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@macro condition{NAME}
@code{&\NAME\}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro mpi{}
@acronym{MPI}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro sql{}
@acronym{SQL}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@macro axml{}
@acronym{XML}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro ssh{}
@acronym{SSH}
@end macro

@macro ssl{}
@acronym{SSL}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro tls{}
@acronym{TLS}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@macro gcryptref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,gcrypt}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Libgcrypt for Nausicaa

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/Gcrypt

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-gcrypt

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2009

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides a binding to the Libgcrypt C language library.  It is built
upon Nausicaa/Scheme, making use of its foreign--functions interface.

Libgcrypt is a general purpose library of cryptographic building blocks.
It is originally based on code used by GnuPG.  It does not provide any
implementation of OpenPGP or other protocols.  Thorough understanding of
applied cryptography is required to use Libgcrypt.

The libraries support Ikarus, Mosh and Ypsilon Scheme; the package
supports @gnu{}+Linux systems.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/nausicaa/downloads}

@noindent
the project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/tree/master}

@noindent
Libgcrypt is available at:

@center @url{http://www.gnupg.org/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-gcrypt: (nausicaa-gcrypt).   Libgcrypt for Nausicaa.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* init::                        Initialisation and control.
* error::                       Error handling.
* hash::                        Hash functions.
* symmetric::                   Symmetric cryptography.
* mpi::                         Multiple precision integers.
* sexps::                       S--expressions.
* pubkey::                      Public key cryptography.
* random::                      Pseudo--random numbers generation.
* compensations::               Compensated constructors.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

@detailmenu
 --- The Detailed Node Listing ---

Error handling

* error codes::                 Handling error codes.

Hash functions

* hash handle::                 Message digest handle.
* hash enums::                  Enumerations.
* hash api::                    Hash functions interface.

Enumerations

* hash enums algo::             Hash algorithms.
* hash enums flags::            Hash algorithm flags.

Hash functions interface

* hash api init::               Initialisation and finalisation.
* hash api digest::             Processing input data.
* hash api inspect::            Inspection.

Symmetric cryptography

* symmetric intro::             Introduction to symmetric cryptography.
* symmetric handle::            Symmetric cryptography handle.
* symmetric enums::             Enumeration types.
* symmetric api::               Programming interface.

Enumeration types

* symmetric enums algo::        Symmetric cipher algorithms.
* symmetric enums mode::        Symmetric cipher modes.
* symmetric enums flags::       Symmetric cipher flags.

Multiple precision integers

* mpi intro::                   Introduction.
* mpi pred::                    Predicates.
* mpi format::                  String conversion.

S--expressions

* sexps intro::                 Introduction.
* sexps enums::                 Enumeration types.
* sexps string::                Converting sexps to and from strings.
* sexps list::                  Converting sexps to lists.

Public key cryptography

* pubkey intro::                Introduction.
* pubkey api::                  Programming interface.

Pseudo--random numbers generation

* random quality::              Selecting pseudo--random numbers
                                quality.
* random api::                  Programming interface.

@end detailmenu
@end menu

@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides a binding to the Libgcrypt C language library.  It is built
upon Nausicaa/Scheme, making use of its foreign--functions interface.

Libgcrypt is a general purpose library of cryptographic building blocks.
It is originally based on code used by GnuPG.  It does not provide any
implementation of OpenPGP or other protocols.  Thorough understanding of
applied cryptography is required to use Libgcrypt.

The libraries support Ikarus, Mosh and Ypsilon Scheme; the package
supports @gnu{}+Linux systems.

The installed libraries are:

@table @library
@item foreign crypto gcrypt shared-object
Exports the single binding @code{gcrypt-shared-object} which references
the foreign shared library.

@item foreign crypto gcrypt sizeof
Export bindings to constant values and data structures accessors.

@item foreign crypto gcrypt enumerations
Defines enumeration types used to handle Gcrypt options and flags.

@item foreign crypto gcrypt platform
Exports one binding for each foreign function; the Scheme functions have
the same name of the C functions, so @cfunc{gcry_check_version} is
available as @func{gcry_check_version}.  This library makes the original
Libgcrypt documentation relevant for this package.  @gcryptref{Top, The
Libgcrypt library}.

@item foreign crypto gcrypt primitives
Exports one binding for each callout function in the @code{platform}
library, implementing marshaling of arguments and return values.  The
Scheme functions have the same name of the C functions, but with
underscores converted to dashes; so @cfunc{gcry_check_version} is
available as @func{gcry-check-version}.

This documentation file describes the @api{} exported by this library;
only functions implementing marshaling of values are described: if a
function is not documented here it is exported ``as is'' from the
@code{platform} library.

@item foreign crypto gcrypt
Compound library exporting the high--level @api{}; it reexports bindings
from the @samp{primitives} library and the constant values from the
@samp{sizeof} library.  Additionally bindings from @library{foreign
crypto gpg-error conditions} are rexported.

@item foreign crypto gcrypt compensated
Exports bindings to constructor functions making use of the
@library{compensations} library from Nausicaa/Scheme.
@nauref{compensations, Compensation stacks}.
@end table

@c page
@node init
@chapter Initialisation and control


The following functions manage library initialisation and configuration.
@gcryptref{Initializing the library, Initializing the library}.


@defun gcry-check-version
Initialise the library and check its version number.  If successful:
return a Scheme string representing the foreign library's version
number; if an error occurs: return @false{}.
@end defun


@defun gcry-control/int @var{cmd} @var{int-value}
@defunx gcry-control/uint @var{cmd} @var{unsigned-int-value}
@defunx gcry-control/ptr @var{cmd} @var{pointer-value}
Specialisations of the variadic function @cfunc{gcry_control} accepting
an integer, an unsigned integer or a pointer value.  Notice that when
the command @var{cmd} requires no argument, we can use
@func{gcry-control/int} with @var{int-value} set to zero.

The return value is always an integer; @strong{no} error detection is
performed by @library{foreign gcrypt primitives}.
@end defun

@c page
@node error
@chapter Error handling


Unless otherwise specified, all the functions from the @code{primitives}
library raise an exception in case of error.

@menu
* error codes::                 Handling error codes.
@end menu

@c page
@node error codes
@section Handling error codes


@defun gcry-strerror @var{code}
Return a Scheme string describing the error @var{code}.
@end defun


@defun gcry-strsource @var{code}
Return a Scheme string describing the error source specified by
@var{code}.
@end defun

@c page
@node hash
@chapter Hash functions


The functions documented in this chapter manage creation of message
digests for streams of bytes.  @gcryptref{Hashing, Hashing}.

@menu
* hash handle::                 Message digest handle.
* hash enums::                  Enumerations.
* hash api::                    Hash functions interface.
@end menu

@c page
@node hash handle
@section Message digest handle


Unless otherwise specified, the folowing bindings are exported by the
@library{foreign crypto gcrypt typedefs} library and reexported by the
@library{foreign crypto gcrypt} library.

Functions from the primitives and high--level @api{} accept objects of
type @code{gcry-md-handle} as @var{mdhd} arguments.  Functions from the
platform libraries accept raw pointers as references to message digest
handles.


@deftp {Object Type} gcry-md-handle
Reference to a Gcrypt message digest handle.  It is disjoint from all
the other Scheme object types.
@end deftp


@defun gcry-md-handle? @var{obj}
Return @true{} if @var{obj} is of type @code{gcry-md-handle}.
@end defun


@defun pointer->gcry-md-handle @var{pointer}
@defunx gcry-md-handle->pointer @var{syhd}
Convert between a raw pointer object and a @code{gcry-md-handle} object.
@end defun

@c page
@node hash enums
@section Enumerations


The bindings documented in this section are exported by the
@library{foreign crypto gcrypt enumeration} library and reexported by
the @library{foreign crypto gcrypt} library.

@menu
* hash enums algo::             Hash algorithms.
* hash enums flags::            Hash algorithm flags.
@end menu

@c page
@node hash enums algo
@subsection Hash algorithms


@deftp {Enumeration Type} enum-gcry-md-algo
Used to select hash function algorithms.  It enumerates the following
symbols:

@example
md5                  sha1
rmd160               md2
tiger                haval
sha256               sha384
sha512               sha224
md4                  crc32
crc32-rfc1510        crc24-rfc2440
whirlpool
@end example
@end deftp


@deffn Syntax gcry-md-algo @ameta{symbol}
Expand to an enumeration set of type @code{enum-gcry-md-algo} holding
the symbol @meta{symbol}.
@end deffn


@defun gcry-md-algo->value @var{set}
@defunx value->gcry-md-algo @var{integer}
Convert to and from an enumeration set of type @code{enum-gcry-md-algo}
holding a single element and the corresponding constant recognised by
Gcrypt.
@end defun

@c page
@node hash enums flags
@subsection Hash algorithm flags


@deftp {Enumeration Type} enum-gcry-md-flags
Used to select hash algorithm flags.  It enumerates the following
symbols:

@example
secure  hmac
@end example
@end deftp


@deffn Syntax gcry-md-flags @ameta{symbol} ...
Expand to an enumeration set of type @code{enum-gcry-md-flags} holding
the given @meta{symbol} arguments.
@end deffn


@defun gcry-md-flags->value @var{set}
@defunx value->gcry-md-flags @var{integer}
Convert to and from an enumeration set of type @code{enum-gcry-md-flags}
and the corresponding constant recognised by Gcrypt.
@end defun

@c page
@node hash api
@section Hash functions interface


@menu
* hash api init::               Initialisation and finalisation.
* hash api digest::             Processing input data.
* hash api inspect::            Inspection.
@end menu

@c page
@node hash api init
@subsection Initialisation and finalisation


In the following descriptions, unless otherwise specified, the argument
@var{algo} is an enumeration set of type @code{enum-gcry-md-algo}
holding a single element.


@defun gcry-md-open @var{algo}
@defunx gcry-md-open @var{algo} @var{flags}
Build and return a new handler for message digest computation, an object
of type @code{gcrypt-md-handle}.

@var{algo} can be an enumeration set of type @code{enum-gcry-md-algo} or
@false{} if the algorithm is selected later.  The optional @var{flags}
must be an enumeration set of type @code{enum-gcry-md-flags}.
@end defun


@defun gcry-md-copy @var{mdhd}
Build and return a new handler for message digest computation, an object
of type @code{gcrypt-md-handle}, cloning the context in @var{mdhd}.
@end defun


@defun gcry-md-close @var{mdhd}
Release all the resources associated to @var{mdhd}.
@end defun


@defun gcry-md-final @var{mdhd}
Finalise @var{mdhd}.
@end defun


@defun gcry-md-reset @var{mdhd}
Reset the context in @var{mdhd} to its initial state.
@end defun


@defun gcry-md-enable @var{mdhd} @var{algo}
Enable @var{algo} for @var{mdhd}.
@end defun


@defun gcry-cipher-setkey @var{mdhd} @var{key}
Set MAC keyword @var{key} in the context of @var{mdhd}.  @var{key} can
be a Scheme string, a Scheme bytevector or @class{memblock} object.
@nauref{memory blocks, Memory blocks}.
@end defun


@c page
@node hash api digest
@subsection Processing input data


In the following descriptions, unless otherwise specified, the argument
@var{algo} is an enumeration set of type @code{enum-gcry-md-algo}
holding a single element.


@defun gcry-md-write @var{mdhd} @var{in.ptr} @var{in.len}
Update @var{mdhd} with the given block of memory.
@end defun


@defun gcry-md-write* @var{mdhd} @var{obj}
Update @var{mdhd} with @var{obj}, which can be a Scheme string, a Scheme
bytevector or a @class{memblock} object.  @nauref{memory blocks, Memory
blocks}.
@end defun


@defun gcry-md-read @var{mdhd} @var{algo}
Finalise @var{mdhd} and compute the message digest of @var{algo}, which
must represent a previously enabled algorithm; return a Scheme
bytevector holding the digest.
@end defun


@defun gcry-md-hash-buffer @var{algo} @var{in.ptr} @var{in.len}
Compute the message digest of the specified memory block using
@var{algo}; return a Scheme bytevector holding the digest.
@end defun


@defun gcry-md-hash-buffer* @var{algo} @var{obj}
Compute the message digest of @var{obj} using @var{algo}; return a
Scheme bytevector holding the digest.  @var{obj} can be a Scheme string,
a Scheme bytevector or a @class{memblock} object.  @nauref{memory
blocks, Memory blocks}.
@end defun

@c page
@node hash api inspect
@subsection Inspection


In the following descriptions, unless otherwise specified, the argument
@var{algo} is an enumeration set of type @code{enum-gcry-md-algo}
holding a single element.


@defun gcry-md-algo-name @var{algo}
@defunx gcry-md-map-name @var{name}
Convert to and from an an enumeration set of type
@code{enum-gcry-md-algo} and a Scheme string or symbol representing an
algorithm name.
@end defun


@defun gcry-md-test-algo @var{algo}
Return @true{} if the algorithm selected by @var{algo} is available in
the installed Gcrypt.
@end defun


@defun gcry-md-get-algo-dlen @var{algo}
Return the number of bytes in the message digest produced by @var{algo}.
@end defun


@defun gcry-md-is-secure? @var{mdhd}
@defunx gcry-md-is-secure @var{mdhd}
Return @true{} if @var{mdhd} is allocated in secure memory.
@end defun


@defun gcry-md-is-enabled? @var{mdhd} @var{algo}
@defunx gcry-md-is-enabled @var{mdhd} @var{algo}
Return @true{} if @var{algo} is enabled in @var{mdhd}.
@end defun


@defun gcry-md-enabled-algos @var{mdhd}
Return an enumeration set of type @code{enum-gcry-md-algo} representing
the algorithms enabled in @var{mdhd}.
@end defun


@defun gcry-md-get-asnoid @var{algo}
Return a Scheme bytevector representing a DER encoded ASN.1 OID for
@var{algo}.
@end defun


@c page
@node symmetric
@chapter Symmetric cryptography


The functions documented in this chapter manage encryption and
decryption for streams of bytes using symmetric key algorithms.
@gcryptref{Symmetric cryptography, Symmetric cryptography}.

@menu
* symmetric intro::             Introduction to symmetric cryptography.
* symmetric handle::            Symmetric cryptography handle.
* symmetric enums::             Enumeration types.
* symmetric api::               Programming interface.
@end menu

@c page
@node symmetric intro
@section Introduction to symmetric cryptography


For an introduction to symmetric block and stream ciphers, see:

@center @url{http://en.wikipedia.org/wiki/Block_cipher}
@center @url{http://en.wikipedia.org/wiki/Stream_cipher}

@noindent
for an explanation of block cipher modes:

@center @url{http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation}

Here is an example, using compesations:

@example
(import (nausicaa)
  (compensations)
  (foreign cstrings)
  (foreign crypto gcrypt)
  (foreign crypto gcrypt compensated))

(with-compensations
  (let ((hd (gcry-cipher-open/c (gcry-cipher-algo arcfour)
                                (gcry-cipher-mode stream))))
    (gcry-cipher-setkey hd "ciao, ciao")
    (gcry-cipher-encrypt* enc "you complete my fate")))
@end example

@c page
@node symmetric handle
@section Symmetric cryptography handle


Unless otherwise specified, the folowing bindings are exported by the
@library{foreign crypto gcrypt typedefs} library and reexported by the
@library{foreign crypto gcrypt} library.

Functions from the primitives and high--level @api{} accept objects of
type @code{gcry-symmetric-handle} as @var{syhd} arguments.  Functions
from the platform libraries accept raw pointers as references to
symmetric cryptography handles.


@deftp {Object Type} gcry-symmetric-handle
Reference to a Gcrypt symmetric cryptography handle.  It is disjoint
from all the other Scheme object types.
@end deftp


@defun gcry-symmetric-handle? @var{obj}
Return @true{} if @var{obj} is of type @code{gcry-symmetric-handle}.
@end defun


@defun pointer->gcry-symmetric-handle @var{pointer}
@defunx gcry-symmetric-handle->pointer @var{syhd}
Convert between a raw pointer object and a @code{gcry-symmetric-handle}
object.
@end defun

@c page
@node symmetric enums
@section Enumeration types


The bindings described in this section are exported by the
@library{foreign crypto gcrypt enumerations} library and reexported by
the @library{foreign crypto gcrypt} library.

@menu
* symmetric enums algo::        Symmetric cipher algorithms.
* symmetric enums mode::        Symmetric cipher modes.
* symmetric enums flags::       Symmetric cipher flags.
@end menu

@c page
@node symmetric enums algo
@subsection Symmetric cipher algorithms


@deftp {Enumeration Type} enum-gcry-cipher-algo
Used to select symmetric cypher algorithms.  It enumerates the following
symbols:

@example
idea                         triple-des
cast5                        blowfish
safer-sk128                  des-sk
aes                          aes192
aes256                       twofish
arcfour                      des
twofish128                   serpent128
serpent192                   serpent256
rfc2268-40                   rfc2268-128
seed                         camellia128
camellia192                  camellia256
aes128                       rijndael
rijndael128                  rijndael192
rijndael256
@end example
@end deftp


@deffn Syntax gcry-cipher-algo @ameta{symbol}
Expand to an enumeration set of type @code{enum-gcry-cipher-algo}
holding the symbol @meta{symbol}.
@end deffn


@defun gcry-cipher-algo->value @var{set}
@defunx value->gcry-cipher-algo @var{integer}
Convert to and from an enumeration set of type
@code{enum-gcry-cipher-algo} holding a single element and the
corresponding constant recognised by Gcrypt.
@end defun

@c page
@node symmetric enums mode
@subsection Symmetric cipher modes


@deftp {Enumeration Type} enum-gcry-cipher-mode
Used to select symmetric cypher modes.  It enumerates the following
symbols:

@example
ecb cfb cbc stream ofb ctr
@end example
@end deftp


@deffn Syntax gcry-cipher-mode @ameta{symbol}
Expand to an enumeration set of type @code{enum-gcry-cipher-mode}
holding the symbol @meta{symbol}.
@end deffn


@defun gcry-cipher-mode->value @var{set}
@defunx value->gcry-cipher-mode @var{integer}
Convert to and from an enumeration set of type
@code{enum-gcry-cipher-mode} holding a single element and the
corresponding constant recognised by Gcrypt.
@end defun

@c page
@node symmetric enums flags
@subsection Symmetric cipher flags


@deftp {Enumeration Type} enum-gcry-cipher-flags
Used to select symmetric cypher flags.  It enumerates the following
symbols:

@example
secure  enable-sync  cbc-cts  cbc-mac
@end example
@end deftp


@deffn Syntax gcry-cipher-flags @ameta{symbol} ...
Expand to an enumeration set of type @code{enum-gcry-cipher-flags}
holding the given @meta{symbol} arguments.
@end deffn


@defun gcry-cipher-flags->value @var{set}
@defunx value->gcry-cipher-flags @var{integer}
Convert to and from an enumeration set of type
@code{enum-gcry-cipher-flags} and the corresponding constant recognised
by Gcrypt.
@end defun

@c page
@node symmetric api
@section Programming interface


The following functions manage symmetric encryption and decryption.
@gcryptref{Working with cipher handles, Working with cipher handles}.


@defun gcry-cipher-open @var{algo} @var{mode}
@defunx gcry-cipher-open @var{algo} @var{mode} @var{flags}
Build and return a new handler for symmetric encryption and decryption,
an object of type @code{gcrypt-md-handle}.

@var{algo} must be an enumeration set of type
@code{enum-gcry-cipher-algo}; @var{mode} must be an enumeration set of
type @code{enum-gcry-cipher-mode}; the optional @var{flags} must be an
enumeration set of type @code{enum-gcry-cipher-flags}.
@end defun


@defun gcry-cipher-close @var{syhd}
Release all the resources associated to @var{syhd}.
@end defun


@defun gcry-cipher-setkey @var{syhd} @var{key}
@defunx gcry-cipher-setiv @var{syhd} @var{iv}
@defunx gcry-cipher-setctr @var{syhd} @var{ctr}
Set encryption keyword @var{key}, the initialisation vector @var{iv} or
the counter vector @var{ctr} in the context of @var{syhd}.  @var{key},
@var{iv} and @var{ctr} can be Scheme strings, Scheme bytevectors or
@class{memblock} objects.  @nauref{memory blocks, Memory blocks}.
@end defun


@defun gcry-cipher-reset @var{syhd}
Reset the state of @var{syhd}.
@end defun


@defun gcry-cipher-sync @var{syhd}
Perform the synchronisation on @var{syhd}, as defined by OpenPGP.
@end defun


@defun gcry-cipher-encrypt @var{syhd} @var{ou.ptr} @var{ou.len} @var{in.ptr} @var{in.len}
@defunx gcry-cipher-decrypt @var{syhd} @var{ou.ptr} @var{ou.len} @var{in.ptr} @var{in.len}
Encrypt or decrypt a block of memory in the context of @var{syhd}.
@end defun


@defun gcry-cipher-encrypt* @var{syhd} @var{obj}
@defunx gcry-cipher-decrypt* @var{syhd} @var{obj}
Encrypt or decrypt @var{obj} in the context of @var{syhd}; return a
bytevector representing the result.  @var{obj} can be a Scheme string, a
Scheme bytevector or a @class{memblock} object.  @nauref{memory blocks,
Memory blocks}.
@end defun


@defun gcry-cipher-ctl @var{syhd} @var{command} @var{buf.ptr} @var{buf.len}
Control the behaviour of @var{syhd}.
@end defun

@c page
@node mpi
@chapter Multiple precision integers


The functions documented in this chapter manage multiple precision
integer numbers (@mpi{}).  @gcryptref{MPI library, MPI library}.  The
@mpi{} @api{} is mostly exported and reexported ``as is'' by the
following libraries:

@example
(foreign crypto gcrypt)
(foreign crypto gcrypt primitives)
(foreign crypto gcrypt platform)
@end example

@noindent
with the @mpi{} numbers represented by raw pointer objects.  Only the
functions for number serialisation have versions with marshaling of
arguments.

@menu
* mpi intro::                   Introduction.
* mpi pred::                    Predicates.
* mpi format::                  String conversion.
@end menu

@c page
@node mpi intro
@section Introduction


Here we see some examples of @mpi{} usage for basic operations; the
examples give us some hint about how to manage resources allocation.
Every @mpi{} number must be allocated with @func{gcry-mpi-new} or
@func{gcry-mpi-snew} and released with @func{gcry-mpi-release}.

The following program will add two numbers, @math{100} and @math{50}:

@example
(import (rnrs)
  (foreign crypto gcrypt)
  (foreign crypto gcrypt compensated))

(with-compensations
  (let ((a (gcry-mpi-new/c 50))
        (b (gcry-mpi-new/c 50))
        (c (gcry-mpi-new/c 50)))
    (gcry-mpi-set-ui a 100)
    (gcry-mpi-set-ui b 50)
    (gcry-mpi-add c a b)))
@end example

@noindent
notice that there is no way to convert an @mpi{} number to a string in
human readable form; the only way to make a number readable is to use
@func{gcry-mpi->uint}, which will return an exact integer in the range
allowed by the @code{unsigned int} C language type of the underlying
platform.

@c page
@node mpi pred
@section Predicates


@defun gcry-mpi=? @var{n} ...
Return @true{} if all the arguments are pointers to @mpi{} numbers and
the numbers are equal; if the arguments to not reference @mpi{} numbers,
the behaviour is undefined.

When there is only one argument, the return value is @true{}.  When
there are no arguments, the return value is @false{}.
@end defun


@defun gcry-mpi<? @var{n} ...
Return @true{} if all the arguments are pointers to @mpi{} numbers and
the numbers are sorted in strict increasing order; if the arguments to
not reference @mpi{} numbers, the behaviour is undefined.

When there is only one argument, the return value is @true{}.  When
there are no arguments, the return value is @false{}.
@end defun


@defun gcry-mpi<=? @var{n} ...
Return @true{} if all the arguments are pointers to @mpi{} numbers and
the numbers are sorted in non--strict increasing order; if the arguments
to not reference @mpi{} numbers, the behaviour is undefined.

When there is only one argument, the return value is @true{}.  When
there are no arguments, the return value is @false{}.
@end defun


@defun gcry-mpi>? @var{n} ...
Return @true{} if all the arguments are pointers to @mpi{} numbers and
the numbers are sorted in strict decreasing order; if the arguments to
not reference @mpi{} numbers, the behaviour is undefined.

When there is only one argument, the return value is @true{}.  When
there are no arguments, the return value is @false{}.
@end defun


@defun gcry-mpi>=? @var{n} ...
Return @true{} if all the arguments are pointers to @mpi{} numbers and
the numbers are sorted in non--strict decreasing order; if the arguments
to not reference @mpi{} numbers, the behaviour is undefined.

When there is only one argument, the return value is @true{}.  When
there are no arguments, the return value is @false{}.
@end defun

@c page
@node mpi format
@section String conversion


@deftp {Enumeration Type} enum-gcry-mpi-format
Used to select a string format for @mpi{} conversion.  It enumerates the
following symbols:

@example
std  pgp  ssh  hex  usg
@end example
@end deftp


@deffn Syntax gcry-mpi-format @ameta{symbol}
Expand to an enumeration set of type @code{enum-gcry-mpi-format} holding
the symbol @meta{symbol}.
@end deffn


@defun gcry-mpi-format->value @var{set}
@defunx value->gcry-mpi-format @var{integer}
Convert to and from an enumeration set of type @code{enum-gcry-mpi-format}
holding a single element and the corresponding constant recognised by
Gcrypt.
@end defun


In the following descriptions, the argument @var{fmt} must be an
enumeration set of type @code{enum-gcry-mpi-format} holding a single
argument.


@defun gcry-mpi-scan @var{obj} @var{fmt}
Convert @var{obj} to an @mpi{} number according to @var{fmt} and return
the number.  @var{obj} can be a Scheme string, a Scheme bytevector or a
@class{memblock} object.
@end defun


@defun gcry-mpi-print @var{mpi} @var{fmt}
Convert the number @var{mpi} to an external representation according to
@var{fmt} and return the number.  When the format is @code{hex} the
return value is a Scheme string, else it is a Scheme bytevector.
@end defun


@defun gcry-mpi->uint @var{mpi}
Convert the number @var{mpi} to an unsigned exact integer; return the
integer.
@end defun

@c page
@node sexps
@chapter S--expressions


The functions documented in this chapter manage allocation and
processing of Gcrypt S--expressions.  @gcryptref{S-expressions,
S--expressions}.

Gcrypt sexps @api{} is not much user friendly towards high--level
languages using a foreign functions interface; for this reason, the
@api{} documented here focuses on using Scheme strings as input for
sexps constructors and raw pointers objects as references to sexps.  All
the functions not documented in this chapter are reexported ``as is'' by
the high--level libraries.

@menu
* sexps intro::                 Introduction.
* sexps enums::                 Enumeration types.
* sexps string::                Converting sexps to and from strings.
* sexps list::                  Converting sexps to lists.
@end menu

@c page
@node sexps intro
@section Introduction


Gcrypt's sexps format is based on Ron Rivest's work; basically, we can
think of a sexps as a string of characters with nested, matched,
parentheses and strings prefixed with their own length:

@example
(4:ciao)
@end example

@noindent
@code{4} is the number of characters in @code{ciao} and the @code{:}
character acts as separator.  In the canonical format white spaces are
@strong{not} used as separator; the following example is a sexp holding
two elements, the strings @code{ciao} and @code{hello}:

@example
(4:ciao5:hello)
@end example

@mpi{} numbers are embedded in sexps in their serialised formats.

@c page
@node sexps enums
@section Enumeration types


The following bindings are exported by the @library{foreign crypto
gcrypt enumerations} library and reexported by the @library{foreign
crypto gcrypt} library.


@deftp {Enumeration Type} enum-gcry-sexp-format
Used to select a sexp serialisation format.  It enumerates the following
symbols:

@example
default  canon  base64  advanced
@end example
@end deftp


@deffn Syntax gcry-sexp-format @ameta{symbol}
Expand to an enumeration set of type @code{enum-gcry-sexp-format}
holding the symbol @meta{symbol}.
@end deffn


@defun gcry-sexp-format->value @var{set}
@defunx value->gcry-sexp-format @var{integer}
Convert to and from an enumeration set of type
@code{enum-gcry-sexp-format} holding a single element and the
corresponding constant recognised by Gcrypt.
@end defun

@c page
@node sexps string
@section Converting sexps to and from strings


@defun string->gcry-sexp @var{str}
Build a new sexp from its string representation in @var{str}, a Scheme
string.  Return a pointer object referencing the sexp; the sexp must be
released with a call to @func{gcry-sexp-release}.
@end defun


@defun gcry-sexp->string @var{sexp}
@defunx gcry-sexp->string @var{sexp} @var{fmt}
Convert a sexp referenced by the pointer @var{sexp} to its string
representation in the format @var{fmt}, which must be an enumeration set
of type @code{enum-gcry-sexp-format}.  When @var{fmt} is not used, the
format is set to @code{default}.  Return a Scheme string.
@end defun


@defun gcry-sexp-find-token/str @var{sexp} @var{tag}
Search the sexp referenced by the pointer object @var{sexp} for the
first occurrence of the element whose tag is @var{tag}, a Scheme string
or symbol, and return a pointer object referencing a new sexp holding
that element.

The new sexp must be released with a call to @func{gcry-sexp-release}.
@end defun


Usage examples:

@example
(define str "(a (b (c)))")

(gcry-sexp->string (string->gcry-sexp str)
                   (gcry-sexp-format canon))
@result{} "(1:a(1:b(1:c)))"
@end example

@c page
@node sexps list
@section Converting sexps to lists


Partial support to convert Scheme lists into Gcrypt sexps is
implemented.


@defun list->gcry-sexp @var{ell}
Convert the list @var{ell} to a sexp.  Valid elements of the list are:
sublists, Scheme symbols, non--negative exact integers, pointers to
@mpi{} numbers.
@end defun


@c page
@node pubkey
@chapter Public key cryptography


The functions documented in this chapter manage encryption and
decryption for streams of bytes using public key algorithms.
@gcryptref{Public Key cryptography, Public Key cryptography}.

@menu
* pubkey intro::                Introduction.
* pubkey api::                  Programming interface.
@end menu

@c page
@node pubkey intro
@section Introduction


Here is an example which does: key pair generation, @mpi{} number
encryption and decryption, @mpi{} number signature and verification.
The @mpi{} number is @math{456} and its hexadecimal representation is
@code{1c8}.

@example
(import (rnrs)
  (compensations)
  (foreign crypto gcrypt)
  (foreign crypto gcrypt compensated))

(with-compensations
  (define data
    `(data
      (flags raw)
      (value ,(let ((n (gcry-mpi-new/c 50)))
                (gcry-mpi-set-ui n 456)
                n))))

  (define key-pair
    (gcry-pk-genkey/c '(genkey
                        (rsa (nbits 1024)))))

  (define pub-key
    (gcry-sexp-find-token/str/c key-pair 'public-key))

  (define pri-key
    (gcry-sexp-find-token/str/c key-pair 'private-key))

  (define signature
    (gcry-pk-sign/c data pri-key))

  (define encrypted-data
    (gcry-pk-encrypt/c data pub-key))

  (define decrypted-data
    (gcry-pk-decrypt/c encrypted-data pri-key))

  (gcry-sexp->string decrypted-data
                     (gcry-sexp-format canon))
  @result{} "4:01c8"

  (gcry-pk-verify signature data pub-key)
  @result{} #t

  )
@end example

@c page
@node pubkey api
@section Programming interface


In the following descriptions, the Gcrypt sexp parameters can be:
pointer objects to foreign sexp values, Scheme strings, Scheme lists; in
the latter tow cases they are converted to Gcrypt internal sexp
structures.


@defun gcry-pk-genkey @var{parameters}
Generate a new key pair using the @var{parameters}, a Gcrypt sexp, and
return a sexp describing the pair.
@end defun


@defun gcry-pk-encrypt @var{data} @var{public-key}
Encrypt @var{data}, a Gcrypt sexp, using @var{public-key}, a Gcrypt
sexp, and return a Gcrypt sexp representing the encrypted data.
@end defun


@defun gcry-pk-decrypt @var{data} @var{private-key}
Decrypt @var{data}, a Gcrypt sexp, using @var{private-key}, a Gcrypt
sexp, and return a Gcrypt sexp representing the decrypted data.
@end defun


@defun gcry-pk-sign @var{data} @var{private-key}
Sign @var{data}, a Gcrypt sexp, using @var{private-key}, a Gcrypt sexp,
and return a Gcrypt sexp representing the signature data.
@end defun


@defun gcry-pk-verify @var{signature} @var{data} @var{public-key}
Verify that @var{signature}, a Gcrypt sexp, is a valid signature for
@var{data}, a Gcrypt sexp, according to @var{public-key}, a Gcrypt sexp.
Return @true{} if the signature is valid, @false{} otherwise.
@end defun

@c page
@node random
@chapter Pseudo--random numbers generation


The functions documented in this chapter manage generation of
pseudo--random numbers.  @gcryptref{Random Numbers, Random Numbers}.

@menu
* random quality::              Selecting pseudo--random numbers
                                quality.
* random api::                  Programming interface.
@end menu

@c page
@node random quality
@section Selecting pseudo--random numbers quality


The following bingdings are exported by the @library{foreign crypto
gcrypt enumerations} library and reexported by the @library{foreign
crypto gcrypt} library.


@deftp {Enumeration Type} enum-gcry-random-quality
Used to select the quality of generated pseudo--random numbers.  It
enumerates the following symbols:

@example
weak  strong  very-strong
@end example
@end deftp


@deffn Syntax gcry-random-quality @ameta{symbol}
Expand to an enumeration set of type @code{enum-gcry-random-quality}
holding the symbol @meta{symbol}.
@end deffn


@defun gcry-random-quality->value @var{set}
@defunx value->gcry-random-quality @var{integer}
Convert to and from an enumeration set of type
@code{enum-gcry-random-quality} holding a single element and the
corresponding constant recognised by Gcrypt.
@end defun

@c page
@node random api
@section Programming interface


In the following descriptions, unless otherwise specified, the argument
@var{quality} is an enumeration set of type
@code{enum-gcry-random-quality} holding a single element.


@defun gcry-randomize @var{mb} @var{quality}
Fill the memory referenced by the @class{memblock} object @var{mb} with
random bytes of @var{quality}.
@end defun


@defun gcry-random-add-bytes @var{mb}
@defunx gcry-random-add-bytes @var{mb} @var{quality}
Add the bytes in memory referenced by the @class{memblock} object
@var{mb} to the random pool; the numbers are meant to be of
@var{quality}, which can be @false{} or omitted if the quality is
unknown.
@end defun


@defun gcry-random-bytes @var{nbytes} @var{quality}
Return a new @class{memblock} object referencing a newly allocated
memory block holding @var{nbytes} pseudo--random bytes of @var{quality}.
@end defun


@defun gcry-random-bytes-secure @var{nbytes} @var{quality}
@defunx gcry-random-bytes/secure @var{nbytes} @var{quality}
Return a new @class{memblock} object referencing a newly allocated
memory block holding @var{nbytes} pseudo--random bytes of
@var{quality}.  The memory is allocated in a ``secure'' area.
@end defun


@defun gcry-create-nonce @var{mb}
Fill the memory referenced by the @class{memblock} object @var{mb} with
random bytes.
@end defun


@c page
@node compensations
@chapter Compensated constructors


The following bindings are exported by the @library{foreign crypto
gcrypt compensated} library.


@subsubheading Symmetric cryptography


@defun gcry-cipher-open/c @var{arg} ...
Like @func{gcry-cipher-open}, but push the appropriate call to
@func{gcry-cipher-close} to the current compensation stack.
@end defun

@c ------------------------------------------------------------

@subsubheading Message digests

@defun gcry-md-open/c @var{arg} ...
Like @func{gcry-md-open}, but push the appropriate call to
@func{gcry-md-close} to the current compensation stack.
@end defun


@defun gcry-md-copy/c @var{arg}
Like @func{gcry-md-copy}, but push the appropriate call to
@func{gcry-md-close} to the current compensation stack.
@end defun

@c ------------------------------------------------------------

@subsubheading Multiprecision integers

@defun gcry-mpi-new/c @var{arg}
Like @func{gcry-mpi-new}, but push the appropriate call to
@func{gcry-mpi-release} to the current compensation stack.
@end defun


@defun gcry-mpi-snew/c @var{arg}
Like @func{gcry-mpi-snew}, but push the appropriate call to
@func{gcry-mpi-release} to the current compensation stack.
@end defun


@defun gcry-mpi-copy/c @var{arg}
Like @func{gcry-mpi-copy}, but push the appropriate call to
@func{gcry-mpi-release} to the current compensation stack.
@end defun

@c ------------------------------------------------------------

@subsubheading S--expressions

@defun string->gcry-sexp/c @var{arg}
Like @func{string->gcry-sexp}, but push the appropriate call to
@func{gcry-sexp-release} to the current compensation stack.
@end defun


@defun list->gcry-sexp/c @var{arg}
Like @func{list->gcry-sexp}, but push the appropriate call to
@func{gcry-sexp-release} to the current compensation stack.
@end defun

@defun gcry-sexp-find-token/str/c @var{arg} ...
Like @func{gcry-sexp-find-token/str}, but push the appropriate call to
@func{gcry-sexp-release} to the current compensation stack.
@end defun

@c ------------------------------------------------------------

@subsubheading Public key encryption


@defun gcry-pk-genkey/c @var{arg} ...
Like @func{gcry-pk-genkey} push the appropriate call to
@func{gcry-sexp-release} to the current compensation stack to free the
key pair sexp.
@end defun


@defun gcry-pk-encrypt/c @var{arg} ...
Like @func{gcry-pk-encrypt} push the appropriate call to
@func{gcry-sexp-release} to the current compensation stack to free the
encrypted data sexp.
@end defun


@defun gcry-pk-decrypt/c @var{arg} ...
Like @func{gcry-pk-decrypt} push the appropriate call to
@func{gcry-sexp-release} to the current compensation stack to free the
decrypted data sexp.
@end defun


@defun gcry-pk-sign/c @var{arg} ...
Like @func{gcry-pk-sign} push the appropriate call to
@func{gcry-sexp-release} to the current compensation stack to free the
signature sexp.
@end defun

@c page

@include gpl-3.0.texiinc
@include fdl-1.3.texiinc

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
