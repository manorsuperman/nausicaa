\input texinfo.tex
@c %**start of header
@setfilename nausicaa-gcrypt.info
@settitle Libgcrypt for Nausicaa
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@macro condition{NAME}
@code{&\NAME\}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro sql{}
@acronym{SQL}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@macro axml{}
@acronym{XML}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro ssh{}
@acronym{SSH}
@end macro

@macro ssl{}
@acronym{SSL}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro tls{}
@acronym{TLS}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@macro gcryptref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,gcrypt}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Libgcrypt for Nausicaa

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/Gcrypt

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-gcrypt

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2009

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides a binding to the Libgcrypt C language library.  It is built
upon Nausicaa/Scheme, making use of its foreign--functions interface.

Libgcrypt is a general purpose library of cryptographic building blocks.
It is originally based on code used by GnuPG.  It does not provide any
implementation of OpenPGP or other protocols.  Thorough understanding of
applied cryptography is required to use Libgcrypt.

The libraries support Ikarus, Mosh and Ypsilon Scheme; the package
supports @gnu{}+Linux systems.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/nausicaa/downloads}

@noindent
the project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/tree/master}

@noindent
Libgcrypt is available at:

@center @url{http://www.gnupg.org/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-gcrypt: (nausicaa-gcrypt).   Libgcrypt for Nausicaa.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* init::                        Initialisation and control.
* typedefs::                    Type definitions.
* error::                       Error handling.
* symmetric::                   Symmetric cryptography.
* compensations::               Compensated constructors.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

@detailmenu
 --- The Detailed Node Listing ---

Type definitions

* typedefs handle::             Symmetric cryptography handle.

Error handling

* error codes::                 Handling error codes.
* error conditions::            Condition objects.

Condition objects

* error conditions gpg-error::  GPG-error error conditions.

Symmetric cryptography

* symmetric intro::             Introduction to symmetric cryptography.
* symmetric enums::             Enumeration types.
* symmetric api::               Programming interface.

Enumeration types

* symmetric enums algo::        Symmetric cipher algorithms.
* symmetric enums mode::        Symmetric cipher modes.

@end detailmenu
@end menu

@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides a binding to the Libgcrypt C language library.  It is built
upon Nausicaa/Scheme, making use of its foreign--functions interface.

Libgcrypt is a general purpose library of cryptographic building blocks.
It is originally based on code used by GnuPG.  It does not provide any
implementation of OpenPGP or other protocols.  Thorough understanding of
applied cryptography is required to use Libgcrypt.

The libraries support Ikarus, Mosh and Ypsilon Scheme; the package
supports @gnu{}+Linux systems.

The installed libraries are:

@table @library
@item foreign crypto gcrypt shared-object
@itemx foreign crypto gpg-error shared-object
Each library exports a single binding, @code{gcrypt-shared-object} and
@code{gpg-error-shared-object}, which references the foreign shared
library.

@item foreign crypto gcrypt sizeof
@itemx foreign crypto gpg-error sizeof
Export bindings to constant values and data structures accessors.

@item foreign crypto gpg-error conditions
Defines condition types for errors raised by Gcrypt.

@item foreign crypto gcrypt enumerations
Defines enumeration types used to handle Gcrypt options and flags.

@item foreign crypto gcrypt platform
@itemx foreign crypto gpg-error platform
Export one binding for each foreign function; the Scheme functions have
the same name of the C functions, so @cfunc{gcry_check_version} is
available as @func{gcry_check_version}.  This library makes the original
Libgcrypt documentation relevant for this package.  @gcryptref{Top, The
Libgcrypt library}.

@item foreign crypto gcrypt primitives
@itemx foreign crypto gpg-error primitives
Export one binding for each foreign function, implementing marshaling of
arguments and return values.  The Scheme functions have the same name of
the C functions, but with the underscores converted to dashes; so
@cfunc{gcry_check_version} is available as @func{gcry-check-version}.

All the Gcrypt functions are prefixed with @code{gcry-}, while the
GPG-error functions are prefixed with @code{gpg-}.

This documentation file describes the @api{} exported by this library;
only functions implementing marshaling of values are described.

@item foreign crypto gcrypt
@itemx foreign crypto gpg-error
Compound librarie exporting the high--level @api{}; they reexport
bindings from the @samp{primitives} libraries and the constant values
from the @samp{sizeof} libraries.  Additionally the @code{gpg-error}
library reexports bindings for the condition objects.

@item foreign crypto gcrypt compensated
Exports bindings to constructor functions making use of the
@library{compensations} library from Nausicaa/Scheme.
@nauref{compensations, Compensation stacks}.
@end table

@c page
@node init
@chapter Initialisation and control


The following functions manage library initialisation and configuration.
@gcryptref{Initializing the library, Initializing the library}.


@defun gcry-check-version
Initialise the library and check its version number.  If successful:
return a Scheme string representing the foreign library's version
number; if an error occurs: return @false{}.
@end defun


@defun gcry-control/int @var{cmd} @var{int-value}
@defunx gcry-control/uint @var{cmd} @var{unsigned-int-value}
@defunx gcry-control/ptr @var{cmd} @var{pointer-value}
Specialisations of the variadic function @cfunc{gcry_control} accepting
an integer, an unsigned integer or a pointer value.  Notice that when
the command @var{cmd} requires no argument, we can use
@func{gcry-control/int} with @var{int-value} set to zero.

The return value is always an integer; @strong{no} error detection is
performed by @library{foreign gcrypt primitives}.
@end defun

@c page
@node typedefs
@chapter Type definitions


Unless otherwise specified, the bindings documented in this chapter are
exported by the @library{foreign crypto gcrypt typedefs} library and
reexported by the @library{foreign crypto gcrypt} library.

@menu
* typedefs handle::             Symmetric cryptography handle.
@end menu

@c page
@node typedefs handle
@section Symmetric cryptography handle


Functions from the primitives and high--level @api{} accept objects of
type @code{gcrypt-symmetric-handle} as @var{syhd} arguments.  Functions
from the platform libraries accept raw pointers as references to
symmetric cryptography handles.


@deftp {Object Type} gcrypt-symmetric-handle
Reference to a Gcrypt symmetric cryptography handle.  It is disjoint
from all the other Scheme object types.
@end deftp


@defun gcrypt-symmetric-handle? @var{obj}
Return @true{} if @var{obj} is of type @code{gcrypt-symmetric-handle}.
@end defun


@defun pointer->gcrypt-symmetric-handle @var{pointer}
@defunx gcrypt-symmetric-handle->pointer @var{syhd}
Convert between a raw pointer object and a
@code{gcrypt-symmetric-handle} object.
@end defun

@c page
@node error
@chapter Error handling


Unless otherwise specified, all the functions from the @code{primitives}
libraries raise an exception in case of error.

@menu
* error codes::                 Handling error codes.
* error conditions::            Condition objects.
@end menu

@c page
@node error codes
@section Handling error codes


@defun gcry-strerror @var{code}
@defunx gpg-strerror @var{code}
@defunx gpg-strerror-r @var{code}
Return a Scheme string describing the error @var{code}.
@end defun


@defun gcry-strsource @var{code}
@defunx gpg-strsource @var{code}
Return a Scheme string describing the error source specified by
@var{code}.
@end defun

@c page
@node error conditions
@section Condition objects


@menu
* error conditions gpg-error::  GPG-error error conditions.
@end menu

@c page
@node error conditions gpg-error
@subsection GPG-error error conditions


The following bindings are exported by the library @library{foreign
crypto gpg-error conditions} and reexported by the library
@library{foreign crypto gpg-error}.


@deftp {Condition Type} &gpg-error
Used to signal an error involving a Gcrypt function; it is derived from
@condition{error}.  It has the following fields:

@table @code
@item code
The error code.
@end table
@end deftp


@defun make-gpg-error-condition @var{errcode}
@defunx gpg-error-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{gpg-error}.
@end defun


@defun condition-gpg-error-code @var{condition}
Accessor for the field of condition objects of type
@condition{gpg-error}.
@end defun


@deffn Syntax raise-gpg-error @ameta{who} @ameta{errcode} @ameta{irritant} ...
Raise a non--continuable exception with compound condition object of
types: @condition{who}, @condition{message}, @condition{gpg-error},
@condition{irritants}.
@end deffn

@c page
@node symmetric
@chapter Symmetric cryptography


@menu
* symmetric intro::             Introduction to symmetric cryptography.
* symmetric enums::             Enumeration types.
* symmetric api::               Programming interface.
@end menu

@c page
@node symmetric intro
@section Introduction to symmetric cryptography


For an introduction to symmetric block and stream ciphers, see:

@center @url{http://en.wikipedia.org/wiki/Block_cipher}
@center @url{http://en.wikipedia.org/wiki/Stream_cipher}

@noindent
for an explanation of block cipher modes:

@center @url{http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation}

@c page
@node symmetric enums
@section Enumeration types


The bindings described in this section are exported by the
@library{foreign crypto gcrypt enumerations} library and reexported by
the @library{foreign crypto gcrypt} library.

@menu
* symmetric enums algo::        Symmetric cipher algorithms.
* symmetric enums mode::        Symmetric cipher modes.
@end menu

@c page
@node symmetric enums algo
@subsection Symmetric cipher algorithms


@deftp {Enumeration Type} enum-gcry-cipher-algo
Used to select symmetric cypher algorithms.  It enumerates the following
symbols:

@example
idea                         triple-des
cast5                        blowfish
safer-sk128                  des-sk
aes                          aes192
aes256                       twofish
arcfour                      des
twofish128                   serpent128
serpent192                   serpent256
rfc2268-40                   rfc2268-128
seed                         camellia128
camellia192                  camellia256
aes128                       rijndael
rijndael128                  rijndael192
rijndael256
@end example
@end deftp


@deffn Syntax gcry-cipher-algo @ameta{symbol}
Expand to an enumeration set of type @code{enum-gcry-cipher-algo}
holding the symbol @meta{symbol}.
@end deffn


@defun gcry-cipher-algo->value @var{set}
@defunx value->gcry-cipher-algo @var{integer}
Expand to and from an enumeration set of type
@code{enum-gcry-cipher-algo} holding a single element and the
corresponding constant recognised by Gcrypt.
@end defun

@c page
@node symmetric enums mode
@subsection Symmetric cipher modes


@deftp {Enumeration Type} enum-gcry-cipher-mode
Used to select symmetric cypher modes.  It enumerates the following
symbols:

@example
ecb cfb cbc stream ofb ctr
@end example
@end deftp


@deffn Syntax gcry-cipher-mode @ameta{symbol}
Expand to an enumeration set of type @code{enum-gcry-cipher-mode}
holding the symbol @meta{symbol}.
@end deffn


@defun gcry-cipher-mode->value @var{set}
@defunx value->gcry-cipher-mode @var{integer}
Expand to and from an enumeration set of type
@code{enum-gcry-cipher-mode} holding a single element and the
corresponding constant recognised by Gcrypt.
@end defun

@c page
@node symmetric api
@section Programming interface


The following functions manage symmetric encryption and decryption.
@gcryptref{Working with cipher handles, Working with cipher handles}.


@defun gcry-cipher-open @var{algo} @var{mode} @var{flags}
Build and return a new handler for symmetric encryption and decryption.
@var{algo} must be one of the @code{GCRY_CIPHER_*} constants; @var{mode}
must be one of the @code{GCRY_CIPHER_MODE_*} constants; @var{flags} must
be an inclusive OR combination of flags.
@end defun


@defun gcry-cipher-close @var{syhd}
Release all the resources associated to @var{syhd}.
@end defun


@defun gcry-cipher-setkey @var{syhd} @var{key}
@defunx gcry-cipher-setiv @var{syhd} @var{iv}
@defunx gcry-cipher-setctr @var{syhd} @var{ctr}
Set encryption keyword @var{key}, the initialisation vector @var{iv} or
the counter vector @var{ctr} in the context of @var{syhd}.  @var{key},
@var{iv} and @var{ctr} can be Scheme strings, Scheme bytevectors or
@class{memblock} objects.  @nauref{memory blocks, Memory blocks}.
@end defun


@defun gcry-cipher-reset @var{syhd}
Reset the state of @var{syhd}.
@end defun


@defun gcry-cipher-sync @var{syhd}
Perform the synchronisation on @var{syhd}, as defined by OpenPGP.
@end defun


@defun gcry-cipher-encrypt @var{syhd} @var{ou.ptr} @var{ou.len} @var{in.ptr} @var{in.len}
@defunx gcry-cipher-decrypt @var{syhd} @var{ou.ptr} @var{ou.len} @var{in.ptr} @var{in.len}
Encrypt or decrypt a block of memory in the context of @var{syhd}.
@end defun


@defun gcry-cipher-encrypt* @var{syhd} @var{obj}
@defunx gcry-cipher-decrypt* @var{syhd} @var{obj}
Encrypt or decrypt @var{obj} in the context of @var{syhd}; return a
bytevector representing the result.  @var{obj} can be a Scheme string, a
Scheme bytevector or a @class{memblock} object.  @nauref{memory blocks,
Memory blocks}.
@end defun


@defun gcry-cipher-ctl @var{syhd} @var{command} @var{buf.ptr} @var{buf.len}
Control the behaviour of @var{syhd}.
@end defun

@c page
@node compensations
@chapter Compensated constructors


The following bindings are exported by the @library{foreign crypto
gcrypt compensated} library.


@defun gcry-cipher-open/c @var{arg} ...
Like @func{gcry-cipher-open}, but push the appropriated call to
@func{gcry-cipher-close} to the current compensation stack.
@end defun

@c page

@include gpl-3.0.texiinc
@include fdl-1.3.texiinc

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
