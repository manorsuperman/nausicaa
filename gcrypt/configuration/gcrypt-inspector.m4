dnl (foreign crypto gcrypt sizeof) --
dnl
dnl Part of: Nausicaa
dnl Contents: foreign library inspection generation
dnl Date: Sat Dec 26, 2009
dnl
dnl Abstract
dnl
dnl
dnl
dnl Copyright (c) 2009 Marco Maggi <marco.maggi-ipsu@poste.it>
dnl
dnl This program is free software:  you can redistribute it and/or modify
dnl it under the terms of the  GNU General Public License as published by
dnl the Free Software Foundation, either version 3 of the License, or (at
dnl your option) any later version.
dnl
dnl This program is  distributed in the hope that it  will be useful, but
dnl WITHOUT  ANY   WARRANTY;  without   even  the  implied   warranty  of
dnl MERCHANTABILITY  or FITNESS FOR  A PARTICULAR  PURPOSE.  See  the GNU
dnl General Public License for more details.
dnl
dnl You should  have received  a copy of  the GNU General  Public License
dnl along with this program.  If not, see <http://www.gnu.org/licenses/>.
dnl


NAUSICAA_INSPECT_TYPE([GPG_ERROR_T],[gpg_error_t],[signed-int],[#f])
NAUSICAA_INSPECT_TYPE([GPG_ERR_CODE_T],[gpg_err_code_t],[signed-int],[#f])
NAUSICAA_INSPECT_TYPE([GPG_ERR_SOURCE_T],[gpg_err_source_t],[signed-int],[#f])

dnl Struct inspection: gcry_md_handle
NAUSICAA_INSPECT_STRUCT_TYPE([GCRY_MD_HANDLE],[struct gcry_md_handle],[#f])
NAUSICAA_INSPECT_FIELD_TYPE([GCRY_MD_HANDLE_CTX],[struct gcry_md_handle],[ctx],[pointer])
NAUSICAA_INSPECT_FIELD_TYPE([GCRY_MD_HANDLE_BUFPOS],[struct gcry_md_handle],[bufpos],[signed-int])
NAUSICAA_INSPECT_FIELD_TYPE([GCRY_MD_HANDLE_BUFSIZE],[struct gcry_md_handle],[bufsize],[signed-int])
NAUSICAA_INSPECT_FIELD_TYPE_POINTER([GCRY_MD_HANDLE_BUF],[struct gcry_md_handle],[buf])

dnl Preprocessor symbols: global constants
NAUSICAA_DEFINE_VALUE([GPG_ERR_SOURCE_GCRYPT])
NAUSICAA_DEFINE_VALUE([GCRY_THREAD_OPTION_VERSION])

dnl String preprocessor symbols: global string constants
NAUSICAA_STRING_TEST([GCRYPT_VERSION],[GCRYPT_VERSION])

dnl Preprocessor symbols: the thread model to use
NAUSICAA_DEFINE_VALUE([GCRY_THREAD_OPTION_DEFAULT])
NAUSICAA_DEFINE_VALUE([GCRY_THREAD_OPTION_USER])
NAUSICAA_DEFINE_VALUE([GCRY_THREAD_OPTION_PTH])
NAUSICAA_DEFINE_VALUE([GCRY_THREAD_OPTION_PTHREAD])
NAUSICAA_INSPECT_TYPE([GCRY_CTL_CMDS],[enum gcry_ctl_cmds],[signed-int],[#f])

dnl enum gcry_ctl_cmds
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_KEY])
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_IV])
NAUSICAA_ENUM_VALUE([GCRYCTL_CFB_SYNC])
NAUSICAA_ENUM_VALUE([GCRYCTL_RESET])
NAUSICAA_ENUM_VALUE([GCRYCTL_FINALIZE])
NAUSICAA_ENUM_VALUE([GCRYCTL_GET_KEYLEN])
NAUSICAA_ENUM_VALUE([GCRYCTL_GET_BLKLEN])
NAUSICAA_ENUM_VALUE([GCRYCTL_TEST_ALGO])
NAUSICAA_ENUM_VALUE([GCRYCTL_IS_SECURE])
NAUSICAA_ENUM_VALUE([GCRYCTL_GET_ASNOID])
NAUSICAA_ENUM_VALUE([GCRYCTL_ENABLE_ALGO])
NAUSICAA_ENUM_VALUE([GCRYCTL_DISABLE_ALGO])
NAUSICAA_ENUM_VALUE([GCRYCTL_DUMP_RANDOM_STATS])
NAUSICAA_ENUM_VALUE([GCRYCTL_DUMP_SECMEM_STATS])
NAUSICAA_ENUM_VALUE([GCRYCTL_GET_ALGO_NPKEY])
NAUSICAA_ENUM_VALUE([GCRYCTL_GET_ALGO_NSKEY])
NAUSICAA_ENUM_VALUE([GCRYCTL_GET_ALGO_NSIGN])
NAUSICAA_ENUM_VALUE([GCRYCTL_GET_ALGO_NENCR])
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_VERBOSITY])
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_DEBUG_FLAGS])
NAUSICAA_ENUM_VALUE([GCRYCTL_CLEAR_DEBUG_FLAGS])
NAUSICAA_ENUM_VALUE([GCRYCTL_USE_SECURE_RNDPOOL])
NAUSICAA_ENUM_VALUE([GCRYCTL_DUMP_MEMORY_STATS])
NAUSICAA_ENUM_VALUE([GCRYCTL_INIT_SECMEM])
NAUSICAA_ENUM_VALUE([GCRYCTL_TERM_SECMEM])
NAUSICAA_ENUM_VALUE([GCRYCTL_DISABLE_SECMEM_WARN])
NAUSICAA_ENUM_VALUE([GCRYCTL_SUSPEND_SECMEM_WARN])
NAUSICAA_ENUM_VALUE([GCRYCTL_RESUME_SECMEM_WARN])
NAUSICAA_ENUM_VALUE([GCRYCTL_DROP_PRIVS])
NAUSICAA_ENUM_VALUE([GCRYCTL_ENABLE_M_GUARD])
NAUSICAA_ENUM_VALUE([GCRYCTL_START_DUMP])
NAUSICAA_ENUM_VALUE([GCRYCTL_STOP_DUMP])
NAUSICAA_ENUM_VALUE([GCRYCTL_GET_ALGO_USAGE])
NAUSICAA_ENUM_VALUE([GCRYCTL_IS_ALGO_ENABLED])
NAUSICAA_ENUM_VALUE([GCRYCTL_DISABLE_INTERNAL_LOCKING])
NAUSICAA_ENUM_VALUE([GCRYCTL_DISABLE_SECMEM])
NAUSICAA_ENUM_VALUE([GCRYCTL_INITIALIZATION_FINISHED])
NAUSICAA_ENUM_VALUE([GCRYCTL_INITIALIZATION_FINISHED_P])
NAUSICAA_ENUM_VALUE([GCRYCTL_ANY_INITIALIZATION_P])
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_CBC_CTS])
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_CBC_MAC])
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_CTR])
NAUSICAA_ENUM_VALUE([GCRYCTL_ENABLE_QUICK_RANDOM])
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_RANDOM_SEED_FILE])
NAUSICAA_ENUM_VALUE([GCRYCTL_UPDATE_RANDOM_SEED_FILE])
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_THREAD_CBS])
NAUSICAA_ENUM_VALUE([GCRYCTL_FAST_POLL])
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_RANDOM_DAEMON_SOCKET])
NAUSICAA_ENUM_VALUE([GCRYCTL_USE_RANDOM_DAEMON])
NAUSICAA_ENUM_VALUE([GCRYCTL_FAKED_RANDOM_P])
NAUSICAA_ENUM_VALUE([GCRYCTL_SET_RNDEGD_SOCKET])
NAUSICAA_ENUM_VALUE([GCRYCTL_PRINT_CONFIG])
NAUSICAA_ENUM_VALUE([GCRYCTL_OPERATIONAL_P])
NAUSICAA_ENUM_VALUE([GCRYCTL_FIPS_MODE_P])
NAUSICAA_ENUM_VALUE([GCRYCTL_FORCE_FIPS_MODE])
NAUSICAA_ENUM_VALUE([GCRYCTL_SELFTEST])
NAUSICAA_INSPECT_TYPE([GCRY_SEXP_FORMAT],[enum gcry_sexp_format],[signed-int],[#f])

dnl enum gcry_sexp_format
NAUSICAA_ENUM_VALUE([GCRYSEXP_FMT_DEFAULT])
NAUSICAA_ENUM_VALUE([GCRYSEXP_FMT_CANON])
NAUSICAA_ENUM_VALUE([GCRYSEXP_FMT_BASE64])
NAUSICAA_ENUM_VALUE([GCRYSEXP_FMT_ADVANCED])
NAUSICAA_INSPECT_TYPE([GCRY_MPI_FORMAT],[enum gcry_mpi_format],[signed-int],[#f])

dnl enum gcry_mpi_format
NAUSICAA_ENUM_VALUE([GCRYMPI_FMT_NONE])
NAUSICAA_ENUM_VALUE([GCRYMPI_FMT_STD])
NAUSICAA_ENUM_VALUE([GCRYMPI_FMT_PGP])
NAUSICAA_ENUM_VALUE([GCRYMPI_FMT_SSH])
NAUSICAA_ENUM_VALUE([GCRYMPI_FMT_HEX])
NAUSICAA_ENUM_VALUE([GCRYMPI_FMT_USG])
NAUSICAA_INSPECT_TYPE([GCRY_MPI_FLAG],[enum gcry_mpi_flag],[signed-int],[#f])

dnl enum gcry_mpi_flag
NAUSICAA_ENUM_VALUE([GCRYMPI_FLAG_SECURE])
NAUSICAA_ENUM_VALUE([GCRYMPI_FLAG_OPAQUE])
NAUSICAA_INSPECT_TYPE([GCRY_CIPHER_ALGOS],[enum gcry_cipher_algos],[signed-int],[#f])

dnl enum gcry_cipher_algos
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_NONE])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_IDEA])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_3DES])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_CAST5])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_BLOWFISH])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_SAFER_SK128])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_DES_SK])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_AES])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_AES192])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_AES256])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_TWOFISH])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_ARCFOUR])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_DES])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_TWOFISH128])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_SERPENT128])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_SERPENT192])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_SERPENT256])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_RFC2268_40])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_RFC2268_128])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_SEED])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_CAMELLIA128])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_CAMELLIA192])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_CAMELLIA256])

dnl Preprocessor symbols: the Rijndael algorithm is basically AES, so provide some macros
NAUSICAA_DEFINE_VALUE([GCRY_CIPHER_AES128])
NAUSICAA_DEFINE_VALUE([GCRY_CIPHER_RIJNDAEL])
NAUSICAA_DEFINE_VALUE([GCRY_CIPHER_RIJNDAEL128])
NAUSICAA_DEFINE_VALUE([GCRY_CIPHER_RIJNDAEL192])
NAUSICAA_DEFINE_VALUE([GCRY_CIPHER_RIJNDAEL256])
NAUSICAA_INSPECT_TYPE([GCRY_CIPHER_MODES],[enum gcry_cipher_modes],[signed-int],[#f])

dnl enum gcry_cipher_modes
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_MODE_NONE])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_MODE_ECB])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_MODE_CFB])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_MODE_CBC])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_MODE_STREAM])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_MODE_OFB])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_MODE_CTR])
NAUSICAA_INSPECT_TYPE([GCRY_CIPHER_FLAGS],[enum gcry_cipher_flags],[signed-int],[#f])

dnl enum gcry_cipher_flags
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_SECURE])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_ENABLE_SYNC])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_CBC_CTS])
NAUSICAA_ENUM_VALUE([GCRY_CIPHER_CBC_MAC])
NAUSICAA_INSPECT_TYPE([GCRY_PK_ALGOS],[enum gcry_pk_algos],[signed-int],[#f])

dnl enum gcry_pk_algos
NAUSICAA_ENUM_VALUE([GCRY_PK_RSA])
NAUSICAA_ENUM_VALUE([GCRY_PK_RSA_E])
NAUSICAA_ENUM_VALUE([GCRY_PK_RSA_S])
NAUSICAA_ENUM_VALUE([GCRY_PK_ELG_E])
NAUSICAA_ENUM_VALUE([GCRY_PK_DSA])
NAUSICAA_ENUM_VALUE([GCRY_PK_ELG])
NAUSICAA_ENUM_VALUE([GCRY_PK_ECDSA])

dnl Preprocessor symbols: flags describing usage capabilities of a PK algorithm
NAUSICAA_DEFINE_VALUE([GCRY_PK_USAGE_SIGN])
NAUSICAA_DEFINE_VALUE([GCRY_PK_USAGE_ENCR])
NAUSICAA_DEFINE_VALUE([GCRY_PK_USAGE_CERT])
NAUSICAA_DEFINE_VALUE([GCRY_PK_USAGE_AUTH])
NAUSICAA_DEFINE_VALUE([GCRY_PK_USAGE_UNKN])
NAUSICAA_INSPECT_TYPE([GCRY_MD_ALGOS],[enum gcry_md_algos],[signed-int],[#f])

dnl enum gcry_md_algos
NAUSICAA_ENUM_VALUE([GCRY_MD_NONE])
NAUSICAA_ENUM_VALUE([GCRY_MD_MD5])
NAUSICAA_ENUM_VALUE([GCRY_MD_SHA1])
NAUSICAA_ENUM_VALUE([GCRY_MD_RMD160])
NAUSICAA_ENUM_VALUE([GCRY_MD_MD2])
NAUSICAA_ENUM_VALUE([GCRY_MD_TIGER])
NAUSICAA_ENUM_VALUE([GCRY_MD_HAVAL])
NAUSICAA_ENUM_VALUE([GCRY_MD_SHA256])
NAUSICAA_ENUM_VALUE([GCRY_MD_SHA384])
NAUSICAA_ENUM_VALUE([GCRY_MD_SHA512])
NAUSICAA_ENUM_VALUE([GCRY_MD_SHA224])
NAUSICAA_ENUM_VALUE([GCRY_MD_MD4])
NAUSICAA_ENUM_VALUE([GCRY_MD_CRC32])
NAUSICAA_ENUM_VALUE([GCRY_MD_CRC32_RFC1510])
NAUSICAA_ENUM_VALUE([GCRY_MD_CRC24_RFC2440])
NAUSICAA_ENUM_VALUE([GCRY_MD_WHIRLPOOL])
NAUSICAA_INSPECT_TYPE([GCRY_MD_FLAGS],[enum gcry_md_flags],[signed-int],[#f])

dnl enum gcry_md_flags
NAUSICAA_ENUM_VALUE([GCRY_MD_FLAG_SECURE])
NAUSICAA_ENUM_VALUE([GCRY_MD_FLAG_HMAC])
NAUSICAA_INSPECT_TYPE([GCRY_RANDOM_LEVEL_T],[enum gcry_random_level],[signed-int],[#f])

dnl enum gcry_random_level_t
NAUSICAA_ENUM_VALUE([GCRY_WEAK_RANDOM])
NAUSICAA_ENUM_VALUE([GCRY_STRONG_RANDOM])
NAUSICAA_ENUM_VALUE([GCRY_VERY_STRONG_RANDOM])

dnl Preprocessor symbols: mode values passed to a gcry_prime_check_func_t
NAUSICAA_DEFINE_VALUE([GCRY_PRIME_CHECK_AT_FINISH])
NAUSICAA_DEFINE_VALUE([GCRY_PRIME_CHECK_AT_GOT_PRIME])
NAUSICAA_DEFINE_VALUE([GCRY_PRIME_CHECK_AT_MAYBE_PRIME])

dnl Preprocessor symbols: prime numbers constants
NAUSICAA_DEFINE_VALUE([GCRY_PRIME_FLAG_SECRET])
NAUSICAA_DEFINE_VALUE([GCRY_PRIME_FLAG_SPECIAL_FACTOR])
NAUSICAA_INSPECT_TYPE([GCRY_LOG_LEVELS],[enum gcry_log_levels],[signed-int],[#f])

dnl enum gcry_log_levels
NAUSICAA_ENUM_VALUE([GCRY_LOG_CONT])
NAUSICAA_ENUM_VALUE([GCRY_LOG_INFO])
NAUSICAA_ENUM_VALUE([GCRY_LOG_WARN])
NAUSICAA_ENUM_VALUE([GCRY_LOG_ERROR])
NAUSICAA_ENUM_VALUE([GCRY_LOG_FATAL])
NAUSICAA_ENUM_VALUE([GCRY_LOG_BUG])
NAUSICAA_ENUM_VALUE([GCRY_LOG_DEBUG])
NAU_DS_WITH_OPTION([GCRYPT_SHARED_OBJECT],[gcrypt-shared-object],[libgcrypt.so],
  [Gcrypt shared library file],[select Gcrypt shared library file])

dnl end of file
