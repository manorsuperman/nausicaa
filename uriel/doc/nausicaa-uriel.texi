\input texinfo.tex
@c %**start of header
@setfilename nausicaa-uriel.info
@settitle Uriel libraries for R6RS Scheme
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc




@c page
@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@macro bsd{}
@acronym{BSD}
@end macro


@c page
@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro ram{}
@acronym{RAM}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@c Remember that @url is already used by Texinfo.
@macro urla{}
@acronym{URL}
@end macro



@c page
@c ------------------------------------------------------------
@c Software related macros.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@macro glibc{}
@gnu{} C Library
@end macro


@c page
@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro icmp{}
@acronym{ICMP}
@end macro

@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro https{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@macro snmp{}
@acronym{SNMP}
@end macro


@c page
@c ------------------------------------------------------------
@c Arguments macros.
@c ------------------------------------------------------------

@macro vari{ARG}
@var{\ARG\1}
@end macro

@macro varii{ARG}
@var{\ARG\2}
@end macro

@macro variii{ARG}
@var{\ARG\3}
@end macro

@macro variv{ARG}
@var{\ARG\4}
@end macro

@macro varn{ARG}
@var{\ARG\n}
@end macro

@macro vark{ARG}
@var{\ARG\k}
@end macro

@macro varj{ARG}
@var{\ARG\j}
@end macro

@c ------------------------------------------------------------

@macro meta{ARG}
<\ARG\>
@end macro

@macro metai{ARG}
@meta{\ARG\1}
@end macro

@macro metaii{ARG}
@meta{\ARG\2}
@end macro

@macro metaiii{ARG}
@meta{\ARG\3}
@end macro

@macro metaiv{ARG}
@meta{\ARG\4}
@end macro

@macro metan{ARG}
@meta{\ARG\n}
@end macro

@macro metak{ARG}
@meta{\ARG\k}
@end macro

@macro metaj{ARG}
@meta{\ARG\j}
@end macro


@c page
@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro null{}
@code{NULL}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{NAME}
@code{(\NAME\)}
@end macro

@macro module{NAME}
@code{\NAME\}
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@ignore
Separating the @srfi{}  macro from the number with a  '--' rather than a
'-' makes the expansion look ugly in menu entries under the Info reader.
IMHO this should not happen, but  it does; so we live with this, because
the main purpose of this document is to provide an Info version.
@end ignore
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@c ------------------------------------------------------------

@macro func{NAME}
@code{@sc{\NAME\}}
@end macro

@macro nil{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro


@c page
@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE,TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@macro rsixref{NODE,TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@end macro

@macro rfiveref{NODE,TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r5rs}
@end macro

@macro ikarusref{NODE,TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,ikarus}
@end macro

@macro ypsilonref{NODE,TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,ypsilon}
@end macro

@macro posixref{NODE,TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa-posix}
@end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro


@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Uriel libraries for R6RS Scheme

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Uriel

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-uriel

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marcomaggi@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2008


@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a
collection of libraries for @rnrs{6} Scheme.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}).

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying


@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-uriel: (nausicaa-uriel).     Uriel libraries for
                                        @rnrs{6} Scheme.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore


@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* lang::                        Language extensions.
* getenv::                      Getting environment variables.
* test::                        Writing test suites.
* ffi::                         Foreign functions interface.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

@detailmenu
 --- The Detailed Node Listing ---

Language extensions

* lang simple::                 Simple language extensions.
* lang compensations::          Compensation stacks.
* lang deferred exceptions::    Deferred exceptions.
* lang io::                     Input/output procedures.
* lang misc::                   Miscellaneous functions.

Independent libraries

* lang void::                   Void value.
* lang equal-hash::             Equal hash function.
* lang combinators::            Combinators.
* lang object-property::        Object properties.
* lang define-macro::           Common Lisp style macros.
* lang printing::               Printing.
* lang cleanup::                Cleanup of asynchronous resources.

Compensation stacks

* lang compensations usage::    Basic compensations usage.
* lang compensations api::      Compensations @api{}.

Deferred exceptions

* lang deferred exceptions usage::      Usage examples.
* lang deferred exceptions api::        Programming interface.

Foreign functions interface

* ffi example::                 Basic interface to Zlib.
* ffi load::                    Dynamic loading of libraries.
* ffi call::                    Interface functions.
* ffi memory::                  Basic memory allocation.
* ffi guarded malloc::          Guarded memory allocation.
* ffi sizeof::                  Sizes and limits.
* ffi errno::                   Error constants.
* ffi accessors::               Low level access to memory.
* ffi string::                  Basic string functions.
* ffi headers::                 Inspecting foreign header files.
* ffi conditions::              Condition types.

Functions interface

* ffi call types::              Interface to C language types.
* ffi call out::                Calling foreign functions.
* ffi call in::                 Calling Scheme functions.

Basic memory allocation

* ffi memory pointers::         Pointer objects.
* ffi memory primitive::        Primitive functions.
* ffi memory cache::            Caching memory blocks.
* ffi memory objects::          Caching object factories.
* ffi memory compensate::       Compensations.

Low level access to memory

* ffi accessors pokers::        Poking values.
* ffi accessors peekers::       Peeking values.

Condition types

* ffi conditions nomem::        Out of memory errors.
* ffi conditions errno::        Foreign system function errors.

@gnu{} C library facilities

* libc environment::            Environment functions.

@end detailmenu
@end menu

@end ifnottex


@c page
@node overview
@chapter Overview of the package


@noindent
@value{PACKAGE} is a collection of libraries for @rnrs{6} Scheme.



@c page
@node lang
@chapter Language extensions


@noindent
Syntaxes and functions are provided to extend the Scheme language.  To
load the main library:

@example
(import (rnrs)
  (uriel lang))
@end example

@noindent
for the independent libraries see the corresponding sections.


@menu
* lang simple::                 Simple language extensions.
* lang compensations::          Compensation stacks.
* lang deferred exceptions::    Deferred exceptions.
* lang io::                     Input/output procedures.
* lang misc::                   Miscellaneous functions.

Independent libraries

* lang void::                   Void value.
* lang equal-hash::             Equal hash function.
* lang combinators::            Combinators.
* lang object-property::        Object properties.
* lang define-macro::           Common Lisp style macros.
* lang printing::               Printing.
* lang cleanup::                Cleanup of asynchronous resources.
@end menu



@c page
@node lang simple
@section Simple language extensions


@deffn Syntax begin0 @var{form0} @var{form} ...
Evaluate all the @var{form}s like the standard @func{begin}, but return
the value of @var{form0}.  The implementation comes from the @rnrs{6}
original document, Appendix A ``Formal semantics''.

@example
(define-syntax begin0
  (syntax-rules ()
    ((_ ?form0 ?form ...)
     (call-with-values
         (lambda () ?form0)
       (lambda x
         ?form ...
         (apply values x))))))
@end example

This syntax is called @func{prog1} in Common Lisp and Emacs Lisp.
@end deffn


@deffn Syntax dotimes (@var{varname} @var{exclusive-count}) @var{form} ...
@deffnx Syntax dotimes (@var{varname} @var{exclusive-count} @var{result}) @var{form} ...
Loop evaluating the @var{form}s and assigning @var{varname} to an
integer from zero inclusive to @var{exclusive-count}.  Return
@var{result}, or @false{} if @var{result} is not given.

Example:

@example
(dotimes (i 100)
  (display i)
  (newline))
@end example

@noindent
prints the integers in the range @code{[0, 99]}.
@end deffn


@deffn Syntax dolist (@var{varname} @var{list}) @var{form} ...
@deffnx Syntax dolist (@var{varname} @var{list} @var{result}) @var{form} ...
Loop evaluating the @var{form}s and assigning @var{varname} to the
elements from @var{list}.  Return @var{result}, or @false{} if
@var{result} is not given.

Example:

@example
(dolist (elm '(1 2 3))
  (display elm)
  (newline))
@end example

@noindent
prints 1, 2, 3.
@end deffn


@deffn Syntax loop-upon-list (@var{varname} @var{list}) (break-when @var{test}) @var{form} ...
@deffnx Syntax loop-upon-list (@var{varname} @var{list} @var{result}) (break-when @var{test}) @var{form} ...
Loop evaluating the @var{form}s and assigning @var{varname} to the
elements from @var{list}.  Return @var{result}, or @false{} if
@var{result} is not given.  The loop is broken if @var{test} evaluates
to true.

Example:

@example
(loop-upon-list (i '(1 2 3 4) 'retval)
    (break-when (= i 3))
  (display i)
  (newline))
@end example

@noindent
prints @code{1} and @code{2}, then returns @code{retval}.
@end deffn


@deffn Syntax ensure @var{test} (by @var{form0} @var{form} ...) (else @var{form0} @var{form} ...)
@deffnx Syntax ensure @var{test} (by @var{form0} @var{form} ...) (else-by @var{form0} @var{form} ...) ... (else @var{form0} @var{form} ...)
Evaluate the @var{form}s in the @code{by} and @code{else-by} clauses, in
sequence, until @var{test} evaluates to true.  If the first evaluation
of @var{test} gives true: no @var{form}s are evaluated.  If neither the
@code{by} nor the @code{else-by} forms succeed in making @var{test}
true: the @var{form}s in the @code{else} clause are evaluated.

Return the value of the last @var{form} in the clause that made
@var{test} true, or the value in the last @var{form} in the @code{else}
clause, or @false{} if the first evaluation of @var{test} was true and
no @var{form}s were evaluated.

Examples:

@example
(let ((i #f))
  (ensure (= i 1)
      (by
        (set! i 1)
        123)
    (else-by
      (set! i 2)
      456)
    (else
      (set! i 3)
      789)))
=> 123

(let ((i #f))
  (ensure (= i 2)
      (by
        (set! i 1)
        123)
    (else-by
      (set! i 2)
      456)
    (else
      (set! i 3)
      789)))
=> 456

(let ((i #f))
  (ensure (= i 3)
      (by
        (set! i 1)
        123)
    (else-by
      (set! i 2)
      456)
    (else
      (set! i 3)
      789)))
=> 789
@end example
@end deffn



@c page
@node lang compensations
@section Compensation stacks


@menu
* lang compensations usage::    Basic compensations usage.
* lang compensations api::      Compensations @api{}.
@end menu


@noindent
This section describes a form that implements compensation stacks:
syntactic sugar that allows us to write code that allocates a resource
near the code that releases it in case of error.

@quotation
Compensation stacks are described in: @emph{Finding and Preventing
Run-Time Error Handling Mistakes}, by Westley Weimer, George C. Necula,
2004.  In Proceedings of the @acronym{ACM} Conference on
Object--Oriented Programming, Systems, Languages, and Applications.
@end quotation


@c page
@node lang compensations usage
@subsection Basic compensations usage


@noindent
A ``compensation'' is a chunk of code that undoes a resource allocation
performed in another chunk, example:

@example
(define port
  (open-file-input-port "/tmp/proof.1"))
@end example

@noindent
must be ''compensated'' by:

@example
(close-port port)
@end example

@noindent
with the compensations stack such code can be written:

@example
(with-compensations
  (letrec
      ((port (compensate
                 (open-file-input-port "/tmp/proof.1")
               (with
                 (close-port port)))))
    (make-use-of port)))
@end example

Compensation forms are embedded in a closure and pushed on a stack, so
that, in case of error, it is possible to evaluate them in
allocation--reversed order.

A form that makes use of a compensation stack looks like this:

@example
(with-compensations
    (compensate
        ALLOC-FORMS-1
      (with FREE-FORMS-1))
    (compensate
        ALLOC-FORMS-2
      (with FREE-FORMS-2))
  BODY-FORMS)
@end example

@noindent
both @func{with-compensations} and @func{compensate} are syntaxes.  If
no error occurs the order of evaluation is:

@example
ALLOC-FORMS-1
ALLOC-FORMS-2
BODY-FORMS
FREE-FORMS-2
FREE-FORMS-1
@end example

@noindent
if an error occurs in @code{BODY-FORMS}, the order of evaluation is:

@example
ALLOC-FORMS-1
ALLOC-FORMS-2
BODY-FORMS
FREE-FORMS-2
FREE-FORMS-1
@end example

@noindent
if an error occurs in @code{ALLOC-FORMS-2}, the order of evaluation is:

@example
ALLOC-FORMS-1
ALLOC-FORMS-2
FREE-FORMS-1
@end example

@noindent
if an error occurs in @code{ALLOC-FORMS-1}, the order of evaluation is:

@example
ALLOC-FORMS-1
@end example

@noindent
if an error occurs in @code{FREE-FORMS-1}, the order of evaluation is:

@example
ALLOC-FORMS-1
ALLOC-FORMS-2
BODY-FORMS
FREE-FORMS-2
FREE-FORMS-1
@end example

@noindent
if an error occurs in @code{FREE-FORMS-2}, the order of evaluation is:

@example
ALLOC-FORMS-1
ALLOC-FORMS-2
BODY-FORMS
FREE-FORMS-2
FREE-FORMS-1
@end example

So @func{with-compensations} tries to evaluate all the free forms,
despite errors.  Of course if an error occurs in the middle of a set of
forms:

@example
(first-form)   ;evaluated
(raise 'here)
(third-form)   ;not evaluated
@end example

@noindent
the forms before the error are evaluated, while the forms after the
error are not.

A variant of @func{with-compensations} exists to evaluate the
compensation forms only in case of error:

@example
(with-compensations/on-error
    (compensate
        ALLOC-FORMS-1
      (with FREE-FORMS-1))
    (compensate
        ALLOC-FORMS-2
      (with FREE-FORMS-2))
  BODY-FORMS)
@end example

@noindent
if no error occurs the order of evaluation is:

@example
ALLOC-FORMS-1
ALLOC-FORMS-2
BODY-FORMS
@end example

@noindent
while if an error occurs the evaluation is equal to the cases of
@func{with-compensations}.  The ``on error'' variant is useful in
constructors and initialisation functions, where we want to run the
compensations only if an error occurs; if no error is raised, we just
want the constructor to return.


@c page
@node lang compensations api
@subsection Compensations @api{}


@deffn Syntax compensate @var{alloc-form} @dots{} (with @var{free-form} @dots{})
Evaluate all the @var{alloc-form}s and, if no error occurs, push a
closure holding the @var{free-form}s on the current compensations stack.
Return the return value of the last @var{alloc-form}.
@end deffn


@deffn Syntax with-compensations @var{form} @dots{}
@deffnx Syntax with-compensations/on-error @var{form} @dots{}
Initialise a new local compensations stack, then evaluate all the
@var{form}s.  If no error occurs, return the return value of the last
@var{form}.

@func{with-compensations} always invokes @func{run-compensations} after
the @var{form}s have been evaluated.

@func{with-compensations/on-error} invokes @func{run-compensations}
after the @var{form}s have been evaluated only if an exception was
raised.
@end deffn


@defun run-compensation
Evaluate all the compensation forms that are in the current stack, in
last in/first out order.  The compensations are evaluated in the body of
a @func{defer-exceptions}, so exceptions raised are handled as described
in @ref{lang deferred exceptions}.
@end defun


@c page
@node lang deferred exceptions
@section Deferred exceptions


@menu
* lang deferred exceptions usage::      Usage examples.
* lang deferred exceptions api::        Programming interface.
@end menu


@noindent
When a non--continuable exception is raised: the stack unwinds and some
mechanism is needed to release allocated resources that cannot be simply
garbage collected.  Some mechanism requires asynchronous evaluation of
cleanup code (guardians, for example), other mechanisms require
synchronous evaluation of cleanup code (@ref{lang compensations}, for
example).

With synchronous cleanup code: what happens if the cleanup code itself
raises an exception?  If this @emph{second level} exception is left
going: it replaces the original one (@emph{first level}), which is lost:

@example
(import (rnrs))

(with-exception-handler
    (lambda (e)
      (raise 'second))
  (lambda ()
    (raise 'first)))
@end example

@noindent
outputs:

@example
Unhandled exception:
 Non-condition object: second
@end example

@noindent
@code{first} is never reported.  We rarely want this.

This section describes a form that can be used to save informations
about second level exceptions, for the case in which it is fine to try
to go on reporting the first level error.  With this form: second level
exceptions can be reported later to the user or logged to a file or
whatever.

This mechanism is automatically used by compensation stacks, which are
the reference use case (@ref{lang compensations}).

@c page
@node lang deferred exceptions usage
@subsection Usage examples


@noindent
A form that uses deferred exceptions looks like this:

@example
(with-deferred-exceptions-handler
    (lambda (exc)
      (handle-the-exception exc))
  (before-do-something)
  (before-do-something)
  (defer-exceptions
    (do-something)
    (do-something))
  (after-do-something)
  (after-do-something))
@end example

@noindent
if the forms in the @func{defer-exceptions} raise an exception: the
exception value is saved and evaluation goes on for the
@code{(after-do-something)} forms.  Then the @func{lambda} is applied to
the exception value.

Any number of @func{defer-exceptions} can be put in the same
@func{with-deferred-exceptions}.


@c page
@node lang deferred exceptions api
@subsection Programming interface


@deffn Syntax defer-exceptions @var{form} @dots{}
Evaluate all the @var{form}s as in the body of a @func{begin}.

If an exception is raised: its value is added to the list of exceptions
in the dynamic environment of the current deferred exception handler.

If @func{defer-exception} appears outside of a
@func{with-deferred-exception-handler} form: the exceptions are silently
discarded.
@end deffn


@deffn Syntax with-deferred-exceptions-handler @var{handler} @var{form} ...
Setup a deferred exception handler dynamic environment, in which
@var{handler} is the exceptions handler, for the evaluation of the
@var{form}s.  All the @var{form}s are evaluated as in the body of a
@func{begin}.  If a deferred exception is raised
@func{run-deferred-exceptions-handler} is invoked.
@end deffn


@defun run-deferred-exceptions-handler
Apply the current deferred exceptions handler to each deferred exception
value in the current list.  If the handler raises an exception: it is
silently ignored.
@end defun


@c page
@node lang void
@section Void value


Ikarus Scheme provides the @func{void} function which returns the value
returned by forms that do not return a meaningful value, like
@func{set!}.  Not all implementations offers it, for example Ypsilon up
to revision 285 does not.

The @library{uriel void} library attempts to provide a replacement.
There is no guarantee that it will work with all the @rnrs{6} Scheme
implementations.  To load the library:

@example
(import (rnrs)
  (uriel void))
@end example


@defun void
Return the void value.

@example
(define (void)
  (let ((a #f))
    (set! a 1)))
@end example
@end defun


@c page
@node lang equal-hash
@section Equal hash function


For some reason Ikarus up until revision 1694 does not implement the
@func{equal-hash} function as specified by the @rnrs{6}.  This library
offers a simple implementation.  To load it:

@example
(import (rnrs)
  (uriel equal-hash))
@end example


@defun equal-hash @var{obj}
Return an integer hash value for @var{obj}, based on its structure and
current contents.  This hash function is suitable for use with
@func{equal?} as equivalence function.

@example
(define (equal-hash obj)
    (string-hash
     (call-with-string-output-port
         (lambda () (write obj)))))
@end example
@end defun



@c page
@node lang io
@section Input/output procedures


@deffn Syntax with-output-to-string @var{form} ...
A wrapper for @func{call-with-string-output-port} that puts all the
@var{form} arguments in the thunk.  Example:

@example
(with-output-to-string
  (display 123))
@end example

@noindent
is equivalent to:

@example
(call-with-string-output-port
  (lambda ()
    (display 123)))
@end example
@end deffn


@c page
@node lang misc
@section Miscellaneous functions


@defun {symbol->string/maybe} @var{obj}
If @var{obj} is a symbol: convert it to string and return the result;
else if it is a string, return it.  If it is neither a string nor a
symbol: raise an assertion violation.
@end defun



@c page
@node lang combinators
@section Combinators


To load the library:

@example
(import (rnrs)
  (uriel combinators))
@end example


@deffn Syntax K @var{form} . @var{forms}
Evaluate all the forms like the standard @func{begin}, but return the
value of the first form.

@example
(define-syntax K
  (syntax-rules ()
    ((_ ?expr0 ?expr ...)
     (call-with-values
         (lambda () ?expr0)
       (lambda x
         ?expr ...
         (apply values x))))))
@end example

This is the same as the @func{begin0} syntax.
@end deffn


@deffn Syntax Y @var{func}
Build a recursive function with no name.

@example
(define-syntax Y
  (syntax-rules ()
    ((_ ?func)
     (let ((F ?func))
       ((lambda (f)
          (F (lambda (. args)
               (apply (f f) args))))
        (lambda (f)
          (F (lambda (. args)
               (apply (f f) args)))))))))
@end example

The combinator has to called like this:

@example
((Y (lambda (f)
      (lambda (. args)
        (do-something-with-args args)
        (if (condition) (f args))))
    arg1 arg2 ...))
@end example
@end deffn


@deffn Syntax S @var{x} @var{y} @var{z}
The S combinator:

@example
(define-syntax S
  (syntax-rules ()
    ((_ ?x ?y ?z)
     (let ((Z ?z))
       (?x Z (?y Z))))))
@end example
@end deffn


@c page
@node lang object-property
@section Object properties


An object property is a convenient interface to an @func{eq?} hashtable.
An object property is a function that can be called with one or two
arguments.  When called with two arguments: the first is an object and
the second is its property value; they are stored in the hashtable.
When called with one argument: the hashtable is queried using the
argument as key, and the value is returned.

@quotation
The idea of  object properties implemented in this library comes from
Guile, the @gnu{} Ubiquitous Interface Language for Extensions.
@end quotation

To load the library:

@example
(import (rnrs)
  (uriel object-property))
@end example


@defun make-object-property
Build and return a new object property.
@end defun


@deffn Syntax with-true-property (@var{prop} @var{object}) @var{form0} @var{form} ...
Temporarily save the value of @var{object} in @var{prop} and set it to
@true{}, then evaluate the @var{form}s and restore the original value.
@end deffn


@deffn Parameter object-property-initial-capacity
An integer representing the initial size of the hashtable.  The default
value is 100.
@end deffn


@deffn Parameter object-property-default-value
The value to return if the property is queried for an object that was
not registered before.  The default value is @false{}.
@end deffn


@c ------------------------------------------------------------

@subsubheading Examples

The following will evaluate successfully:

@example
(import (rnrs)
  (uriel object-property)
  (uriel test)
  (srfi parameters))

(check-set-mode! 'report-failed)

(check
    (let ((prop (make-object-property))
          (a (vector 1 2 3))
          (b (vector 4 5 6))
          (c (vector 7 8 9)))
      (prop a 1)
      (prop b 2)
      (list (prop a) (prop b) (prop c)))
  => '(1 2 #f))

(check
    (let ((prop (parameterize ((object-property-initial-capacity 10)
                               (object-property-default-value 'quack))
                  (make-object-property)))
          (a (vector 1 2 3))
          (b (vector 4 5 6))
          (c (vector 7 8 9)))
      (prop a 1)
      (prop b 2)
      (list (prop a) (prop b) (prop c)))
  => '(1 2 quack))

(check-report)
@end example


@c page
@node lang define-macro
@section Common Lisp style macros


To load the library:

@example
(import (rnrs)
  (uriel define-macro))
@end example


@deffn Syntax define-macro (@var{name} . @var{args}) @var{form0} @var{form} ...
@deffnx Syntax define-macro @var{name} @var{func}
@deffnx Syntax defmacro @var{name} @var{args} @var{form0} @var{form} ...
Define a Common Lisp style macro.  The @var{form}s are evaluated as in
the evaluation of a function; the return value must be a list that will
be evaluated as a form in the dynamic environment of the caller.
@end deffn


@subsubheading Examples

The following will evaluate successfully:

@example
(import (rnrs)
  (uriel define-macro)
  (uriel test))

(check-set-mode! 'report-failed)

(check
    (let ()
      (define-macro (proof)
        `(list 1 2 3))
      (proof))
  => '(1 2 3))

(check
    (let ()
      (define-macro (proof a b c)
        `(list ,a ,b ,c))
      (proof 'one 'two 'three))
  => '(one two three))

(check-report)
@end example


@c page
@node lang printing
@section Printing


This chapter describes an interface to the @func{pretty-print} and
@func{format} procedures.  It is meant to provide basic printing
facilities for debugging and test suites.  To load the library:

@example
(import (rnrs)
  (uriel printing))
@end example


@defun print @var{port} @var{template} @var{value} ...
Format the string @var{template} using the optional @var{value}s, using
implementation specific facilities, and return the result.  If
@var{port} is true:

@itemize
@item
if it is an output port: the result is written into it with
@func{display};

@item
if it is @true{}: the result is written into the current output-port
with @func{display};

@item
else an assertion violation is raised.
@end itemize
@end defun


@defun pretty-print @var{value}
Prints to the current output port the best representation possible of
@var{value}.
@end defun


@c page
@node lang cleanup
@section Cleanup of asynchronous resources


On Scheme implementations that provide guardians (like Ikarus) there is
the need to invoke the guardian function, every now and then, to release
guarded resources that were garbage collected.  For example: if the
program makes use of an event loop, we can enqueue a periodic, batch,
event that invokes a cleanup function.

We may have code like this:

@example
(define block-guardian (make-guardian))

(define (block-cleanup)
  (do ((p (block-guardian) (block-guardian)))
      ((not p))
    (primitive-free p)))
@end example

@noindent
and allocate memory with:

@example
(define (malloc/guarded size)
  (let ((p (malloc size)))
    (block-guardian p)
    p))
@end example

@noindent
whenever the values returned by @func{malloc/guarded} are garbage
collected: they will be made available as return values from the
guardian function, so we can invoke @func{block-cleanup} to free them.

Of course, with code like this, we need a guardian for each type of
resource, or, to be more precise, a guardian for each destructor
(@func{primitive-free} in the example).

To make it simpler to invoke all the cleanup functions, @value{PACKAGE}
provides an interface to register them and invoke them in sequence.  To
load the library:

@example
(import (rnrs)
  (uriel cleanup))
@end example


@defun uriel-register-cleanup-function @var{thunk}
Register @var{thunk} in the internal list of cleanup functions.
@end defun


@defun uriel-forget-cleanup-function @var{thunk}
Remove @var{thunk} from the internal list of cleanup functions.
@end defun


@defun uriel-cleanup
Invoke all the functions registered in the internal list of cleanup
functions.  Every function is invoked with no arguments.
@end defun


@quotation
@emph{Note:} This library implements no event loop.  The only way to
invoke a cleanup thunk only once is to register it, invoke
@func{uriel-cleanup}, then remove it.  This is usually not what we want
to do to handle such a simple case: we should use a proper event loop,
instead.
@end quotation


@c page
@node test
@chapter Writing test suites


This chapter documents a wrapper for the @library{srfi
lightweight-testing} library that adds the ability to select tests with
appropriate values of environment variables.

To load the library:

@example
(import (rnrs)
  (uriel test))
@end example

@noindent
all the bindings from @library{srfi lightweight-testing} are exported by
@library{uriel test}; @func{check} is redefined as described below.


@deffn Syntax with-result @var{form0} @var{form} ...
Evaluate all the @var{form}s, as in @func{begin}, in a dynamic
environment in which an implicit result variable is defined.  The
implicit variable is handled as a list.

Return a list whose first value is the return value of the last
@var{form} and whose second value is the value of the implicit variable.
@end deffn


@defun add-result @var{value}
Append @var{value} to the list in the implicit variable defined by
@func{with-result}.
@end defun


@defun get-result
Return the current value of the implicit variable defined by
@func{with-result}.
@end defun


@deffn catch-exception @var{form0} @var{form} ...
Evaluate all the @var{form}s as in @func{begin}.  If an exception is
raised: catch it and return its value.
@end deffn


@deffn false-if-exception @var{form0} @var{form} ...
Evaluate all the @var{form}s as in @func{begin}.  If an exception is
raised: return @false{}.
@end deffn


@deffn Syntax check-for-true @var{expr}
Evaluate @var{expr} in a @func{check} syntax, expecting a non--false
value as result.
@end deffn


@deffn check @var{expr} => @var{expected}
@deffnx check @var{expr} (=> @var{equal}) @var{expected}
@deffnx check @var{name} @var{expr} (=> @var{equal}) @var{expected}
@deffnx check @var{name} @var{expr} => @var{expected}
A wrapper for @func{check} from @library{srfi lightweight-testing} that
does, basically, the same thing.

When @var{name} is given or the parameter @code{testname} is set to a
non--false value: the value must be a string or symbol that is
interpreted as the ``name'' of this test.  If the environment variable
@env{name} is set to the empty string, nothing special happens: the test
is evaluated as usual.  If the environment variable @env{name} is set to
a non--empty string: the test name is checked against @env{name} and if
the test is evaluated only if there is a match; otherwise it is skipped.

The test name and the value of @env{name} do match if the value of
@env{name} is the prefix or suffix of the test name, according to the
@func{string-prefix?} and @func{string-suffix?} functions from
@library{srfi strings}.
@end deffn


@deffn Parameter testname
Holds the currently selected name for a @func{check} test.  Must be set
to @false{}, a string or a symbol.  In the case of the symbol: the name
of the symbol is interpreted as name of the test.

The parameter can be used to give the same name to a set of @func{check}
forms.

@quotation
@strong{Note} The @library{uriel test} library does @strong{not} export
@func{parameterize} from @library{srfi parameters}.
@end quotation
@end deffn


@c page
@node ffi
@chapter Foreign functions interface


This chapter describes a wrapper of the foreign functions interface from
the underlying Scheme implementation.  To load the library:

@example
(import (rnrs)
  (uriel ffi))
@end example

@noindent
only functions needed to build an interface to a foreign C language
shared object are made available by this library; other functions (to do
actual operations) are in the @library{glibc} and @library{posix}
libraries.


@menu
* ffi example::                 Basic interface to Zlib.
* ffi load::                    Dynamic loading of libraries.
* ffi call::                    Interface functions.
* ffi memory::                  Basic memory allocation.
* ffi guarded malloc::          Guarded memory allocation.
* ffi sizeof::                  Sizes and limits.
* ffi errno::                   Error constants.
* ffi accessors::               Low level access to memory.
* ffi string::                  Basic string functions.
* ffi headers::                 Inspecting foreign header files.
* ffi conditions::              Condition types.
@end menu


@c page
@node ffi example
@section Basic interface to Zlib


Here is an incomplete example interface to the popular Zlib on Unix like
systems, to make clear what we are talking about.  It is incomplete
because it does not define the offsets of fields in the @code{z_stream}
structure, which are needed to use it.  @ref{ffi headers} for a
discussion about how to implement the missing bits.

As we can see: writing a binding to a foreign library is basically a
copy and paste from the C language header file, with some adjustment
(most of which can be done in a text editor with appropriate regular
expressions support).

@example
(library (zlib)
  (export
    deflateInit deflate deflateEnd
    inflateInit inflate inflateEnd

    Z_NO_FLUSH Z_PARTIAL_FLUSH Z_SYNC_FLUSH Z_FULL_FLUSH
    Z_FINISH Z_BLOCK

    Z_OK Z_STREAM_END Z_NEED_DICT Z_ERRNO Z_STREAM_ERROR
    Z_DATA_ERROR Z_MEM_ERROR Z_BUF_ERROR Z_VERSION_ERROR

    Z_NO_COMPRESSION Z_BEST_SPEED
    Z_BEST_COMPRESSION Z_DEFAULT_COMPRESSION

    Z_FILTERED Z_HUFFMAN_ONLY Z_RLE Z_FIXED Z_DEFAULT_STRATEGY

    Z_NULL)
  (import (rnrs)
    (uriel ffi))

  (define zlib
    (let ((o (open-shared-object 'libz.so)))    ;load it
      (shared-object o)                         ;make it current
      o))

;;; Type conversions.
  (define z_streamp 'pointer)

;;; Constants.
  (define Z_NO_FLUSH            0)
  (define Z_PARTIAL_FLUSH       1)
  (define Z_SYNC_FLUSH          2)
  (define Z_FULL_FLUSH          3)
  (define Z_FINISH              4)
  (define Z_BLOCK               5)

  (define Z_OK                  0)
  (define Z_STREAM_END          1)
  (define Z_NEED_DICT           2)
  (define Z_ERRNO               -1)
  (define Z_STREAM_ERROR        -2)
  (define Z_DATA_ERROR          -3)
  (define Z_MEM_ERROR           -4)
  (define Z_BUF_ERROR           -5)
  (define Z_VERSION_ERROR       -6)

  (define Z_NO_COMPRESSION      0)
  (define Z_BEST_SPEED          1)
  (define Z_BEST_COMPRESSION    9)
  (define Z_DEFAULT_COMPRESSION -1)

  (define Z_FILTERED            1)
  (define Z_HUFFMAN_ONLY        2)
  (define Z_RLE                 3)
  (define Z_FIXED               4)
  (define Z_DEFAULT_STRATEGY    0)

  (define Z_NULL                0)

;;; Deflating.
  (define-c-function deflateInit
    (int deflateInit_ (z_streamp int)))

  (define-c-function deflate
    (int deflate (z_streamp int)))

  (define-c-function deflateEnd
    (int deflateEnd (z_streamp)))

;;; Inflating.
  (define-c-function inflateInit
    (int inflateInit_ (z_streamp)))

  (define-c-function inflate
    (int inflate (z_streamp int)))

  (define-c-function inflateEnd
    (int inflateEnd (z_streamp))))
@end example


@c page
@node ffi load
@section Dynamic loading of libraries


@deffn Parameter shared-object
Holds a value referencing the ``current'' shared object: the shared
object in which @func{primitive-make-c-function} will look for symbols.
Shared objects references are produced with @func{open-shared-object}.

The initial value selects the current process; with this value we can
access symbols exported by the current program and the libraries that
have been already loaded (this may be platform specific, check out the
documentation of your operative system).  For example: the symbols from
the standard C library, like @cfunc{fwrite}, can be accessed this way.
@end deffn


@defun open-shared-object @var{library-name}
Open a new shared object and return its identifier.  The return value is
meant to be stored in the @code{shared-object} parameter while creating
interface functions for it.

@var{library-name} must be a string or symbol representing the file name
or pathname to be opened.  Examples:

@example
(define mpfr-lib
  (let ((l (open-shared-object 'libmpfr.so)))
    (shared-object l)
    l))

(define mpfi-lib
  (let ((l (open-shared-object '/usr/local/lib/libmpfi.so)))
    (shared-object l)
    l))
@end example

In the case of a name (wihtout directory part) the search path for
shared objects is implemenation dependent.

@quotation
@emph{Unix:} We can find documentation about the search path of shared
objects in the manual page of @cfunc{dlopen}.
@end quotation
@end defun


@defvar self-shared-object
Bound to the value that identifies the current process.  It is the
initial value of @code{shared-object}
@end defvar


@c page
@node ffi call
@section Functions interface


@menu
* ffi call types::              Interface to C language types.
* ffi call out::                Calling foreign functions.
* ffi call in::                 Calling Scheme functions.
@end menu

@c page
@node ffi call types
@subsection Interface to C language types


The following symbols are accepted as C language type identifiers, but
not all Scheme implementations support them all: we will have to find
out by trial and error.  We should be safe using: @code{int},
@code{pointer} and @code{double}, which are enough for a lot of foreign
libraries.

@quotation
@emph{Ikarus:} The Ikarus Scheme implementation supports all these
types.
@end quotation

@quotation
@emph{Ypsilon:} The Ypsilon Scheme implementation @strong{does not}
support all these types. @ypsilonref{ffi types,Handling of type
conversions}.
@end quotation

Remember that C strings (zero terminated arrays of @code{char}) must be
created from Scheme strings with @func{string->cstring}, and handed to
the foreign functions as pointers.

@table @code
@item char
@itemx schar
@itemx signed-char
Signed character.

@item uchar
@itemx unsigned-char
Unsigned character.

@item int
@itemx signed-int
@itemx ssize_t
Signed fixnum.

@item uint
@itemx unsigned
@itemx unsigned-int
@itemx size_t
Unsigned fixnum.

@item long
Signed integer.

@item ulong unsigned-long
Unsigned integer.

@item float
Single precision flonum.

@item double
Double precision flonum.

@item pointer
@itemx void*
@itemx char*
@itemx FILE*
Pointer to a block of memory.

@item callback
Pointer to a callback function.

@item void
No value.
@end table


@c page
@node ffi call out
@subsection Calling foreign functions


@defun primitive-c-function @var{ret-type} @var{export-name} @var{arg-types}
@defunx primitive-c-function/with-errno @var{ret-type} @var{export-name} @var{arg-types}
Build and return a new Scheme interface function for a C language
foreign function in the current shared object.  The current shared
object is referenced by the value of the @code{shared-object} parameter.

The @code{/with-errno} variant returns two values: the return value from
the foreign function and the value of the @code{errno} variable just
after the call to the foreign function.

@quotation
@emph{Note:} Some @posix{} function returns an integer representing
success or failure, and only when the returned value represents failure
the @code{errno} value is meaningful.
@end quotation

@table @var
@item ret-type
A symbol among the ones that select a C language type.  It is the type
of value returned by the foreign function.

@item pri-name
A Scheme symbol representing the name of the symbol exported by the
shared object.  Beware that, sometimes, the exported symbols are
different from the ones we write in C language code to call a function.

@item arg-types
A list of symbols among the ones that select a C language type.  It is
the list of types for the arguments required by the foreign function.
If the foreign function accepts no arguments: this list must be @code{(void)}.
@end table

@quotation
@emph{Unix:} One way to discover the names of symbols exported by a
shared object, is to apply the @command{strings} command to the shared
object.  For example, to discover the names of deflate functions in
Zlib:

@example
$ strings /usr/lib/libz.so | grep deflate
deflateInit_
deflate
deflateEnd
...
@end example
@end quotation

Variadic functions (like @cfunc{fprintf}) are @strong{not} supported
(sorry).

As an example, the main deflate functions from Zlib can be defined with:

@example
(define deflateInit
  (primitive-make-c-function
     'int 'deflateInit_ '(pointer int)))

(define deflate
  (primitive-make-c-function
     'int 'deflate '(pointer int)))

(define deflateEnd
  (primitive-make-c-function
     'int 'deflateEnd '(pointer)))
@end example
@end defun


@deffn Syntax make-c-function @var{ret-type} @var{pri-name} (@var{arg-type0} @var{arg-type} ...)
@deffnx Syntax make-c-function/with-errno @var{ret-type} @var{pri-name} (@var{arg-type0} @var{arg-type} ...)
@deffnx Syntax define-c-function @var{pub-name} (@var{ret-type} @var{pri-name} (@var{arg-type0} @var{arg-type} ...))
@deffnx Syntax define-c-function/with-errno @var{pub-name} (@var{ret-type} @var{pri-name} (@var{arg-type0} @var{arg-type} ...))
These are wrappers for @func{primitive-make-c-function} that allow us to
avoid quoting of arguments.  @func{define-c-function} is itself a
wrapper for @func{make-c-function}.

The @code{/with-errno} variants are wrappers for
@func{primitive-c-function/with-errno}.

As an example, the main deflate functions from Zlib can be defined with:

@example
(define zstream 'pointer)

(define deflateInit
  (make-c-function int deflateInit_ (zstream int)))

(define deflate
  (make-c-function int deflate (zstream int)))

(define deflateEnd
  (make-c-function int deflateEnd (zstream)))
@end example

@noindent
or with:

@example
(define zstream 'pointer)

(define-c-function deflateInit
  (int deflateInit_ (zstream int)))

(define-c-function deflate
  (int deflate (zstream int)))

(define-c-function deflateEnd
  (int deflateEnd (zstream)))
@end example

@noindent
and notice that: in the expansion of the macros, the predefined types
(like @code{int}) will be quoted, while the custom types (like
@code{zstream}) will be left unquoted and so they will correctly
reference bindings (in the example @code{zstream} evaluates to
@code{pointer}).
@end deffn


Miscellaneous examples from the C standard library and the @posix{}
interface:

@example
(define-c-function fopen
  (pointer fopen (pointer pointer)))

(define-c-function fwrite
  (size_t fwrite (pointer size_t size_t pointer)))

(define-c-function fread
  (size_t fread (pointer size_t size_t pointer)))

(define-c-function open
  (int open (pointer int)))

(define-c-function write
  (ssize_t write (int pointer size_t)))

(define-c-function read
  (ssize_t read (int pointer size_t)))
@end example



@c page
@node ffi call in
@subsection Calling Scheme functions




@c page
@node ffi memory
@section Basic memory allocation


@menu
* ffi memory pointers::         Pointer objects.
* ffi memory primitive::        Primitive functions.
* ffi memory cache::            Caching memory blocks.
* ffi memory objects::          Caching object factories.
* ffi memory compensate::       Compensations.
@end menu


@c page
@node ffi memory pointers
@subsection Pointer objects


@deffn Procedure pointer? @var{x}
Return @true{} if the value of @var{x} is a value that the Scheme
implementation uses to represent memory blocks, return @false{}
otherwise.
@end deffn


@defun pointer-null? @var{pointer}
Return @true{} if @var{pointer} represents a null pointer, @false{}
otherwise.
@end defun


@deffn Procedure pointer->integer @var{pointer}
Convert to an exact integer a value that the Scheme implementation uses
to represent memory blocks.
@end deffn


@deffn Procedure integer->pointer @var{exact-integer}
Convert to a value that the Scheme implementation uses to represent
memory blocks an exact integer.
@end deffn


@c page
@node ffi memory primitive
@subsection Primitive functions


@defun primitive-malloc @var{number-of-bytes}
An interface to the system @cfunc{malloc} function (or something that,
in some way, allocates memory).  Allocate a block of memory and return a
pointer to it (an object referencing the memory block according to the
Scheme implementation), or @false{} if an error occurs.
@end defun


@defun primitive-free @var{pointer}
An interface to the system @cfunc{free} function (or something that, in
some way, releases memory allocated by @func{primitive-malloc}).
Release a block of memory referenced by @var{pointer} (an object
referencing the memory block according to the Scheme implementation).
@end defun


@defun malloc @var{number-of-bytes}
A wrapper for @func{primitive-malloc} that raises an
@code{&out-of-memory} condition in case of error.  Blocks of memory
allocated with this function can be freed with @func{primitive-free}.
@end defun


@subsubheading Examples


Care must be taken when managing memory with these low level functions:
we have to assume that memory blocks will @strong{not} be garbage
collected.  A method to release memory needed in a form is to use
@func{dynamic-wind}:

@example
(let ((p #f))
  (dynamic-wind
    (lambda () (set! p (malloc 123)))
    (lambda () (do-something-with p))
    (lambda () (primitive-free p))))
@end example

@noindent
another is to use a compensation:

@example
(with-compensations
  (letrec ((p (compensate
                  (malloc 123)
                (with
                  (primitive-free p)))))
    (do-something-with p)))
@end example

@noindent
another method, if supported, is to use @func{malloc/guarded}, @ref{ffi
guarded malloc,guarded-malloc}


@c page
@node ffi memory cache
@subsection Caching memory blocks


@defun make-block-cache @var{number-of-bytes} @var{max-depth}
Build and return a new memory blocks cache, for blocks of
@var{number-of-bytes}, that at maximum will cache @var{max-depth}
blocks.  The return value is an interface function with the following
protocol:

@table @emph
@item when the function is invoked with zero arguments
it retrieves a block from the set of cached blocks; if the set is empty:
a new block is allocated with @func{malloc};

@item when the function is invoked with 1 argument
if the argument is the symbol @code{purge}: @func{primitive-free} is
applied to all the blocks in the cache and the cache is reset to empty;

else the argument must be a pointer previously returned by this
interface function: if the number of blocks in the cache is less than
@var{max-depth}, the pointer is stored in the cache, else
@func{primitive-free} is applied to it.
@end table
@end defun


@defun small-blocks-cache
@defunx small-blocks-cache @var{pointer}
@defunx small-blocks-cache purge
Interface function for a cache of memory blocks of size 32, 10 blocks
deep.  This cache is meant to be used for temporary storage space of
output values from foreign functions.  The size of 32 should be enough
to hold all the output values of C language standard types.

For example, the @gnu{} Libgcrypt library has a constructor with this
prototype:

@example
gcry_error_t gcry_cipher_open (gcry_cipher_hd_t * hd,
                               int algo, int mode,
                               unsigned int flag);
@end example

@noindent
where @code{gcry_cipher_hd_t} is a @code{typedef} for an opaque pointer
(we can think of it as @code{void *}); the @var{hd} argument must
reference a pointer sized location in which the function will store a
pointer to a newly allocated data structure; this location is required
only for the construction of a new object, so a Scheme interface could
do (unsafe code, not handling errors):

@example
(let ((hd #f)
      (hdp (small-blocks-cache)))
  (gcry_cipher_open hdp algo mode flag)
  (set! hd (pointer-ref-c-pointer hdp 0))
  (small-blocks-cache hdp)
  hd)
@end example
@end defun


@defun page-blocks-cache
@defunx page-blocks-cache @var{pointer}
@defunx page-blocks-cache purge
Interface function for a cache of memory blocks of size 4096, 10 blocks
deep.
@end defun


@subsubheading Allocating memory blocks


@deftp {Record Type} memory-block-record
Type of record used to represent miscellaneous size memory blocks.  It
has two fields: a pointer value referencing an allocated memory block
(@ref{ffi memory pointers}); the number of bytes in the allocated memory
block.
@end deftp


@deffn {Record Maker} make-memory-block-record @var{pointer} @var{number-of-bytes}
@deffnx {Predicate} memory-block-record? @var{object}
@deffnx {Field Getter} memory-block-pointer @var{object}
@deffnx {Field Getter} memory-block-size @var{object}
Functions to handle records of type @code{memory-block-record}.
@end deffn


@defun memory-block @var{block-or-size}
Interface function to memory blocks allocation and releasing.  When
@var{block-or-size} is a record of type @code{memory-block-record}: the
function releases the allocated block; else @var{block-or-size} must be
an unsigned exact integer representing the number of bytes to be
allocated for a new block.

Allocation and releasing of memory blocks is done:

@itemize
@item
relying on @func{small-blocks-cache} if the number of bytes is less than
or equal to the size of a small block;

@item
relying on @func{page-blocks-cache} if the number of bytes is less than
or equal to the size of a page block;

@item
relying on @func{malloc} and @func{primitive-free} in all the other cases.
@end itemize

When allocating: the returned value is a record of type
@code{memory-block-record}.

To use this allocator, consider the compensation wrapper
@func{compensate-malloc/block}, @ref{ffi memory
compensate,compensate-malloc/block}

Use of this allocator is suggested whenever we temporarily need a memory
block, for example to hold a C string to be used as argument for a
foreign function.  @ref{ffi string,string->cstring/compensated}
@end defun


@c page
@node ffi memory objects
@subsection Caching object factories


@defun make-caching-object-factory @var{init-func} @var{final-func} @var{number-of-bytes} @var{max-depth}
Build and return a new caching object factory.  It is a wrapper for
@func{make-block-cache}, to which the @var{number-of-bytes} and
@var{max-depth} arguments are handed untouched.  The return value is an
interface function with the following protocol:

@table @emph
@item when the function is invoked with zero arguments
it retrieves a block from the cache and applies @var{init-func} to it; a
pointer to the block is returned;

@item when the function is invoked with 1 argument
if the argument is the symbol @code{purge}: the same symbol is handed to
the block cache, causing the cache to be purged of allocated blocks;

else the argument must be a pointer previously returned by this
interface function: @func{final-func} is applied to it, then it is
handed to the underlying block cache interface function.
@end table

For example, the @acronym{MPFR} library (Multiple Precision
Floating--Point Reliable Library) requires us to allocate structures of
type @code{mpfr_t}, then to use an initialiser and a finaliser with the
following prototypes:

@example
void mpfr_init (mpfr_ptr p);
void mpfr_clear (mpfr_ptr p);
@end example

@noindent
@code{mpfr_t} values are real numbers with special representation, so we
may need a lot of them to carry on computations; a Scheme interface
could initialise itself like this:

@example
(define sizeof-mpfr 64) ;this must be determined exactly

(define mpfr-lib
  (let ((o (open-shared-object "libmpfr.so")))
    (shared-object o)
    o))

(define mpfr_ptr 'pointer)
(define-c-function mpfr_init  (void mpfr_init  (mpfr_ptr)))
(define-c-function mpfr_clear (void mpfr_clear (mpfr_ptr)))

(define mpfr
  (make-caching-object-factory mpfr_init mpfr_clear
                               sizeof-mpfr 100))

(define (compensate-mpfr)
  (letrec ((p (compensate (mpfr)
                (with (mpfr p)))))
    p))
@end example

@noindent
and then:

@example
(with-compensations
  (let ((a (compensate-mpfr))
        (b (compensate-mpfr)))
    (do-something-with a b)))
@end example

@noindent
at the end of the world, if we feel like it, we can do:

@example
(mpfr 'purge)
@end example
@end defun


@c page
@node ffi memory compensate
@subsection Compensations


@ref{lang compensations} for details about compensations.


@defun compensate-malloc @var{number-of-bytes}
Allocate a block of memory with @func{malloc} and return a pointer to
it.  The appropriate invocation to @func{primitive-free}, to free the
block, is added to the dynamic environment of the current compensations
stack.
@end defun


@defun compensate-malloc/small
Acquire a small block of memory from @func{small-blocks-cache} and
return a pointer to it.  The appropriate invocation to
@func{small-blocks-cache}, to release the block, is added to the dynamic
environment of the current compensations stack.
@end defun


@defun compensate-malloc/page
Acquire a page of memory from @func{page-blocks-cache} and return a
pointer to it.  The appropriate invocation to @func{page-blocks-cache},
to release the block, is added to the dynamic environment of the current
compensations stack.
@end defun


@defun compensate-malloc/block @var{number-of-bytes}
Acquire a block of memory with @func{memory-block} and return a pointer
to it (@strong{not} a @code{memory-block-record}).  The appropriate
invocation to @func{memory-block}, to release the block, is added to the
dynamic environment of the current compensations stack.
@end defun


@c page
@node ffi guarded malloc
@section Guarded memory allocation


The functions described in this section are usable only when the Scheme
implementation provides guardians (Ikarus does, Ypsilon does not).

To load the library:

@example
(import (rnrs)
  (uriel ffi guarded-malloc))
@end example


@defun malloc/guarded @var{number-of-bytes}
A wrapper for @func{primitive-malloc} that:

@itemize
@item
if the allocation is successful: registers the pointer into a guardian
and returns it;

@item
if the allocation fails, raises an @code{&out-of-memory} condition.
@end itemize

The library registers a cleanup function for the guardian in the state
of the @library{uriel cleanup} library, so memory allocated with this
function is released by invoking @func{uriel-cleanup}.  @strong{Do not}
free this memory with @func{primitive-free} or any other free function.
@end defun


@c page
@node ffi sizeof
@section Sizes and limits


A set of variables is provided to allow interface libraries to be aware
of C language type sizes and limits.  To load the library:

@example
(import (rnrs)
  (uriel ffi sizeof))
@end example


@defvar sizeof-short-int
@defvarx sizeof-int
@defvarx sizeof-long
@defvarx sizeof-long-long
@defvarx sizeof-pointer
The number of bytes in the specified type.
@end defvar


@defvar valueof-char-max
@defvarx valueof-char-min
@defvarx valueof-schar-max
@defvarx valueof-schar-min
@defvarx valueof-uchar-max
@defvarx valueof-shrt-max
@defvarx valueof-shrt-min
@defvarx valueof-ushrt-max
@defvarx valueof-int-max
@defvarx valueof-int-min
@defvarx valueof-uint-max
@defvarx valueof-long-max
@defvarx valueof-long-min
@defvarx valueof-wchar-max
@defvarx valueof-ssize-max
The value of the specified constant.  For example: the value of
@code{valueof-int-max} is the C language constant @code{INT_MAX}.
@end defvar


@defvar words-bigendian
Bound to @true{} if the platform is big endian, @false{} otherwise.
Notice that this information is also available with the @rnrs{6}
function @func{native-endianness}.
@end defvar


@defvar on-32-bits-system
@defvarx on-64-bits-system
Bound to @true{} if the platform has words of 32 or 64 bits
respectively.
@end defvar


@c page
@node ffi errno
@section Error constants


The @library{uriel ffi errno} library exports one binding for each
@code{errno} numeric code, and a set of functions to convert between
numeric values and symbolic values.  It may be that not all the
constants are defined on our platform, if a symbol is not defined the
value of the corresponding variable is @false{}.  To import the library:

@example
(import (rnrs)
  (uriel ffi errno))
@end example

To convert an @code{errno} code into the corresponding error message see
the @cfunc{strerror} function.  @ref{ffi string,strerror}


@defun symbol->errno @var{symbol}
@defunx symbol->errno/or-error @var{symbol}
Attempt the conversion from an @code{errno} symbolic value to the
corresponding numeric value.  Return an integer or @false{} if the
symbol is not defined on the underlying platform.

The @code{or-error} variant raises an assertion violation if
@var{symbol} is not an @code{errno} symbolic value.
@end defun


@defun errno->symbol @var{number}
@defunx errno->symbol/or-error @var{number}
Attempt the conversion from an @code{errno} numeric value to the
corresponding symbolic value.  Return a symbol or @false{} if
@var{number} is not an @code{errno} numeric value.

The @code{or-error} variant raises an assertion violation if
@var{number} is not an @code{errno} numerc value.
@end defun


@value{PACKAGE} attempts to define the following symbols (in
row--then--column alphabetical order):

@example
E2BIG               EACCES              EADDRINUSE
EADDRNOTAVAIL       EADV                EAFNOSUPPORT
EAGAIN              EALREADY            EBADE
EBADF               EBADFD              EBADMSG
EBADR               EBADRQC             EBADSLT
EBFONT              EBUSY               ECANCELED
ECHILD              ECHRNG              ECOMM
ECONNABORTED        ECONNREFUSED        ECONNRESET
EDEADLK             EDEADLOCK           EDESTADDRREQ
EDOM                EDOTDOT             EDQUOT
EEXIST              EFAULT              EFBIG
EHOSTDOWN           EHOSTUNREACH        EIDRM
EILSEQ              EINPROGRESS         EINTR
EINVAL              EIO                 EISCONN
EISDIR              EISNAM              EKEYEXPIRED
EKEYREJECTED        EKEYREVOKED         EL2HLT
EL2NSYNC            EL3HLT              EL3RST
ELIBACC             ELIBBAD             ELIBEXEC
ELIBMAX             ELIBSCN             ELNRNG
ELOOP               EMEDIUMTYPE         EMFILE
EMLINK              EMSGSIZE            EMULTIHOP
ENAMETOOLONG        ENAVAIL             ENETDOWN
ENETRESET           ENETUNREACH         ENFILE
ENOANO              ENOBUFS             ENOCSI
ENODATA             ENODEV              ENOENT
ENOEXEC             ENOKEY              ENOLCK
ENOLINK             ENOMEDIUM           ENOMEM
ENOMSG              ENONET              ENOPKG
ENOPROTOOPT         ENOSPC              ENOSR
ENOSTR              ENOSYS              ENOTBLK
ENOTCONN            ENOTDIR             ENOTEMPTY
ENOTNAM             ENOTRECOVERABLE     ENOTSOCK
ENOTTY              ENOTUNIQ            ENXIO
EOPNOTSUPP          EOVERFLOW           EOWNERDEAD
EPERM               EPFNOSUPPORT        EPIPE
EPROTO              EPROTONOSUPPORT     EPROTOTYPE
ERANGE              EREMCHG             EREMOTE
EREMOTEIO           ERESTART            EROFS
ESHUTDOWN           ESOCKTNOSUPPORT     ESPIPE
ESRCH               ESRMNT              ESTALE
ESTRPIPE            ETIME               ETIMEDOUT
ETOOMANYREFS        ETXTBSY             EUCLEAN
EUNATCH             EUSERS              EWOULDBLOCK
EXDEV               EXFULL
@end example


@c page
@node ffi accessors
@section Low level access to memory


The @api{} described in this section is almost equal to the one provided
by Ikarus Scheme.  With all the functions the following notices about
arguments have to be considered.

@table @var
@item pointer
It must be a value that the underlying Scheme implementation uses to
represent allocated memory blocks.

@item value
It must be an exact integer compatible with the target data type.

@item offset
It must be an exact integer, a fixnum, representing the offset of a byte
into an allocated block of memory.
@end table

When adding an offset to a pointer: all the following functions
@strong{do not} scale the offset to the size of the poked or peeked
value.  Pointer arithmetics is performed with byte offsets.


@menu
* ffi accessors pokers::        Poking values.
* ffi accessors peekers::       Peeking values.
@end menu


@c page
@node ffi accessors pokers
@subsection Poking values


@macro poker{BYTENUM,BITNUM}
Set to @var{value} the \BYTENUM\ of memory located at @var{offset} from
@var{pointer}.  Only the \BITNUM\ lowermost bits of @var{value} are used
in the operation and the remaining bits are ignored.
@end macro


@c ------------------------------------------------------------

@subsubheading Poking exact integers


@deffn Procedure pointer-set-c-char! @var{pointer} @var{offset} @var{value}
@poker{single byte,8}
@end deffn


@deffn Procedure pointer-set-c-short! @var{pointer} @var{offset} @var{value}
@poker{two bytes,16}
@end deffn


@deffn Procedure pointer-set-c-int! @var{pointer} @var{offset} @var{value}
@poker{four bytes,32}
@end deffn


@deffn Procedure pointer-set-c-long! @var{pointer} @var{offset} @var{value}
On 64-bit systems: @poker{eight bytes,64}

On 32-bit systems: perform the same task as @func{pointer-set-c-int!}.
@end deffn


@c ------------------------------------------------------------

@subsubheading Poking floating point numbers


@deffn Procedure pointer-set-c-float! @var{pointer} @var{offset} @var{flonum}
Convert the Scheme floating point number @var{flonum} (represented in
Ikarus as an @ieee{} 754 double precision floating point number) to a
float (an @ieee{} 754 single precision floating point number) and store
the result in the four bytes at @var{offset} from @var{pointer}.
@end deffn


@deffn Procedure pointer-set-c-double! @var{pointer} @var{offset} @var{flonum}
Store the double precision @ieee{} 754 floating point value of the
Scheme @var{flonum} in the eight bytes at @var{offset} from
@var{pointer}.
@end deffn


@c ------------------------------------------------------------

@subsubheading Poking pointers


@deffn Procedure pointer-set-c-pointer! @var{pointer} @var{offset} @var{pointer-value}
On 64-bit systems: set the eight bytes at @var{offset} from
@var{pointer} to the 64-bit pointer @var{pointer-value}.

On 32-bit systems: set the four bytes at @var{offset} from @var{pointer}
to the 32-bit pointer @var{pointer-value}.

We have to assume that we can convert an exact integer to a pointer
value using @func{integer->pointer}.
@end deffn


@c page
@node ffi accessors peekers
@subsection Peeking values


@subsubheading Peeking exact integers


@deffn Procedure pointer-ref-c-signed-char @var{pointer} @var{offset}
Peek the single byte located at @var{offset} from @var{pointer} and
return an exact integer representing the sign--extended integer value of
that byte. The returned value is in the inclusive range @code{[-128,
127]}.
@end deffn


@deffn Procedure pointer-ref-c-unsigned-char @var{pointer} @var{offset}
Peek the single byte located at @var{offset} from @var{pointer} and
return an exact integer representing the unsigned integer value of that
byte.  The returned value is in the inclusive range @code{[0, 255]}.
@end deffn


@deffn Procedure pointer-ref-c-signed-short @var{pointer} @var{offset}
Peek two bytes at @var{offset} from @var{pointer} and return an exact
integer representing the sign--extended integer value of the sequence.
The returned value is in the inclusive range @code{[-32768, 32767]}.
@end deffn


@deffn Procedure pointer-ref-c-unsigned-short @var{pointer} @var{offset}
Peek two bytes at @var{offset} from @var{pointer} and return an exact
integer representing the unsigned integer value of the sequence.  The
resulting value is in the inclusive range @code{[0, 65535]}.
@end deffn


@deffn Procedure pointer-ref-c-signed-int @var{pointer} @var{offset}
Peek four bytes at @var{offset} from @var{pointer} and return an exact
integer in the inclusive range @code{[-2^31, 2^31-1]}.
@end deffn


@deffn Procedure pointer-ref-c-unsigned-int @var{pointer} @var{offset}
Peek four bytes at @var{offset} from @var{pointer} and return an exact
integer in the inclusive range @code{[0, 2^32-1]}.
@end deffn


@deffn Procedure pointer-ref-c-signed-long @var{pointer} @var{offset}
On 64-bit systems: peek eight bytes at @var{offset} from @var{pointer}
and return an integer in the inclusive range @code{[-2^63, 2^63-1]}.

On 32-bit systems, perform the same task as
@func{pointer-ref-c-signed-int}.
@end deffn


@deffn Procedure pointer-ref-c-unsigned-long @var{pointer} @var{offset}
On 64-bit systems: peek eight bytes at @var{offset} from @var{pointer}
and return an integer in the inclusive range @code{[0, 2^64-1]}.

On 32-bit systems: perform the same task as
@func{pointer-ref-c-unsigned-int}.
@end deffn

@c ------------------------------------------------------------

@subsubheading Peeking floating point numbers


@deffn Procedure pointer-ref-c-float @var{pointer} @var{offset}
Return the four--byte float (represented as @ieee{} 754 single precision
floating point number) stored at @var{offset} from @var{pointer}.  The
value is extended to an @ieee{} 754 double precision floating point
number that Ikarus uses to represent inexact numbers.
@end deffn


@deffn Procedure pointer-ref-c-double @var{pointer} @var{offset}
Return the eight--byte float (represented as @ieee{} 754 double
precision floating point number) stored at @var{offset} from
@var{pointer}.
@end deffn

@c ------------------------------------------------------------

@subsubheading Peeking pointers


@deffn Procedure pointer-ref-c-pointer @var{pointer} @var{offset}
Return the a value representing the pointer stored at @var{offset} from
@var{pointer}.  The size of the pointer (also the number of bytes loaded)
depends on the architecture: it is 4 bytes on 32-bit systems and 8 bytes
on 64-bit systems.

We have to assume that the returned value can be converted to an exact
integer with @func{pointer->integer}.
@end deffn


@c page
@node ffi string
@section String functions


@defun strlen @var{pointer}
Return the number of characters in the C string referenced by
@var{pointer}.
@end defun


@defun strerror @var{errno-numeric-value}
Return the string message coresponding to the
@code{errno-numeric-value}.
@end defun


@defun string->cstring @var{string}
@defunx string->cstring/compensated @var{string}
@defunx string-or-symbol->cstring @var{string}
@defunx string-or-symbol->cstring/compensated @var{string}
@func{string->cstring} builds a new C string representing the Scheme
@var{string} and returns a pointer value referencing it; memory is
allocated using @func{malloc}.  The conversion is performed using
@func{string->utf8}.

@func{string-or-symbol->cstring} is like @func{string->cstring} but
accepts also symbols as arguments, converting them to string internally.

@func{string->cstring/compensated} is like @func{string->cstring} but
allocates the memory block using @func{compensate-malloc/block}.

@func{string-or-symbol->cstring/compensated} is like
@func{string-or-symbol->cstring} but allocates the memory block using
@func{compensate-malloc/block}.
@end defun


@defun cstring->string @var{cstring}
Build a new Scheme string representing the @var{cstring}.  The
conversion is performed using a @code{s8} bytevector.
@end defun


@c page
@node ffi headers
@section Inspecting foreign header files





@c page
@node ffi conditions
@section Condition types


@menu
* ffi conditions nomem::        Out of memory errors.
* ffi conditions errno::        Foreign system function errors.
@end menu


@c page
@node ffi conditions nomem
@subsection Out of memory errors


@deftp Condition {&out-of-memory}
Type of condition objects that represent a memory allocation error.
@end deftp


@deffn {Condition Constructor} make-out-of-memory-condition @var{number-of-bytes}
@deffnx {Condition Predicate} out-of-memory-condition? @var{object}
@deffnx {Field Getter} out-of-memory-requested-number-of-bytes @var{object}
Functions to handle out of memory condition objects.
@end deffn


Example:

@example
(define (malloc size)
  (let ((p (primitive-malloc size)))
    (when (pointer-null? p)
      (raise (condition (make-who-condition 'malloc)
                        (make-message-condition "out of memory")
                        (make-out-of-memory-condition size))))
    p))
@end example


@defun raise-out-of-memory @var{who} @var{number-of-bytes}
Raise a non--continuable exception representing a memory allocation
failure.  The following form:

@example
(raise-out-of-memory 'malloc 4096)
@end example

@noindent
is equivalent to:

@example
(raise (condition (make-who-condition 'malloc)
                  (make-message-condition "out of memory")
                  (make-out-of-memory-condition 4096)))
@end example
@end defun


@c page
@node ffi conditions errno
@subsection Foreign system function errors


@deftp Condition {&errno}
Type of condition objects that represent an error in a foreign function
signaled with the @code{errno} variable.
@end deftp


@deffn {Condition Constructor} make-errno-condition @var{errno-numeric-value}
@deffnx {Condition Predicate} errno-condition? @var{object}
@deffnx {Field Getter} errno-numeric-value @var{object}
@deffnx {Field Getter} errno-symbolic-value @var{object}
Functions to handle foreign system error condition objects.
@end deffn


Fake example:

@example
(let ((errno ---))
  (raise (condition (make-who-condition 'read)
                    (make-message-condition (strerror errno))
                    (make-errno-condition errno))))
@end example


@defun raise-errno-error @var{who} @var{errno-numeric-value} @var{irritants}
Raise a non--continuable exception representing a foreign function
system error signaled through the @code{errno} variable.  The following
form:

@example
(let ((errno ---)
      (pathname ---))
  (raise-errno-error 'write errno pathname))
@end example

@noindent
is equivalent to:

@example
(raise
  (condition (make-who-condition 'write)
             (make-message-condition (strerror errno))
             (make-errno-condition errno)
             (make-irritants-condition pathname)))
@end example
@end defun


@c page
@node getenv
@chapter Getting environment variables


This chapter describes an interface to the @cfunc{getenv} system
function used to retrieve the current value of system environment
variables.  It is meant to provide basic access to the environment for
debugging and test suites.  To load the library:

@example
(import (rnrs)
  (uriel getenv))
@end example


@defun getenv @var{varname}
Return the current value of the environment variable @var{varname}, as a
string.  @var{varname} must be a string.  If the variable is not set:
the return value if @false{}.  If the variable is set to the empty
string: the return value is the empty string.
@end defun


@c page
@node Package License
@appendix @gnu{} General Public License

@c The GNU General Public License.
@center Version 3, 29 June 2007

@c This file is intended to be included within another document,
@c hence no sectioning command or @node.

@display
Copyright @copyright{} 2007 Free Software Foundation, Inc. @url{http://fsf.org/}

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.
@end display

@heading Preamble

The GNU General Public License is a free, copyleft license for
software and other kinds of works.

The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom
to share and change all versions of a program---to make sure it remains
free software for all its users.  We, the Free Software Foundation,
use the GNU General Public License for most of our software; it
applies also to any other work released this way by its authors.  You
can apply it to your programs, too.

When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the
software, or if you modify it: responsibilities to respect the freedom
of others.

For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too,
receive or can get the source code.  And you must show them these
terms so they know their rights.

Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users' freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those
domains in future versions of the GPL, as needed to protect the
freedom of users.

Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish
to avoid the special danger that patents applied to a free program
could make it effectively proprietary.  To prevent this, the GPL
assures that patents cannot be used to render the program non-free.

The precise terms and conditions for copying, distribution and
modification follow.

@heading TERMS AND CONDITIONS

@enumerate 0
@item Definitions.

``This License'' refers to version 3 of the GNU General Public License.

``Copyright'' also means copyright-like laws that apply to other kinds
of works, such as semiconductor masks.

``The Program'' refers to any copyrightable work licensed under this
License.  Each licensee is addressed as ``you''.  ``Licensees'' and
``recipients'' may be individuals or organizations.

To ``modify'' a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of
an exact copy.  The resulting work is called a ``modified version'' of
the earlier work or a work ``based on'' the earlier work.

A ``covered work'' means either the unmodified Program or a work based
on the Program.

To ``propagate'' a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

To ``convey'' a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user
through a computer network, with no transfer of a copy, is not
conveying.

An interactive user interface displays ``Appropriate Legal Notices'' to
the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

@item Source Code.

The ``source code'' for a work means the preferred form of the work for
making modifications to it.  ``Object code'' means any non-source form
of a work.

A ``Standard Interface'' means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

The ``System Libraries'' of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
``Major Component'', in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

The ``Corresponding Source'' for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

The Corresponding Source need not include anything that users can
regenerate automatically from other parts of the Corresponding Source.

The Corresponding Source for a work in source code form is that same
work.

@item Basic Permissions.

All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

You may make, run and propagate covered works that you do not convey,
without conditions so long as your license otherwise remains in force.
You may convey covered works to others for the sole purpose of having
them make modifications exclusively for you, or provide you with
facilities for running those works, provided that you comply with the
terms of this License in conveying all material for which you do not
control copyright.  Those thus making or running the covered works for
you must do so exclusively on your behalf, under your direction and
control, on terms that prohibit them from making any copies of your
copyrighted material outside their relationship with you.

Conveying under any other circumstances is permitted solely under the
conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

@item Protecting Users' Legal Rights From Anti-Circumvention Law.

No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such
circumvention is effected by exercising rights under this License with
respect to the covered work, and you disclaim any intention to limit
operation or modification of the work as a means of enforcing, against
the work's users, your or third parties' legal rights to forbid
circumvention of technological measures.

@item Conveying Verbatim Copies.

You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

@item Conveying Modified Source Versions.

You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these
conditions:

@enumerate a
@item
The work must carry prominent notices stating that you modified it,
and giving a relevant date.

@item
The work must carry prominent notices stating that it is released
under this License and any conditions added under section 7.  This
requirement modifies the requirement in section 4 to ``keep intact all
notices''.

@item
You must license the entire work, as a whole, under this License to
anyone who comes into possession of a copy.  This License will
therefore apply, along with any applicable section 7 additional terms,
to the whole of the work, and all its parts, regardless of how they
are packaged.  This License gives no permission to license the work in
any other way, but it does not invalidate such permission if you have
separately received it.

@item
If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your work
need not make them do so.
@end enumerate

A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
``aggregate'' if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

@item  Conveying Non-Source Forms.

You may convey a covered work in object code form under the terms of
sections 4 and 5, provided that you also convey the machine-readable
Corresponding Source under the terms of this License, in one of these
ways:

@enumerate a
@item
Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium customarily
used for software interchange.

@item
Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a written
offer, valid for at least three years and valid for as long as you
offer spare parts or customer support for that product model, to give
anyone who possesses the object code either (1) a copy of the
Corresponding Source for all the software in the product that is
covered by this License, on a durable physical medium customarily used
for software interchange, for a price no more than your reasonable
cost of physically performing this conveying of source, or (2) access
to copy the Corresponding Source from a network server at no charge.

@item
Convey individual copies of the object code with a copy of the written
offer to provide the Corresponding Source.  This alternative is
allowed only occasionally and noncommercially, and only if you
received the object code with such an offer, in accord with subsection
6b.

@item
Convey the object code by offering access from a designated place
(gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge.  You need not require recipients to copy the
Corresponding Source along with the object code.  If the place to copy
the object code is a network server, the Corresponding Source may be
on a different server (operated by you or a third party) that supports
equivalent copying facilities, provided you maintain clear directions
next to the object code saying where to find the Corresponding Source.
Regardless of what server hosts the Corresponding Source, you remain
obligated to ensure that it is available for as long as needed to
satisfy these requirements.

@item
Convey the object code using peer-to-peer transmission, provided you
inform other peers where the object code and Corresponding Source of
the work are being offered to the general public at no charge under
subsection 6d.

@end enumerate

A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

A ``User Product'' is either (1) a ``consumer product'', which means any
tangible personal property which is normally used for personal,
family, or household purposes, or (2) anything designed or sold for
incorporation into a dwelling.  In determining whether a product is a
consumer product, doubtful cases shall be resolved in favor of
coverage.  For a particular product received by a particular user,
``normally used'' refers to a typical or common use of that class of
product, regardless of the status of the particular user or of the way
in which the particular user actually uses, or expects or is expected
to use, the product.  A product is a consumer product regardless of
whether the product has substantial commercial, industrial or
non-consumer uses, unless such uses represent the only significant
mode of use of the product.

``Installation Information'' for a User Product means any methods,
procedures, authorization keys, or other information required to
install and execute modified versions of a covered work in that User
Product from a modified version of its Corresponding Source.  The
information must suffice to ensure that the continued functioning of
the modified object code is in no case prevented or interfered with
solely because modification has been made.

If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or
updates for a work that has been modified or installed by the
recipient, or for the User Product in which it has been modified or
installed.  Access to a network may be denied when the modification
itself materially and adversely affects the operation of the network
or violates the rules and protocols for communication across the
network.

Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

@item Additional Terms.

``Additional permissions'' are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders
of that material) supplement the terms of this License with terms:

@enumerate a
@item
Disclaiming warranty or limiting liability differently from the terms
of sections 15 and 16 of this License; or

@item
Requiring preservation of specified reasonable legal notices or author
attributions in that material or in the Appropriate Legal Notices
displayed by works containing it; or

@item
Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or

@item
Limiting the use for publicity purposes of names of licensors or
authors of the material; or

@item
Declining to grant rights under trademark law for use of some trade
names, trademarks, or service marks; or

@item
Requiring indemnification of licensors and authors of that material by
anyone who conveys the material (or modified versions of it) with
contractual assumptions of liability to the recipient, for any
liability that these contractual assumptions directly impose on those
licensors and authors.
@end enumerate

All other non-permissive additional terms are considered ``further
restrictions'' within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions; the
above requirements apply either way.

@item Termination.

You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

@item Acceptance Not Required for Having Copies.

You are not required to accept this License in order to receive or run
a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

@item Automatic Licensing of Downstream Recipients.

Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

An ``entity transaction'' is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

@item Patents.

A ``contributor'' is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's ``contributor version''.

A contributor's ``essential patent claims'' are all patent claims owned
or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, ``control'' includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

In the following three paragraphs, a ``patent license'' is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To ``grant'' such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  ``Knowingly relying'' means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

A patent license is ``discriminatory'' if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on
the non-exercise of one or more of the rights that are specifically
granted under this License.  You may not convey a covered work if you
are a party to an arrangement with a third party that is in the
business of distributing software, under which you make payment to the
third party based on the extent of your activity of conveying the
work, and under which the third party grants, to any of the parties
who would receive the covered work from you, a discriminatory patent
license (a) in connection with copies of the covered work conveyed by
you (or copies made from those copies), or (b) primarily for and in
connection with specific products or compilations that contain the
covered work, unless you entered into that arrangement, or that patent
license was granted, prior to 28 March 2007.

Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

@item No Surrender of Others' Freedom.

If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey
a covered work so as to satisfy simultaneously your obligations under
this License and any other pertinent obligations, then as a
consequence you may not convey it at all.  For example, if you agree
to terms that obligate you to collect a royalty for further conveying
from those to whom you convey the Program, the only way you could
satisfy both those terms and this License would be to refrain entirely
from conveying the Program.

@item Use with the GNU Affero General Public License.

Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

@item Revised Versions of this License.

The Free Software Foundation may publish revised and/or new versions
of the GNU General Public License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies that a certain numbered version of the GNU General Public
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that numbered version or
of any later version published by the Free Software Foundation.  If
the Program does not specify a version number of the GNU General
Public License, you may choose any version ever published by the Free
Software Foundation.

If the Program specifies that a proxy can decide which future versions
of the GNU General Public License can be used, that proxy's public
statement of acceptance of a version permanently authorizes you to
choose that version for the Program.

Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

@item Disclaimer of Warranty.

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ``AS IS'' WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
CORRECTION.

@item Limitation of Liability.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

@item Interpretation of Sections 15 and 16.

If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

@end enumerate

@heading END OF TERMS AND CONDITIONS

@heading How to Apply These Terms to Your New Programs

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the ``copyright'' line and a pointer to where the full notice is found.

@smallexample
@var{one line to give the program's name and a brief idea of what it does.}
Copyright (C) @var{year} @var{name of author}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see @url{http://www.gnu.org/licenses/}.
@end smallexample

Also add information on how to contact you by electronic and paper mail.

If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

@smallexample
@var{program} Copyright (C) @var{year} @var{name of author}
This program comes with ABSOLUTELY NO WARRANTY; for details type @samp{show w}.
This is free software, and you are welcome to redistribute it
under certain conditions; type @samp{show c} for details.
@end smallexample

The hypothetical commands @samp{show w} and @samp{show c} should show
the appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an ``about box''.

You should also get your employer (if you work as a programmer) or school,
if any, to sign a ``copyright disclaimer'' for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
@url{http://www.gnu.org/licenses/}.

The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use
the GNU Lesser General Public License instead of this License.  But
first, please read @url{http://www.gnu.org/philosophy/why-not-lgpl.html}.


@c page
@node Documentation License
@appendix GNU Free Documentation License

@cindex FDL, GNU Free Documentation License
@center Version 1.1, March 2000

@display
Copyright @copyright{} 2000 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@enumerate 0
@item
PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document @dfn{free} in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

@item
APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The ``Document'', below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as ``you''.

A ``Modified Version'' of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A ``Secondary Section'' is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The ``Invariant Sections'' are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The ``Cover Texts'' are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A ``Transparent'' copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not ``Transparent'' is called ``Opaque''.

Examples of suitable formats for Transparent copies include plain
@sc{ascii} without markup, Texinfo input format, La@TeX{} input format,
@acronym{SGML} or @acronym{XML} using a publicly available
@acronym{DTD}, and standard-conforming simple @acronym{HTML} designed
for human modification.  Opaque formats include PostScript,
@acronym{PDF}, proprietary formats that can be read and edited only by
proprietary word processors, @acronym{SGML} or @acronym{XML} for which
the @acronym{DTD} and/or processing tools are not generally available,
and the machine-generated @acronym{HTML} produced by some word
processors for output purposes only.

The ``Title Page'' means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

@item
VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

@item
COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.

@item
MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

@enumerate A
@item
Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

@item
List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).

@item
State on the Title page the name of the publisher of the
Modified Version, as the publisher.

@item
Preserve all the copyright notices of the Document.

@item
Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

@item
Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

@item
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.

@item
Include an unaltered copy of this License.

@item
Preserve the section entitled ``History'', and its title, and add to
it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section entitled ``History'' in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

@item
Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the ``History'' section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

@item
In any section entitled ``Acknowledgments'' or ``Dedications'',
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgments
and/or dedications given therein.

@item
Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

@item
Delete any section entitled ``Endorsements''.  Such a section
may not be included in the Modified Version.

@item
Do not retitle any existing section as ``Endorsements''
or to conflict in title with any Invariant Section.
@end enumerate

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties---for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

@item
COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled ``History''
in the various original documents, forming one section entitled
``History''; likewise combine any sections entitled ``Acknowledgments'',
and any sections entitled ``Dedications''.  You must delete all sections
entitled ``Endorsements.''

@item
COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.

@item
AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an ``aggregate'', and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.

@item
TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.

@item
TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
@uref{http://www.gnu.org/copyleft/}.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
@end enumerate

@page
@appendixsubsec ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@smallexample
@group
  Copyright (C)  @var{year}  @var{your name}.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.1
  or any later version published by the Free Software Foundation;
  with the Invariant Sections being @var{list their titles}, with the
  Front-Cover Texts being @var{list}, and with the Back-Cover Texts being @var{list}.
  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
@end group
@end smallexample

If you have no Invariant Sections, write ``with no Invariant Sections''
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write ``no Front-Cover Texts'' instead of
``Front-Cover Texts being @var{list}''; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.


@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
