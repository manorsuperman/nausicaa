# Makefile.end --
#
# Library of rules.

#page
## ------------------------------------------------------------
## Documentation.
## ------------------------------------------------------------

doc_SRCDIR		= $(srcdir)/doc
doc_BUILDDIR		= $(srcdir)/"=build"

doc_SOURCES		= $(wildcard $(doc_SRCDIR)/*.texi)
doc_TARGETS		= $(foreach f,$(doc_SOURCES:.texi=.info),\
			  $(addprefix $(doc_BUILDDIR)/,$(notdir $(f))))

doc_INSTLST		= $(doc_TARGETS)
doc_INSTDIR		= $(infodir)

.PHONY: doc doc-clean doc-install

doc: doc-builddir $(doc_TARGETS)

doc-clean:
	-$(RM) $(doc_TARGETS)

doc-builddir:
	-@test -d $(doc_BUILDDIR) || $(MKDIR) $(doc_BUILDDIR)

$(doc_TARGETS): $(doc_BUILDDIR)/%.info : $(doc_SRCDIR)/%.texi $(doc_BUILDDIR)/version.texiinc
	$(MAKEINFO) $(MAKEINFO_FLAGS) -o $(@) $(<)

$(doc_BUILDDIR)/version.texiinc: Makefile
	printf '@macro version{}\n%s\n@end macro' $(package_VERSION) >$(@)

doc-install:
	$(INSTALL_DIR) $(DESTDIR)$(doc_INSTDIR)
	$(INSTALL_DATA) $(doc_INSTLST) $(DESTDIR)$(doc_INSTDIR)

doc-uninstall:
	-@$(RM) $(addprefix $(DESTDIR)$(doc_INSTDIR)/,$(foreach f,$(doc_INSTLST),$(notdir $(f))))
	-@$(RMDIR) $(DESTDIR)$(doc_INSTDIR)

## ------------------------------------------------------------

all:		doc
clean:		doc-clean
install:	doc-install
uninstall:	doc-uninstall

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Binary distribution: common variables.
## ------------------------------------------------------------

bindist_NAME		= $(PACKAGE)
bindist_VERSION		= $(VERSION)
bindist_ARCH		= noarch

# This is  the file name  of the Bindist  package.  Notice
# that there is no directory part.
bindist_PACKAGE_EXT	= .tar.bz2
bindist_PACKAGE_NAME	= $(package_PREFIX)$(bindist_PACKAGE_EXT)

# This  is the  root directory  of the  build  directory for
# bindist packages.
bindist_top_BUILDDIR	= $(TMPDIR)/$(PKG_ID)

# The flags to hand to "tar" when building the package.
bindist_TAR_FLAGS	= --create --bzip2 --verbose

## ------------------------------------------------------------

.PHONY: bindist-clean

bindist-clean:
	-test -f $(bindist_PACKAGE)       && $(RM) $(bindist_PACKAGE)
	-test -f $(local_bindist_PACKAGE) && $(RM) $(local_bindist_PACKAGE)
	$(SUDO) $(RM) $(bindist_top_BUILDDIR)

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Binary distribution: standard package build.
## ------------------------------------------------------------

# This is the top build directory that will be used to build
# the package.
bindist_BUILDDIR	= $(bindist_top_BUILDDIR)

# This is the full pathname of the produced package.
bindist_PACKAGE		= $(TMPDIR)/$(bindist_PACKAGE_NAME)

## ------------------------------------------------------------

.PHONY: bindist

bindist: bindist-clean
	$(MAKE) install DESTDIR=$(bindist_BUILDDIR)
	cd $(bindist_BUILDDIR); \
	$(TAR) $(bindist_TAR_FLAGS) --file=$(bindist_PACKAGE) .

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Binary distribution: local package build.
## ------------------------------------------------------------

# This is the top build directory that will be used to build
# the package.
local_bindist_BUILDDIR	= $(bindist_top_BUILDDIR)

# This is the full pathname of the produced package.
local_bindist_PACKAGE	= $(TMPDIR)/$(bindist_PACKAGE_NAME)

## ------------------------------------------------------------

.PHONY: local-bindist

local-bindist: bindist-clean
	$(MAKE) install DESTDIR=$(local_bindist_BUILDDIR)
	cd $(local_bindist_BUILDDIR)/$(prefix); \
	$(TAR) $(bindist_TAR_FLAGS) --file=$(local_bindist_PACKAGE) .

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Slackware packages: common variables.
## ------------------------------------------------------------

# This is  the file name  of the Slackware  package.  Notice
# that there is no directory part.
slack_PACKAGE_NAME	= $(package_PREFIX).tgz

slack_PACKAGE_PREFIX	= $(package_PREFIX)

# This  is the  root directory  of the  build  directory for
# Slackware packages.
slack_top_BUILDDIR	= $(TMPDIR)/$(PKG_ID)

## ------------------------------------------------------------

slack_MAKEPKG		= /sbin/makepkg
slack_INSTALLPKG	= /sbin/installpkg
slack_REMOVEPKG		= /sbin/removepkg
slack_UPGRADEPKG	= /sbin/upgradepkg --verbose --reinstall

# This is to process  the "slack-desc.in" file which must be
# in the "meta/slackware" subdirectory of the package source
# tree.
slack_SED		= $(SED) \
	-e "s|@PACKAGE@|$(PACKAGE)|g"	\
	-e "s|@VERSION@|$(VERSION)|g"

## ------------------------------------------------------------

.PHONY: slackware-clean slackware-aux slackware-clean-buildir slackware-clean-package

slackware-clean: slackware-clean-buildir slackware-clean-package

slackware-clean-buildir:
	-$(SUDO) $(RM) $(slack_top_BUILDDIR)

slackware-clean-package:
	-test -f $(slack_PACKAGE)       && $(SUDO) $(RM) $(slack_PACKAGE)
	-test -f $(local_slack_PACKAGE) && $(SUDO) $(RM) $(local_slack_PACKAGE)

slackware-aux:

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Slackware packages: standard package build.
## ------------------------------------------------------------

# A   *standard*  Slackware  package   is  one   that  holds
# directories with pathnames  relative to the root directory
# "/"  and  that is  registered  in  the standard  Slackware
# registry: "/var/log/packages".

# This is the top build directory that will be used to build
# the package.
slack_BUILDDIR		= $(slack_top_BUILDDIR)

# This is the full pathname of the produced package.
slack_PACKAGE		= $(TMPDIR)/$(slack_PACKAGE_NAME)

# This is the pathname of the Slackware packages registry.
slack_REGISTRY		= /var/log/packages

# Try  to  read from  the  system  the  name of  an  already
# installed package.  It is used to upgrade.
slack_INSTALLED_PACKAGE	:= \
	$(firstword $(notdir $(wildcard $(slack_REGISTRY)/$(package_NAME)-*)))

## ------------------------------------------------------------

.PHONY: slackware slackware-install slackware-remove slackware-upgrade

slackware: slackware-clean
	$(MAKE) install DESTDIR=$(slack_BUILDDIR)
	$(INSTALL_DIR) $(slack_BUILDDIR)/install
	$(slack_SED) \
		< meta/slackware/slack-desc.in \
		> $(slack_BUILDDIR)/install/slack-desc
	cd $(slack_BUILDDIR); \
	$(SUDO) $(slack_MAKEPKG) --chown y $(slack_PACKAGE)

slackware-install:
	cd $(TMPDIR); \
	$(SUDO) $(slack_INSTALLPKG) $(slack_PACKAGE_NAME)

slackware-remove:
	cd $(TMPDIR); \
	$(SUDO) $(slack_REMOVEPKG) $(slack_PACKAGE_PREFIX)

slackware-upgrade:
	cd $(TMPDIR); \
	$(SUDO) $(slack_UPGRADEPKG) $(slack_INSTALLED_PACKAGE)%$(slack_PACKAGE_NAME)

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Slackware packages: local package build.
## ------------------------------------------------------------

# A *local* Slackware package  is one that holds directories
# with  pathnames   relative  to  the   installation  prefix
# directory "$(prefix)" (for  example "/usr/local") and that
# is   registered    in   a   local    Slackware   registry:
#
#   "$(prefix)/var/log/packages"
#
# for example: "/usr/local/var/log/packages".

# This is the top build directory that will be used to build
# the package.
local_slack_BUILDDIR	= $(slack_top_BUILDDIR)/$(prefix)

# This is the full pathname of the produced package.
local_slack_PACKAGE	= $(TMPDIR)/$(slack_PACKAGE_NAME)

# This is the pathname of the Slackware packages registry.
local_slack_REGISTRY	= $(prefix)/var/log/packages

# Try  to  read from  the  system  the  name of  an  already
# installed package.  It is used to upgrade.
local_slack_INSTALLED_PACKAGE	:= \
	$(firstword $(notdir $(wildcard $(local_slack_REGISTRY)/$(package_NAME)-*)))

# Adding "/sbin" to the  'PATH' allows the Slackware scripts
# to  find  themselves.  Adding  "ROOT"  to the  environment
# signals to the Slackware scripts that they have to use the
# local registry.
local_slack_ENV		= PATH=/sbin:$(PATH) ROOT=$(prefix)

## ------------------------------------------------------------

.PHONY: local-slackware local-slackware-install local-slackware-upgrade

local-slackware: slackware-clean slackware-aux
	$(MAKE) install DESTDIR=$(slack_BUILDDIR)
	$(INSTALL_DIR) $(local_slack_BUILDDIR)/install
	$(slack_SED)						\
		< meta/slackware/slack-desc.in			\
		> $(local_slack_BUILDDIR)/install/slack-desc
	cd $(local_slack_BUILDDIR); \
	$(local_slack_ENV) $(SUDO) $(slack_MAKEPKG) --chown y $(local_slack_PACKAGE)

local-slackware-install:
	cd $(TMPDIR); \
	$(local_slack_ENV) $(SUDO) $(slack_INSTALLPKG) $(slack_PACKAGE_NAME)

local-slackware-remove:
	$(local_slack_ENV) $(SUDO) $(slack_REMOVEPKG) $(slack_PACKAGE_PREFIX)

local-slackware-upgrade:
	cd $(TMPDIR); \
	$(local_slack_ENV) $(SUDO) $(slack_UPGRADEPKG) \
		$(local_slack_INSTALLED_PACKAGE)%$(slack_PACKAGE_NAME)

## ------------------------------------------------------------

.PHONY: abi abu

abi: all local-slackware local-slackware-install clean
abu: all local-slackware local-slackware-upgrade clean

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## End.
## ------------------------------------------------------------

.PHONY: echo-variable echo-list-variable

# Use this to echo a variable to stdout; example:
# 
#	$ make echo-variable VARIABLE=slack_PACKAGE_NAME
#
echo-variable:
	@echo $($(VARIABLE))

# Use this to  echo a variable to stdout  interpreting it as
# list of strings; example:
# 
#	$ make echo-list-variable VARIABLE=FILES
#
echo-list-variable:
	@$(foreach f,$($(VARIABLE)),echo $(f);)



### end of file
# Local Variables:
# mode: makefile
# fill-column: 60
# End:
