# Makefile.end --
#
# Library of rules.

#page
## ------------------------------------------------------------
## Installing source files.
## ------------------------------------------------------------

# Find the list of directories under "libraries".
sls_FIND_DIRS		= cd $(sls_SRCDIR) ; $(FIND) . -type d

# Find the reversed list of directories under "libraries".
sls_FIND_DIRS_REV	= cd $(sls_SRCDIR); \
		ls -1d $(DIRECTORIES) | $(SORT) --reverse

# Find  all  the source  files.   Only  the  .sls files  are
# considered for compilation and installation.
sls_FIND_FILES		= cd $(sls_SRCDIR) ; $(FIND) . -type f	\
			-and -name '*.sls'		\
			-and -print

## ------------------------------------------------------------

sls_SRCDIR		= $(srcdir)/libraries
sls_BUILDDIR		= $(builddir)/fasl.d

# We sort  the list of  directories so that  when installing
# them  we can create  the parents  first (useless  with the
# "install"  program from GNU  Coreutils, but  we do  it the
# same).
sls_DIRECTORIES			= $(sort $(shell $(sls_FIND_DIRS)))

# The reversed  list of  directories allows us  to uninstall
# the children first: the children directories have a longer
# pathname.
sls_REVERSED_DIRECTORIES	= $(shell $(sls_FIND_DIRS_REV))

sls_SOURCES			= $(shell $(sls_FIND_FILES))
sls_INSTLST			= $(sls_SOURCES)
sls_INSTDIR			= $(ikarus_PKGLIBDIR)

.PHONY: sls-install sls-uninstall

sls-install:
	$(INSTALL_DIR) $(foreach d,$(sls_DIRECTORIES),$(DESTDIR)$(sls_INSTDIR)/$(d))
	cd $(sls_SRCDIR); $(foreach f,$(sls_SOURCES),\
		$(INSTALL_DATA) $(f) $(DESTDIR)$(sls_INSTDIR)/$(dir $(f));)

sls-uninstall:
	-@$(RM) $(addprefix $(DESTDIR)$(sls_INSTDIR)/,$(FILES))
	-@$(RMDIR) $(addprefix $(DESTDIR)$(sls_INSTDIR)/,$(REVERSED_DIRECTORIES))

## ------------------------------------------------------------

install:		sls-install
uninstall:		sls-uninstall

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Test compiling of source files.
## ------------------------------------------------------------

sls_FASL_EXTENSION	= .ikarus-fasl

# Find all the currently existent FASL files.
sls_FIND_FASL_SRCDIR	= \
	cd $(sls_SRCDIR) ; \
	$(FIND) . -type f -and -name "*$(sls_FASL_EXTENSION)" -and -print
sls_FIND_FASL_BUILDDIR	= \
	cd $(sls_BUILDDIR) ; \
	$(FIND) . -type f -and -name "*$(sls_FASL_EXTENSION)" -and -print

sls_COMPILE_SCRIPT	= compile-all.sps
sls_COMPILE_ENV		= IKARUS_LIBRARY_PATH=$(sls_SRCDIR)
sls_COMPILE_COMMAND	= $(IKARUS) --compile-dependencies
sls_COMPILE_RUN		= $(sls_COMPILE_ENV) $(sls_COMPILE_COMMAND) $(sls_COMPILE_SCRIPT)

## ------------------------------------------------------------

sls_FASL_FILES			= $(shell $(sls_FIND_FASL_SRCDIR))
sls_TARGETS			= $(shell $(sls_FIND_FASL_BUILDDIR))

## ------------------------------------------------------------

.PHONY: compile compile-clean compile-clean-fasl

## Notice  that,  by default,  GNU  tar  preserves the  file
## modification times  so the FASL times will  be newer than
## the  corresponding  .sls   times.
##
## When these files are  installed loading will work fine if
## we give  the appropriate preserve flags  to the "install"
## program.
compile: $(sls_BUILDDIR)
	cd $(sls_SRCDIR) ; test -f $(sls_COMPILE_SCRIPT) && $(sls_COMPILE_RUN)
	$(sls_FIND_FASL_SRCDIR) | \
	$(TAR) --create  --file=- --files-from=- | \
	$(TAR) --directory=$(PWD)/$(sls_BUILDDIR) --extract --verbose --file=-
	$(MAKE) sls-clean-fasl

$(sls_BUILDDIR):
	test -d $(sls_BUILDDIR) || $(MKDIR) $(sls_BUILDDIR)

compile-clean: compile-clean-fasl
	-cd $(sls_BUILDDIR); $(RM) *

compile-clean-fasl:
	-cd $(sls_SRCDIR); $(RM) $(sls_FASL_FILES)

# compile-install:
# 	cd $(sls_BUILDDIR); $(foreach f,$(sls_TARGETS),\
# 		$(INSTALL_DATA) $(f) $(DESTDIR)$(sls_INSTDIR)/$(dir $(f));)

# compile-uninstall:
# 	cd $(sls_BUILDDIR); $(foreach f,$(sls_TARGETS),\
# 		$(INSTALL_DATA) $(f) $(DESTDIR)$(sls_INSTDIR)/$(dir $(f));)

## ------------------------------------------------------------

clean:		compile-clean

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Tests.
## ------------------------------------------------------------

nau_test_SRCDIR		= $(srcdir)/tests
nau_test_FILES		= $(wildcard $(nau_test_SRCDIR)/test-*.sls)

nau_test_ENV		= IKARUS_LIBRARY_PATH=$(srcdir)/libraries
nau_test_RUN		= $(nau_test_ENV) $(SCHEME_SCRIPT)

.PHONY: tests test check

tests test check:
	$(foreach f,$(nau_test_FILES),$(nau_test_RUN) $(f);)

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Documentation: texinfo format.
## ------------------------------------------------------------

# If  is allright  if the  package has  no  documentation in
# Texinfo format.   The rules below will take  care of doing
# nothing if no .texi files are found.

doc_texinfo_SRCDIR	= $(srcdir)/doc
doc_texinfo_BUILDDIR	= $(builddir)/doc-texinfo.d

doc_texinfo_SOURCES	= $(wildcard $(doc_texinfo_SRCDIR)/*.texi)
doc_texinfo_TARGETS	= $(foreach f,$(doc_texinfo_SOURCES:.texi=.info),\
			  $(addprefix $(doc_texinfo_BUILDDIR)/,$(notdir $(f))))

doc_texinfo_INSTLST	= $(doc_texinfo_TARGETS)
doc_texinfo_INSTDIR	= $(pkginfodir)

.PHONY: doc-texinfo doc-texinfo-clean doc-texinfo-install

doc-texinfo: $(doc_texinfo_TARGETS)

doc-texinfo-clean:
	-$(RM) $(doc_texinfo_TARGETS)

doc-texinfo-builddir:
	-@test -d $(doc_texinfo_BUILDDIR) || $(MKDIR) $(doc_texinfo_BUILDDIR)

$(doc_texinfo_TARGETS): $(doc_texinfo_BUILDDIR)/%.info : $(doc_texinfo_SRCDIR)/%.texi
	$(MAKE) doc-texinfo-builddir
	printf '@macro version{}\n%s\n@end macro' $(PACKAGE_VERSION) >$(doc_texinfo_BUILDDIR)/version.texiinc
	$(MAKEINFO) $(MAKEINFO_FLAGS) -o $(@) $(<)

doc-texinfo-install:
ifneq ($(strip $(wildcard $(doc_texinfo_INSTLST))),)
	$(INSTALL_DIR) $(DESTDIR)$(doc_texinfo_INSTDIR)
	$(INSTALL_DATA) $(doc_texinfo_INSTLST) $(DESTDIR)$(doc_texinfo_INSTDIR)
endif

doc-texinfo-uninstall:
ifneq ($(strip $(wildcard $(doc_texinfo_INSTLST))),)
	-@$(RM) $(addprefix $(DESTDIR)$(doc_texinfo_INSTDIR)/,$(foreach f,$(doc_texinfo_INSTLST),$(notdir $(f))))
	-@$(RMDIR) $(DESTDIR)$(doc_texinfo_INSTDIR)
endif

## ------------------------------------------------------------

doc:		doc-texinfo
doc-clean:	doc-texinfo-clean
doc-install:	doc-texinfo-install
doc-uninstall:	doc-texinfo-uninstall

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Binary distribution: common variables.
## ------------------------------------------------------------

bindist_PACKAGE_EXTENSION	= .tar.bz2

# This is the file  name of the binary distribution tarball.
# Notice that there is no directory part.
bindist_PACKAGE_NAME	= $(package_PREFIX)$(bindist_PACKAGE_EXTENSION)

# This is  the root directory for  temporary installation of
# files
bindist_PACKAGE_TOP_BUILDDIR	= $(TMPDIR)/$(PKG_ID)

# This is where the produced tarball will be finally stored.
bindist_BUILDDIR		= $(PWD)/$(builddir)/bindist.d

bindist_TARBALL_PATHNAME	= $(bindist_BUILDDIR)/$(bindist_PACKAGE_NAME)

# The flags to hand to "tar" when building the tarball.
bindist_TAR_FLAGS		= --create --bzip2 --verbose

## ------------------------------------------------------------

.PHONY: bindist bindist-clean bindist-builddir
.PHONY: bindist-clean-top-builddir bindist-clean-builddir

bindist: bindist-clean bindist-builddir
	$(MAKE) install DESTDIR=$(bindist_PACKAGE_TOP_BUILDDIR)
	cd $(bindist_PACKAGE_TOP_BUILDDIR); \
	$(TAR) $(bindist_TAR_FLAGS) --file=$(bindist_TARBALL_PATHNAME) .
	$(MAKE) bindist-clean-top-builddir

bindist-builddir:
	test -d $(bindist_BUILDDIR) || $(MKDIR) $(bindist_BUILDDIR)

bindist-clean: bindist-clean-top-builddir bindist-clean-builddir

bindist-clean-top-builddir:
	-$(RM) $(bindist_PACKAGE_TOP_BUILDDIR)

bindist-clean-builddir:
	-$(RM) $(bindist_BUILDDIR)

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Slackware packaging: common variables.
## ------------------------------------------------------------

# This is  the file name  of the Slackware  package.  Notice
# that there is no directory part.
slack_PACKAGE_NAME	= $(package_PREFIX).tgz

# This  is the  package prefix,  it  is used  to remove  the
# package.
slack_PACKAGE_PREFIX	= $(package_PREFIX)

# This is  the root directory for  temporary installation of
# files
slack_PACKAGE_TOP_BUILDDIR	= $(TMPDIR)/$(PKG_ID)

# This  is the  root directory  for building  packages.  The
# rules for standard packages will set it to:
#
#   $(slack_PACKAGE_TOP_BUILDDIR)
#
# the rules for local packages will set it to:
#
#   $(slack_PACKAGE_TOP_BUILDDIR)/$(prefix)
#
slack_PACKAGE_BUILDDIR	?=

# This is where the produced package will be finally stored.
slack_BUILDDIR		= $(PWD)/$(builddir)/slackware.d

# This is  the pathname of the  Slackware packages registry.
# The standard package rules will set it to:
#
#   $(slack_REGISTRY_DIR)
#
# while the local package rules will set it to:
#
#   $(prefix)$(slack_REGISTRY_DIR)
#
slack_REGISTRY		?= 
slack_REGISTRY_DIR	= /var/log/packages

# Try  to  read from  the  system  the  name of  an  already
# installed package.  It is used to upgrade.
slack_INSTALLED_PACKAGE	:= \
	$(firstword $(notdir $(wildcard $(slack_REGISTRY)/$(package_NAME)-*)))

## ------------------------------------------------------------

# This is the environment for the Slackware package handling
# tools.
slack_ENV		?=

slack_MAKEPKG_PROGRAM	= /sbin/makepkg
slack_MAKEPKG_FLAGS	?= --chown y
slack_MAKEPKG		= $(slack_ENV) $(slack_MAKEPKG_PROGRAM) $(slack_MAKEPKG_FLAGS)

slack_INSTALLPKG_PROGRAM= /sbin/installpkg
slack_INSTALLPKG_FLAGS	?=
slack_INSTALLPKG	= $(slack_ENV) $(slack_INSTALLPKG_PROGRAM) $(slack_INSTALLPKG_FLAGS)

slack_REMOVEPKG_PROGRAM	= /sbin/removepkg
slack_REMOVEPKG_FLAGS	?=
slack_REMOVEPKG		= $(slack_ENV) $(slack_REMOVEPKG_PROGRAM) $(slack_REMOVEPKG_FLAGS)

slack_UPGRADEPKG_PROGRAM= /sbin/upgradepkg
slack_UPGRADEPKG_FLAGS	?= --verbose --reinstall
slack_UPGRADEPKG	= $(slack_ENV) $(slack_UPGRADEPKG_PROGRAM) $(slack_UPGRADEPKG_FLAGS)

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Slackware packaging: private building rules.
## ------------------------------------------------------------

# The following rules are meant  to be invoked only by other
# rules.
#
# Notice  that,  by  default,  GNU tar  preserves  the  file
# modification times  so the FASL  times will be  newer than
# the corresponding .sls times in the Slackware package.

.PHONY: private-slackware        private-slackware-install
.PHONY: private-slackware-remove private-slackware-upgrade

private-slackware: slackware-clean slackware-builddir
	$(MAKE) install DESTDIR=$(slack_PACKAGE_TOP_BUILDDIR)
	$(INSTALL_DIR) $(slack_PACKAGE_BUILDDIR)/install
	$(INSTALL_DATA) $(builddir)/meta.d/slackware/slack-desc $(slack_PACKAGE_BUILDDIR)/install
	$(MAKE) slackware-aux
	cd $(slack_PACKAGE_BUILDDIR); \
	$(slack_MAKEPKG) $(slack_PACKAGE_NAME); \
	$(MV) $(slack_PACKAGE_NAME) $(slack_BUILDDIR)

private-slackware-install:
	cd $(slack_BUILDDIR); \
	$(slack_INSTALLPKG) $(slack_PACKAGE_NAME)

private-slackware-remove:
	$(slack_REMOVEPKG) $(slack_PACKAGE_PREFIX)

private-slackware-upgrade:
	cd $(slack_BUILDDIR); \
	$(slack_UPGRADEPKG) $(slack_INSTALLED_PACKAGE)%$(slack_PACKAGE_NAME)

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Slackware packaging: auxiliary rules.
## ------------------------------------------------------------

.PHONY: slackware-builddir slackware-aux

slackware-builddir:
	test -d $(slack_BUILDDIR) || $(MKDIR) $(slack_BUILDDIR)

# This is for auxiliary rules: it is freely available to the
# user.  It  will be  invoked just before  running "makepkg"
# (see the 'slackware' rule).
slackware-aux:

## ------------------------------------------------------------

.PHONY: slackware-clean slackware-clean-top-builddir slackware-clean-builddir

slackware-clean: slackware-clean-top-builddir slackware-clean-builddir

slackware-clean-top-builddir:
	-$(RM) $(slack_PACKAGE_TOP_BUILDDIR)

slackware-clean-builddir:
	-$(RM) $(slack_BUILDDIR)

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Slackware packaging: standard package build.
## ------------------------------------------------------------

standard_SLACKWARE_ENV	= \
	PATH=/sbin:$(PATH)					\
	slack_PACKAGE_BUILDDIR=$(slack_PACKAGE_TOP_BUILDDIR)	\
	slack_REGISTRY=$(slack_REGISTRY_DIR)

## ------------------------------------------------------------

.PHONY: slackware        slackware-install
.PHONY: slackware-remove slackware-upgrade

slackware:
	$(MAKE) private-slackware		$(standard_SLACKWARE_ENV)
	$(MAKE) slackware-clean-top-builddir	$(standard_SLACKWARE_ENV)

slackware-install:
	$(MAKE) private-slackware-install	$(standard_SLACKWARE_ENV)

slackware-remove:
	$(MAKE) private-slackware-remove	$(standard_SLACKWARE_ENV)

slackware-upgrade:
	$(MAKE) private-slackware-upgrade	$(standard_SLACKWARE_ENV)

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## Slackware packaging: local package build.
## ------------------------------------------------------------

local_SLACKWARE_ENV	= \
	PATH=/sbin:$(PATH)						\
	slack_PACKAGE_BUILDDIR=$(slack_PACKAGE_TOP_BUILDDIR)/$(prefix)	\
	slack_REGISTRY=$(prefix)$(slack_REGISTRY_DIR)			\
	slack_ENV=ROOT=$(prefix)

## ------------------------------------------------------------

.PHONY: local-slackware        local-slackware-install
.PHONY: local-slackware-remove local-slackware-upgrade

local-slackware:
	$(MAKE) private-slackware		$(local_SLACKWARE_ENV)
	$(MAKE) slackware-clean-top-builddir	$(local_SLACKWARE_ENV)

local-slackware-install:
	$(MAKE) private-slackware-install	$(local_SLACKWARE_ENV)

local-slackware-remove:
	$(MAKE) private-slackware-remove	$(local_SLACKWARE_ENV)

local-slackware-upgrade:
	$(MAKE) private-slackware-upgrade	$(local_SLACKWARE_ENV)

## ------------------------------------------------------------

.PHONY: abi abu

abi:
	$(MAKE) all
	$(SUDO) $(MAKE) local-slackware local-slackware-install
abu:
	$(MAKE) all
	$(SUDO) $(MAKE) local-slackware local-slackware-upgrade

## ------------------------------------------------------------

#page
## ------------------------------------------------------------
## End.
## ------------------------------------------------------------

.PHONY: echo-variable echo-list-variable

# Use this to echo a variable to stdout; example:
# 
#	$ make echo-variable VARIABLE=slack_PACKAGE_NAME
#
echo-variable:
	@echo $($(VARIABLE))

# Use this to  echo a variable to stdout  interpreting it as
# list of strings; example:
# 
#	$ make echo-list-variable VARIABLE=FILES
#
echo-list-variable:
	@$(foreach f,$($(VARIABLE)),echo $(f);)



### end of file
# Local Variables:
# mode: makefile
# fill-column: 60
# End:
