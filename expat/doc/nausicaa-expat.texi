\input texinfo.tex
@c %**start of header
@setfilename nausicaa-expat.info
@settitle Expat for R6RS Scheme
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@macro bsd{}
@acronym{BSD}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro uri{}
@acronym{URI}
@end macro

@macro pxml{}
@acronym{XML}
@end macro

@macro dtd{}
@acronym{DTD}
@end macro

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro ram{}
@acronym{RAM}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@c Remember that @url is already used by Texinfo.
@macro urla{}
@acronym{URL}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@c ------------------------------------------------------------
@c Software related macros.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@macro glibc{}
@gnu{} C Library
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro icmp{}
@acronym{ICMP}
@end macro

@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro https{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@macro snmp{}
@acronym{SNMP}
@end macro

@c ------------------------------------------------------------
@c Arguments macros.
@c ------------------------------------------------------------

@macro vari{ARG}
@var{\ARG\1}
@end macro

@macro varii{ARG}
@var{\ARG\2}
@end macro

@macro variii{ARG}
@var{\ARG\3}
@end macro

@macro variv{ARG}
@var{\ARG\4}
@end macro

@macro varn{ARG}
@var{\ARG\n}
@end macro

@macro vark{ARG}
@var{\ARG\k}
@end macro

@macro varj{ARG}
@var{\ARG\j}
@end macro

@c ------------------------------------------------------------

@macro meta{ARG}
<\ARG\>
@end macro

@macro metai{ARG}
@meta{\ARG\1}
@end macro

@macro metaii{ARG}
@meta{\ARG\2}
@end macro

@macro metaiii{ARG}
@meta{\ARG\3}
@end macro

@macro metaiv{ARG}
@meta{\ARG\4}
@end macro

@macro metan{ARG}
@meta{\ARG\n}
@end macro

@macro metak{ARG}
@meta{\ARG\k}
@end macro

@macro metaj{ARG}
@meta{\ARG\j}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro null{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{NAME}
@code{(\NAME\)}
@end macro

@macro module{NAME}
@code{\NAME\}
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@ignore
Separating the @srfi{}  macro from the number with a  '--' rather than a
'-' makes the expansion look ugly in menu entries under the Info reader.
IMHO this should not happen, but  it does; so we live with this, because
the main purpose of this document is to provide an Info version.
@end ignore
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@c ------------------------------------------------------------

@macro func{NAME}
@code{@sc{\NAME\}}
@end macro

@macro nil{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@macro rsixref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@end macro

@macro rfiveref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r5rs}
@end macro

@macro ikarusref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,ikarus}
@end macro

@macro urielref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa-uriel}
@end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Expat for @rnrs{6} Scheme

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/Expat

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-expat

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marcomaggi@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2009

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, an Expat
interface for @rnrs{6} Scheme.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://sites.google.com/site/mrcmgg/nausicaa}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying



@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-expat: (nausicaa-expat).     Expat for @rnrs{6} Scheme.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c ------------------------------------------------------------

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.

Appendices

* expat::                       The original documentation.
* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c ------------------------------------------------------------

@c page
@node overview
@chapter Overview of the package


@noindent
This is an interface to the Expat library for @rnrs{6}.  Expat is a
library, written in C, for parsing @pxml{} documents.  It's the
underlying @pxml{} parser for the open source Mozilla project, Perl's
@code{XML::Parser}, Python's @code{xml.parsers.expat}, and other
open--source @pxml{} parsers.

The main library is @library{expat}, and additional bindings are
exported by @library{expat sizeof}.


@c page
@node expat
@appendix The Expat XML Parser


@quotation
This is a Texinfo reformatting of the original documentation from Expat
version 2.0.1.
@end quotation


Expat is a library, written in C, for parsing @pxml{} documents.  It's
the underlying @pxml{} parser for the open source Mozilla project,
Perl's @code{XML::Parser}, Python's @code{xml.parsers.expat}, and other
open--source @pxml{} parsers.

This library is the creation of James Clark, who's also given us
@code{groff} (an @code{nroff} look--alike), Jade (an implemention of
@acronym{ISO}'s @acronym{DSSSL} stylesheet language for @acronym{SGML}),
@acronym{XP} (a Java @pxml{} parser package), @acronym{XT} (a Java
@acronym{XSL} engine).  James was also the technical lead on the @pxml{}
Working Group at @acronym{W3C} that produced the @pxml{} specification.

This is free software, licensed under the MIT/X Consortium license.  You
may download it from the Expat home page.

The bulk of this document was originally commissioned as an article by
@code{XML.com}.  They graciously allowed Clark Cooper to retain
copyright and to distribute it with Expat.  This version has been
substantially extended to include documentation on features which have
been added since the original article was published, and additional
information on using the original interface.


@menu
* expat overview::              Overview.
* expat install::               Building and installing Expat.
* expat using::                 Using Expat.
* expat api::                   Expat reference.
@end menu


@c page
@node expat overview
@appendixsec Overview


Expat is a stream--oriented parser.  You register callback (or handler)
functions with the parser and then start feeding it the document.  As
the parser recognizes parts of the document, it will call the
appropriate handler for that part (if you've registered one).  The
document is fed to the parser in pieces, so you can start parsing before
you have all the document.  This also allows you to parse really huge
documents that won't fit into memory.

Expat can be intimidating due to the many kinds of handlers and options
you can set.  But you only need to learn four functions in order to do
90% of what you'll want to do with it:

@table @cfunc
@item XML_ParserCreate
Create a new parser object.

@item XML_SetElementHandler
Set handlers for start and end tags.

@item XML_SetCharacterDataHandler
Set handler for text.

@item XML_Parse
Pass a buffer full of document to the parser
@end table

These functions and others are described in the reference part of this
document.  The reference section also describes in detail the parameters
passed to the different types of handlers.

Let's look at a very simple example program that only uses 3 of the
above functions (it doesn't need to set a character handler).  The
program @file{outline.c} prints an element outline, indenting child
elements to distinguish them from the parent element that contains them.

@example
/***********************************************************
 * outline.c
 *
 * Copyright 1999, Clark Cooper
 * All rights reserved.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the license contained
 * in the COPYING file that comes with the expat distribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS
 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Read an XML document from standard input and print an
 * element outline on standard output.  Must be used with
 * Expat compiled for UTF-8 output.
 */


#include <stdio.h>
#include <expat.h>

#if defined(__amigaos__) && defined(__USE_INLINE__)
#  include <proto/expat.h>
#endif

#ifdef XML_LARGE_SIZE
#  if defined(XML_USE_MSC_EXTENSIONS) && _MSC_VER < 1400
#    define XML_FMT_INT_MOD "I64"
#  else
#    define XML_FMT_INT_MOD "ll"
#  endif
#else
#  define XML_FMT_INT_MOD "l"
#endif

#define BUFFSIZE        8192

char Buff[BUFFSIZE];

int Depth;

static void XMLCALL
start(void *data, const char *el, const char **attr)
@{
  int i;

  for (i = 0; i < Depth; i++)
    printf("  ");

  printf("%s", el);

  for (i = 0; attr[i]; i += 2)
    printf(" %s='%s'", attr[i], attr[i + 1]);

  printf("\n");
  Depth++;
@}

static void XMLCALL
end(void *data, const char *el)
@{
  Depth--;
@}

int
main(int argc, char *argv[])
@{
  XML_Parser p = XML_ParserCreate(NULL);
  if (! p)
    @{
      fprintf(stderr, "Couldn't allocate memory for parser\n");
      exit(-1);
    @}

  XML_SetElementHandler(p, start, end);

  for (;;)
    @{
      int done;
      int len;

      len = (int)fread(Buff, 1, BUFFSIZE, stdin);
      if (ferror(stdin))
        @{
          fprintf(stderr, "Read error\n");
          exit(-1);
        @}
    done = feof(stdin);

    if (XML_Parse(p, Buff, len, done) == XML_STATUS_ERROR)
      @{
        fprintf(stderr,
                "Parse error at line %" XML_FMT_INT_MOD "u:\n%s\n",
                XML_GetCurrentLineNumber(p),
                XML_ErrorString(XML_GetErrorCode(p)));
        exit(-1);
      @}

      if (done)
        break;
    @}
  XML_ParserFree(p);
  return 0;
@}
@end example

The start handler does all the work.  It prints two indenting spaces for
every level of ancestor elements, then it prints the element and
attribute information.  Finally it increments the global Depth variable.

@example
int Depth;

void XMLCALL
start(void *data, const char *el, const char **attr)
@{
  int i;

  for (i = 0; i < Depth; i++)
    printf("  ");

  printf("%s", el);

  for (i = 0; attr[i]; i += 2)
    printf(" %s='%s'", attr[i], attr[i + 1]);

  printf("\n");
  Depth++;
@}
@end example

The end tag simply does the bookkeeping work of decrementing Depth.

@example
void XMLCALL
end(void *data, const char *el)
@{
  Depth--;
@}
@end example

Note the @code{XMLCALL} annotation used for the callbacks.  This is used
to ensure that the Expat and the callbacks are using the same calling
convention in case the compiler options used for Expat itself and the
client code are different.  Expat tries not to care what the default
calling convention is, though it may require that it be compiled with a
default convention of @code{cdecl} on some platforms.  For code which
uses Expat, however, the calling convention is specified by the
@code{XMLCALL} annotation on most platforms; callbacks should be defined
using this annotation.

The @code{XMLCALL} annotation was added in Expat 1.95.7, but existing
working Expat applications don't need to add it (since they are already
using the @code{cdecl} calling convention, or they wouldn't be working).
The annotation is only needed if the default calling convention may be
something other than @code{cdecl}.  To use the annotation safely with
older versions of Expat, you can conditionally define it after including
Expat's header file:

@example
#include <expat.h>

#ifndef XMLCALL
#  if defined(_MSC_EXTENSIONS) && !defined(__BEOS__) && !defined(__CYGWIN__)
#    define XMLCALL __cdecl
#  elif defined(__GNUC__)
#    define XMLCALL __attribute__((cdecl))
#  else
#    define XMLCALL
#  endif
#endif
@end example

After creating the parser, the main program just has the job of
shoveling the document to the parser so that it can do its work.


@c page
@node expat install
@appendixsec Building and installing Expat


The Expat distribution comes as a compressed (with @gnu{} Gzip) tar
file.  You may download the latest version from Source Forge.  After
unpacking this, cd into the directory.  Then follow either the Win32
directions or Unix directions below.

@subsubheading Building under Win32

If you're using the @gnu{} compiler under Cygwin, follow the Unix
directions in the next section.  Otherwise if you have Microsoft's
Developer Studio installed, then from Windows Explorer double--click on
@file{expat.dsp} in the lib directory and build and install in the usual
manner.

Alternatively, you may download the Win32 binary package that contains
the @file{expat.h} include file and a pre--built @acronym{DLL}.

@subsubheading Building under Unix (or @gnu{})

First you'll need to run the configure shell script in order to
configure the Makefiles and headers for your system.

If you're happy with all the defaults that configure picks for you, and
you have permission on your system to install into @file{/usr/local},
you can install Expat with this sequence of commands:

@example
$ ./configure
$ make
$ make install
@end example

There are some options that you can provide to this script, but the only
one we'll mention here is the @option{--prefix} option.  You can find
out all the options available by running configure with just the
@option{--help} option.

By default, the @command{configure} script sets things up so that the
library gets installed in @file{/usr/local/lib} and the associated
header file in @file{/usr/local/include}.  But if you were to give the
option @code{--prefix=/home/me/mystuff}, then the library and header
would get installed in @file{/home/me/mystuff/lib} and
@file{/home/me/mystuff/include} respectively.

@subsubheading Configuring Expat Using the Pre--Processor

Expat's feature set can be configured using a small number of
pre-processor definitions. The definition of this symbols does not
affect the set of entry points for Expat, only the behavior of the
@api{} and the definition of character types in the case of
@code{XML_UNICODE_WCHAR_T}.  The symbols are:

@table @code
@item XML_DTD
Include support for using and reporting @dtd{}--based content.  If this
is defined, default attribute values from an external @dtd{} subset are
reported and attribute value normalization occurs based on the type of
attributes defined in the external subset.  Without this, Expat has a
smaller memory footprint and can be faster, but will not load external
entities or process conditional sections.  This does not affect the set
of functions available in the @api{}.

@item XML_NS
When defined, support for the Namespaces in @pxml{} specification is
included.

@item XML_UNICODE
When defined, character data reported to the application is encoded in
@utf{}-16 using wide characters of the type @code{XML_Char}.  This is
implied if @code{XML_UNICODE_WCHAR_T} is defined.

@item XML_UNICODE_WCHAR_T
If defined, causes the @code{XML_Char} character type to be defined
using the @code{wchar_t} type; otherwise, @code{unsigned short} is used.
Defining this implies @code{XML_UNICODE}.

@item XML_LARGE_SIZE
If defined, causes the @code{XML_Size} and @code{XML_Index} integer
types to be at least 64 bits in size.  This is intended to support
processing of very large input streams, where the return values of
@cfunc{XML_GetCurrentByteIndex}, @cfunc{XML_GetCurrentLineNumber} and
@cfunc{XML_GetCurrentColumnNumber} could overflow.  It may not be
supported by all compilers, and is turned off by default.

@item XML_CONTEXT_BYTES
The number of input bytes of markup context which the parser will ensure
are available for reporting via @cfunc{XML_GetInputContext}.  This is
normally set to 1024, and must be set to a positive interger.  If this
is not defined, the input context will not be available and
@cfunc{XML_GetInputContext} will always report @null{}.  Without this,
Expat has a smaller memory footprint and can be faster.

@item XML_STATIC
On Windows, this should be set if Expat is going to be linked statically
with the code that calls it; this is required to get all the right
@acronym{MSVC} magic annotations correct.  This is ignored on other
platforms.
@end table


@c page
@node expat using
@appendixsec Using Expat


@menu
* expat using compile::         Compiling and linking against expat.
* expat using basics::          Basics.
* expat using comm::            Communicating between handlers.
* expat using version::         @pxml{} version.
* expat using namespace::       Namespace processing.
* expat using encodings::       Character encodings.
* expat using entity::          Handling external entity references.
* expat using dtd::             Parsing @dtd{}s.
* expat using stop::            Temporarily stopping parsing.
@end menu


@c page
@node expat using compile
@appendixsubsec Compiling and linking against expat


Unless you installed Expat in a location not expected by your compiler
and linker, all you have to do to use Expat in your programs is to
include the Expat header:

@example
#include <expat.h>
@end example

@noindent
in your files that make calls to it and to tell the linker that it needs
to link against the Expat library.  On Unix systems, this would usually
be done with the @code{-lexpat} argument.  Otherwise, you'll need to
tell the compiler where to look for the Expat header and the linker
where to find the Expat library.  You may also need to take steps to
tell the operating system where to find this library at run time.

On a Unix--based system, here's what a @file{Makefile} might look like
when Expat is installed in a standard location:

@example
CC=cc
LDFLAGS=
LIBS= -lexpat
xmlapp: xmlapp.o
        $(CC) $(LDFLAGS) -o xmlapp xmlapp.o $(LIBS)
@end example

If you installed Expat in, say, @file{/home/me/mystuff}, then the
@file{Makefile} would look like this:

@example
CC=cc
CFLAGS= -I/home/me/mystuff/include
LDFLAGS=
LIBS= -L/home/me/mystuff/lib -lexpat
xmlapp: xmlapp.o
        $(CC) $(LDFLAGS) -o xmlapp xmlapp.o $(LIBS)
@end example

You'd also have to set the environment variable @env{LD_LIBRARY_PATH} to
@file{/home/me/mystuff/lib} (or to
@code{$@{LD_LIBRARY_PATH@}:/home/me/mystuff/lib} if
@env{LD_LIBRARY_PATH} already has some directories in it) in order to
run your application.


@c page
@node expat using basics
@appendixsubsec Basics


As we saw in the example in the overview, the first step in parsing an
@pxml{} document with Expat is to create a parser object.  There are
three functions in the Expat @api{} for creating a parser object.
However, only two of these (@cfunc{XML_ParserCreate} and
@cfunc{XML_ParserCreateNS}) can be used for constructing a parser for a
top--level document.  The object returned by these functions is an
opaque pointer (i.e. @file{expat.h} declares it as @code{void *}) to
data with further internal structure.  In order to free the memory
associated with this object you must call @cfunc{XML_ParserFree}.  Note
that if you have provided any user data that gets stored in the parser,
then your application is responsible for freeing it prior to calling
@cfunc{XML_ParserFree}.

The objects returned by the parser creation functions are good for
parsing only one @pxml{} document or external parsed entity.  If your
application needs to parse many @pxml{} documents, then it needs to
create a parser object for each one.  The best way to deal with this is
to create a higher level object that contains all the default
initialization you want for your parser objects.

Walking through a document hierarchy with a stream oriented parser will
require a good stack mechanism in order to keep track of current
context.  For instance, to answer the simple question, ``What element
does this text belong to?'' requires a stack, since the parser may have
descended into other elements that are children of the current one and
has encountered this text on the way out.

The things you're likely to want to keep on a stack are the currently
opened element and it's attributes.  You push this information onto the
stack in the start handler and you pop it off in the end handler.

For some tasks, it is sufficient to just keep information on what the
depth of the stack is (or would be if you had one).  The outline program
shown above presents one example.  Another such task would be skipping
over a complete element.  When you see the start tag for the element you
want to skip, you set a skip flag and record the depth at which the
element started.  When the end tag handler encounters the same depth,
the skipped element has ended and the flag may be cleared.  If you
follow the convention that the root element starts at 1, then you can
use the same variable for skip flag and skip depth.

@example
void
init_info (Parseinfo *info)
@{
  info->skip  = 0;
  info->depth = 1;
  /* Other initializations here */
@}

void XMLCALL
rawstart (void *data, const char *el, const char **attr)
@{
  Parseinfo *inf = (Parseinfo *) data;

  if (! inf->skip)
    @{
      if (should_skip(inf, el, attr))
        inf->skip = inf->depth;
      else
        start(inf, el, attr); /* This does rest of start handling */
    @}

  inf->depth++;
@}

void XMLCALL
rawend (void *data, const char *el)
@{
  Parseinfo *inf = (Parseinfo *) data;

  inf->depth--;

  if (! inf->skip)
    end(inf, el);              /* This does rest of end handling */

  if (inf->skip == inf->depth)
    inf->skip = 0;
@}
@end example

Notice in the above example the difference in how depth is manipulated
in the start and end handlers.  The end tag handler should be the mirror
image of the start tag handler.  This is necessary to properly model
containment.  Since, in the start tag handler, we incremented depth
after the main body of start tag code, then in the end handler, we need
to manipulate it @emph{before} the main body.  If we'd decided to
increment it first thing in the start handler, then we'd have had to
decrement it last thing in the end handler.


@c page
@node expat using comm
@appendixsubsec Communicating between handlers


In order to be able to pass information between different handlers
without using globals, you'll need to define a data structure to hold
the shared variables.  You can then tell Expat (with the
@cfunc{XML_SetUserData} function) to pass a pointer to this structure to
the handlers.  This is the first argument received by most handlers.

In the reference section, an argument to a callback function is named
@var{userData} and have type @code{void *} if the user data is passed;
it will have the type @code{XML_Parser} if the parser itself is passed.
When the parser is passed, the user data may be retrieved using
@cfunc{XML_GetUserData}.

One common case where multiple calls to a single handler may need to
communicate using an application data structure is the case when content
passed to the character data handler (set by
@cfunc{XML_SetCharacterDataHandler}) needs to be accumulated.

A common first--time mistake with any of the event--oriented interfaces
to an @pxml{} parser is to expect all the text contained in an element
to be reported by a single call to the character data handler.  Expat,
like many other @pxml{} parsers, reports such data as a sequence of
calls; there's no way to know when the end of the sequence is reached
until a different callback is made.  A buffer referenced by the user
data structure proves both an effective and convenient place to
accumulate character data.


@c page
@node expat using version
@appendixsubsec @pxml{} version


Expat is an @pxml{} 1.0 parser, and as such never complains based on the
value of the version pseudo--attribute in the @pxml{} declaration, if
present.

If an application needs to check the version number (to support
alternate processing), it should use the @cfunc{XML_SetXmlDeclHandler}
function to set a handler that uses the information in the @pxml{}
declaration to determine what to do.  This example shows how to check
that only a version number of @code{1.0} is accepted:

@example
static int wrong_version;
static XML_Parser parser;

static void XMLCALL
xmldecl_handler(void            *userData,
                const XML_Char  *version,
                const XML_Char  *encoding,
                int              standalone)
@{
  static const XML_Char Version_1_0[] = @{ '1', '.', '0', 0 @};

  int i;

  for (i = 0; i < (sizeof(Version_1_0) / sizeof(Version_1_0[0])); ++i)
    @{
      if (version[i] != Version_1_0[i])
        @{
          wrong_version = 1;
          /* also clear all other handlers: */
          XML_SetCharacterDataHandler(parser, NULL);
          ...
          return;
        @}
    @}
  ...
@}
@end example


@c page
@node expat using namespace
@appendixsubsec Namespace processing


When the parser is created using the @cfunc{XML_ParserCreateNS},
function, Expat performs namespace processing.  Under namespace
processing, Expat consumes @code{xmlns} and @code{xmlns:...} attributes,
which declare namespaces for the scope of the element in which they
occur.  This means that your start handler will not see these
attributes.  Your application can still be informed of these
declarations by setting namespace declaration handlers with
@cfunc{XML_SetNamespaceDeclHandler}.

Element type and attribute names that belong to a given namespace are
passed to the appropriate handler in expanded form.  By default this
expanded form is a concatenation of the namespace @uri{}, the separator
character (which is the 2nd argument to @cfunc{XML_ParserCreateNS}), and
the local name (i.e. the part after the colon).  Names with undeclared
prefixes are not well--formed when namespace processing is enabled, and
will trigger an error.  Unprefixed attribute names are never expanded,
and unprefixed element names are only expanded when they are in the
scope of a default namespace.

However if @cfunc{XML_SetReturnNSTriplet} has been called with a
non--zero @var{do_nst} parameter, then the expanded form for names with
an explicit prefix is a concatenation of: @uri{}, separator, local name,
separator, prefix.

You can set handlers for the start of a namespace declaration and for
the end of a scope of a declaration with the
@cfunc{XML_SetNamespaceDeclHandler} function.  The
@var{StartNamespaceDeclHandler} is called prior to the start tag handler
and the @var{EndNamespaceDeclHandler} is called after the corresponding
end tag that ends the namespace's scope.

The namespace start handler gets passed the prefix and @uri{} for the
namespace.  For a default namespace declaration (@code{xmlns='...'}),
the prefix will be null.  The @uri{} will be null for the case where the
default namespace is being unset.  The namespace end handler just gets
the prefix for the closing scope.

These handlers are called for each declaration.  So if, for instance, a
start tag had three namespace declarations, then the
@var{StartNamespaceDeclHandler} would be called three times before the
start tag handler is called, once for each declaration.


@c page
@node expat using encodings
@appendixsubsec Character encodings


While @pxml{} is based on Unicode, and every @pxml{} processor is
required to recognized @utf{}-8 and @utf{}-16 (1 and 2 byte encodings of
Unicode), other encodings may be declared in @pxml{} documents or
entities.  For the main document, an @pxml{} declaration may contain an
encoding declaration:

@example
<?xml version="1.0" encoding="ISO-8859-2"?>
@end example

External parsed entities may begin with a text declaration, which looks
like an @pxml{} declaration with just an encoding declaration:

@example
<?xml encoding="Big5"?>
@end example

With Expat, you may also specify an encoding at the time of creating a
parser.  This is useful when the encoding information may come from a
source outside the document itself (like a higher level protocol).

There are four built--in encodings in Expat:

@example
UTF-8
UTF-16
ISO-8859-1
US-ASCII
@end example

Anything else discovered in an encoding declaration or in the protocol
encoding specified in the parser constructor, triggers a call to the
@var{UnknownEncodingHandler}.  This handler gets passed the encoding
name and a pointer to an @code{XML_Encoding} data structure.  Your
handler must fill in this structure and return @code{XML_STATUS_OK} if
it knows how to deal with the encoding.  Otherwise the handler should
return @code{XML_STATUS_ERROR}.  The handler also gets passed a pointer
to an optional application data structure that you may indicate when you
set the handler.

Expat places restrictions on character encodings that it can support by
filling in the @code{XML_Encoding} structure.

@enumerate
@item
Every @ascii{} character that can appear in a well--formed @pxml{}
document must be represented by a single byte, and that byte must
correspond to it's @ascii{} encoding (except for the characters
@code{$@@\^'@{@}~}).

@item
Characters must be encoded in 4 bytes or less.

@item
All characters encoded must have Unicode scalar values less than or
equal to 65535 (0xFFFF).  This does not apply to the built--in support
for @utf{}-16 and @utf{}-8.

@item
No character may be encoded by more that one distinct sequence of bytes.
@end enumerate

@code{XML_Encoding} contains an array of integers that correspond to the
first byte of an encoding sequence.  If the value in the array for a
byte is zero or positive, then the byte is a single byte encoding that
encodes the Unicode scalar value contained in the array.  A @code{-1} in
this array indicates a malformed byte.  If the value is @code{-2},
@code{-3}, or @code{-4}, then the byte is the beginning of a 2, 3, or 4
byte sequence respectively.  Multi--byte sequences are sent to the
convert function pointed at in the @code{XML_Encoding} structure.  This
function should return the Unicode scalar value for the sequence or
@code{-1} if the sequence is malformed.

One pitfall that novice Expat users are likely to fall into is that
although Expat may accept input in various encodings, the strings that
it passes to the handlers are always encoded in @utf{}-8 or @utf{}-16
(depending on how Expat was compiled).  Your application is responsible
for any translation of these strings into other encodings.


@c page
@node expat using entity
@appendixsubsec Handling external entity references


Expat does not read or parse external entities directly.  Note that any
external @dtd{} is a special case of an external entity.  If you've set
no @var{ExternalEntityRefHandler}, then external entity references are
silently ignored.  Otherwise, it calls your handler with the information
needed to read and parse the external entity.

Your handler isn't actually responsible for parsing the entity, but it
is responsible for creating a subsidiary parser with
@cfunc{XML_ExternalEntityParserCreate} that will do the job.  This
returns an instance of @code{XML_Parser} that has handlers and other
data structures initialized from the parent parser.  You may then use
@cfunc{XML_Parse} or @cfunc{XML_ParseBuffer} calls against this parser.
Since external entities my refer to other external entities, your
handler should be prepared to be called recursively.


@c page
@node expat using dtd
@appendixsubsec Parsing @dtd{}s


In order to parse parameter entities, before starting the parse, you
must call @cfunc{XML_SetParamEntityParsing} with one of the following
arguments:

@table @code
@item XML_PARAM_ENTITY_PARSING_NEVER
Don't parse parameter entities or the external subset.

@item XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE
Parse parameter entites and the external subset unless standalone was
set to ``yes'' in the @pxml{} declaration.

@item XML_PARAM_ENTITY_PARSING_ALWAYS
Always parse parameter entities and the external subset.
@end table

In order to read an external @dtd{}, you also have to set an external
entity reference handler as described above.


@c page
@node expat using stop
@appendixsubsec Temporarily stopping parsing


Expat 1.95.8 introduces a new feature: its now possible to stop parsing
temporarily from within a handler function, even if more data has
already been passed into the parser.  Applications for this include:

@itemize
@item
Supporting the @code{XInclude} specification.

@item
Delaying further processing until additional information is available
from some other source.

@item
Adjusting processor load as task priorities shift within an application.

@item
Stopping parsing completely (simply free or reset the parser instead of
resuming in the outer parsing loop).  This can be useful if a
application--domain error is found in the @pxml{} being parsed or if the
result of the parse is determined not to be useful after all.
@end itemize

To take advantage of this feature, the main parsing loop of an
application needs to support this specifically.  It cannot be supported
with a parsing loop compatible with Expat 1.95.7 or earlier (though
existing loops will continue to work without supporting the stop/resume
feature).

An application that uses this feature for a single parser will have the
rough structure (in pseudo--code):

@example
fd = open_input()
p  = create_parser()

if parse_xml(p, fd)
  @{
    /* suspended */

    int suspended = 1;

    while (suspended)
      @{
        do_something_else()
        if ready_to_resume()
          @{
            suspended = continue_parsing(p, fd);
          @}
      @}
  @}
@end example

An application that may resume any of several parsers based on input
(either from the @pxml{} being parsed or some other source) will
certainly have more interesting control structures.

This C function could be used for the @cfunc{parse_xml} function
mentioned in the pseudo-code above:

@example
#define BUFF_SIZE 10240

/* Parse a document from the open file descriptor 'fd' until
   the parse is complete (the document has been completely
   parsed, or there's been an error), or the parse is stopped.
   Return non-zero when the parse is merely suspended. */

int
parse_xml (XML_Parser p, int fd)
@{
  for (;;)
    @{
      int last_chunk;
      int bytes_read;
      enum XML_Status status;

      void *buff = XML_GetBuffer(p, BUFF_SIZE);
      if (buff == NULL)
        @{
         /* handle error... */
         return 0;
        @}
    bytes_read = read(fd, buff, BUFF_SIZE);
    if (bytes_read < 0)
      @{
        /* handle error... */
        return 0;
      @}
    status = XML_ParseBuffer(p, bytes_read, bytes_read == 0);
    switch (status)
      @{
        case XML_STATUS_ERROR:
          /* handle error... */
          return 0;
        case XML_STATUS_SUSPENDED:
          return 1;
      @}
      if (bytes_read == 0)
        return 0;
    @}
@}
@end example

The corresponding @cfunc{continue_parsing} function is somewhat simpler,
since it only need deal with the return code from
@cfunc{XML_ResumeParser}; it can delegate the input handling to the
@cfunc{parse_xml} function:

@example
/* Continue parsing a document which had been suspended.
   The 'p' and 'fd' arguments are the same as passed to
   parse_xml().  Return non-zero when the parse is
   suspended. */
int
continue_parsing (XML_Parser p, int fd)
@{
  enum XML_Status status = XML_ResumeParser(p);
  switch (status)
    @{
      case XML_STATUS_ERROR:
        /* handle error... */
        return 0;
      case XML_ERROR_NOT_SUSPENDED:
        /* handle error... */
        return 0;.
      case XML_STATUS_SUSPENDED:
        return 1;
    @}
  return parse_xml(p, fd);
@}
@end example

Now that we've seen what a mess the top--level parsing loop can become,
what have we gained?  Very simply, we can now use the
@cfunc{XML_StopParser} function to stop parsing, without having to go to
great lengths to avoid additional processing that we're expecting to
ignore.  As a bonus, we get to stop parsing temporarily, and come back
to it when we're ready.

To stop parsing from a handler function, use the @cfunc{XML_StopParser}
function.  This function takes two arguments; the parser being stopped
and a flag indicating whether the parse can be resumed in the future.


@c page
@node expat api
@appendixsec Expat reference



@c page
@node Package License
@appendix @gnu{} General Public License

@c The GNU General Public License.
@center Version 3, 29 June 2007

@c This file is intended to be included within another document,
@c hence no sectioning command or @node.

@display
Copyright @copyright{} 2007 Free Software Foundation, Inc. @url{http://fsf.org/}

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.
@end display

@heading Preamble

The GNU General Public License is a free, copyleft license for
software and other kinds of works.

The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom
to share and change all versions of a program---to make sure it remains
free software for all its users.  We, the Free Software Foundation,
use the GNU General Public License for most of our software; it
applies also to any other work released this way by its authors.  You
can apply it to your programs, too.

When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the
software, or if you modify it: responsibilities to respect the freedom
of others.

For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too,
receive or can get the source code.  And you must show them these
terms so they know their rights.

Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users' freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those
domains in future versions of the GPL, as needed to protect the
freedom of users.

Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish
to avoid the special danger that patents applied to a free program
could make it effectively proprietary.  To prevent this, the GPL
assures that patents cannot be used to render the program non-free.

The precise terms and conditions for copying, distribution and
modification follow.

@heading TERMS AND CONDITIONS

@enumerate 0
@item Definitions.

``This License'' refers to version 3 of the GNU General Public License.

``Copyright'' also means copyright-like laws that apply to other kinds
of works, such as semiconductor masks.

``The Program'' refers to any copyrightable work licensed under this
License.  Each licensee is addressed as ``you''.  ``Licensees'' and
``recipients'' may be individuals or organizations.

To ``modify'' a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of
an exact copy.  The resulting work is called a ``modified version'' of
the earlier work or a work ``based on'' the earlier work.

A ``covered work'' means either the unmodified Program or a work based
on the Program.

To ``propagate'' a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

To ``convey'' a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user
through a computer network, with no transfer of a copy, is not
conveying.

An interactive user interface displays ``Appropriate Legal Notices'' to
the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

@item Source Code.

The ``source code'' for a work means the preferred form of the work for
making modifications to it.  ``Object code'' means any non-source form
of a work.

A ``Standard Interface'' means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

The ``System Libraries'' of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
``Major Component'', in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

The ``Corresponding Source'' for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

The Corresponding Source need not include anything that users can
regenerate automatically from other parts of the Corresponding Source.

The Corresponding Source for a work in source code form is that same
work.

@item Basic Permissions.

All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

You may make, run and propagate covered works that you do not convey,
without conditions so long as your license otherwise remains in force.
You may convey covered works to others for the sole purpose of having
them make modifications exclusively for you, or provide you with
facilities for running those works, provided that you comply with the
terms of this License in conveying all material for which you do not
control copyright.  Those thus making or running the covered works for
you must do so exclusively on your behalf, under your direction and
control, on terms that prohibit them from making any copies of your
copyrighted material outside their relationship with you.

Conveying under any other circumstances is permitted solely under the
conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

@item Protecting Users' Legal Rights From Anti-Circumvention Law.

No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such
circumvention is effected by exercising rights under this License with
respect to the covered work, and you disclaim any intention to limit
operation or modification of the work as a means of enforcing, against
the work's users, your or third parties' legal rights to forbid
circumvention of technological measures.

@item Conveying Verbatim Copies.

You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

@item Conveying Modified Source Versions.

You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these
conditions:

@enumerate a
@item
The work must carry prominent notices stating that you modified it,
and giving a relevant date.

@item
The work must carry prominent notices stating that it is released
under this License and any conditions added under section 7.  This
requirement modifies the requirement in section 4 to ``keep intact all
notices''.

@item
You must license the entire work, as a whole, under this License to
anyone who comes into possession of a copy.  This License will
therefore apply, along with any applicable section 7 additional terms,
to the whole of the work, and all its parts, regardless of how they
are packaged.  This License gives no permission to license the work in
any other way, but it does not invalidate such permission if you have
separately received it.

@item
If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your work
need not make them do so.
@end enumerate

A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
``aggregate'' if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

@item  Conveying Non-Source Forms.

You may convey a covered work in object code form under the terms of
sections 4 and 5, provided that you also convey the machine-readable
Corresponding Source under the terms of this License, in one of these
ways:

@enumerate a
@item
Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium customarily
used for software interchange.

@item
Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a written
offer, valid for at least three years and valid for as long as you
offer spare parts or customer support for that product model, to give
anyone who possesses the object code either (1) a copy of the
Corresponding Source for all the software in the product that is
covered by this License, on a durable physical medium customarily used
for software interchange, for a price no more than your reasonable
cost of physically performing this conveying of source, or (2) access
to copy the Corresponding Source from a network server at no charge.

@item
Convey individual copies of the object code with a copy of the written
offer to provide the Corresponding Source.  This alternative is
allowed only occasionally and noncommercially, and only if you
received the object code with such an offer, in accord with subsection
6b.

@item
Convey the object code by offering access from a designated place
(gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge.  You need not require recipients to copy the
Corresponding Source along with the object code.  If the place to copy
the object code is a network server, the Corresponding Source may be
on a different server (operated by you or a third party) that supports
equivalent copying facilities, provided you maintain clear directions
next to the object code saying where to find the Corresponding Source.
Regardless of what server hosts the Corresponding Source, you remain
obligated to ensure that it is available for as long as needed to
satisfy these requirements.

@item
Convey the object code using peer-to-peer transmission, provided you
inform other peers where the object code and Corresponding Source of
the work are being offered to the general public at no charge under
subsection 6d.

@end enumerate

A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

A ``User Product'' is either (1) a ``consumer product'', which means any
tangible personal property which is normally used for personal,
family, or household purposes, or (2) anything designed or sold for
incorporation into a dwelling.  In determining whether a product is a
consumer product, doubtful cases shall be resolved in favor of
coverage.  For a particular product received by a particular user,
``normally used'' refers to a typical or common use of that class of
product, regardless of the status of the particular user or of the way
in which the particular user actually uses, or expects or is expected
to use, the product.  A product is a consumer product regardless of
whether the product has substantial commercial, industrial or
non-consumer uses, unless such uses represent the only significant
mode of use of the product.

``Installation Information'' for a User Product means any methods,
procedures, authorization keys, or other information required to
install and execute modified versions of a covered work in that User
Product from a modified version of its Corresponding Source.  The
information must suffice to ensure that the continued functioning of
the modified object code is in no case prevented or interfered with
solely because modification has been made.

If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or
updates for a work that has been modified or installed by the
recipient, or for the User Product in which it has been modified or
installed.  Access to a network may be denied when the modification
itself materially and adversely affects the operation of the network
or violates the rules and protocols for communication across the
network.

Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

@item Additional Terms.

``Additional permissions'' are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders
of that material) supplement the terms of this License with terms:

@enumerate a
@item
Disclaiming warranty or limiting liability differently from the terms
of sections 15 and 16 of this License; or

@item
Requiring preservation of specified reasonable legal notices or author
attributions in that material or in the Appropriate Legal Notices
displayed by works containing it; or

@item
Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or

@item
Limiting the use for publicity purposes of names of licensors or
authors of the material; or

@item
Declining to grant rights under trademark law for use of some trade
names, trademarks, or service marks; or

@item
Requiring indemnification of licensors and authors of that material by
anyone who conveys the material (or modified versions of it) with
contractual assumptions of liability to the recipient, for any
liability that these contractual assumptions directly impose on those
licensors and authors.
@end enumerate

All other non-permissive additional terms are considered ``further
restrictions'' within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions; the
above requirements apply either way.

@item Termination.

You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

@item Acceptance Not Required for Having Copies.

You are not required to accept this License in order to receive or run
a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

@item Automatic Licensing of Downstream Recipients.

Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

An ``entity transaction'' is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

@item Patents.

A ``contributor'' is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's ``contributor version''.

A contributor's ``essential patent claims'' are all patent claims owned
or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, ``control'' includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

In the following three paragraphs, a ``patent license'' is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To ``grant'' such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  ``Knowingly relying'' means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

A patent license is ``discriminatory'' if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on
the non-exercise of one or more of the rights that are specifically
granted under this License.  You may not convey a covered work if you
are a party to an arrangement with a third party that is in the
business of distributing software, under which you make payment to the
third party based on the extent of your activity of conveying the
work, and under which the third party grants, to any of the parties
who would receive the covered work from you, a discriminatory patent
license (a) in connection with copies of the covered work conveyed by
you (or copies made from those copies), or (b) primarily for and in
connection with specific products or compilations that contain the
covered work, unless you entered into that arrangement, or that patent
license was granted, prior to 28 March 2007.

Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

@item No Surrender of Others' Freedom.

If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey
a covered work so as to satisfy simultaneously your obligations under
this License and any other pertinent obligations, then as a
consequence you may not convey it at all.  For example, if you agree
to terms that obligate you to collect a royalty for further conveying
from those to whom you convey the Program, the only way you could
satisfy both those terms and this License would be to refrain entirely
from conveying the Program.

@item Use with the GNU Affero General Public License.

Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

@item Revised Versions of this License.

The Free Software Foundation may publish revised and/or new versions
of the GNU General Public License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies that a certain numbered version of the GNU General Public
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that numbered version or
of any later version published by the Free Software Foundation.  If
the Program does not specify a version number of the GNU General
Public License, you may choose any version ever published by the Free
Software Foundation.

If the Program specifies that a proxy can decide which future versions
of the GNU General Public License can be used, that proxy's public
statement of acceptance of a version permanently authorizes you to
choose that version for the Program.

Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

@item Disclaimer of Warranty.

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ``AS IS'' WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
CORRECTION.

@item Limitation of Liability.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

@item Interpretation of Sections 15 and 16.

If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

@end enumerate

@heading END OF TERMS AND CONDITIONS

@heading How to Apply These Terms to Your New Programs

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the ``copyright'' line and a pointer to where the full notice is found.

@smallexample
@var{one line to give the program's name and a brief idea of what it does.}
Copyright (C) @var{year} @var{name of author}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see @url{http://www.gnu.org/licenses/}.
@end smallexample

Also add information on how to contact you by electronic and paper mail.

If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

@smallexample
@var{program} Copyright (C) @var{year} @var{name of author}
This program comes with ABSOLUTELY NO WARRANTY; for details type @samp{show w}.
This is free software, and you are welcome to redistribute it
under certain conditions; type @samp{show c} for details.
@end smallexample

The hypothetical commands @samp{show w} and @samp{show c} should show
the appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an ``about box''.

You should also get your employer (if you work as a programmer) or school,
if any, to sign a ``copyright disclaimer'' for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
@url{http://www.gnu.org/licenses/}.

The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use
the GNU Lesser General Public License instead of this License.  But
first, please read @url{http://www.gnu.org/philosophy/why-not-lgpl.html}.


@c page
@node Documentation License
@appendix GNU Free Documentation License

@cindex FDL, GNU Free Documentation License
@center Version 1.1, March 2000

@display
Copyright @copyright{} 2000 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@enumerate 0
@item
PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document @dfn{free} in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

@item
APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The ``Document'', below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as ``you''.

A ``Modified Version'' of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A ``Secondary Section'' is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The ``Invariant Sections'' are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The ``Cover Texts'' are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A ``Transparent'' copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not ``Transparent'' is called ``Opaque''.

Examples of suitable formats for Transparent copies include plain
@sc{ascii} without markup, Texinfo input format, La@TeX{} input format,
@acronym{SGML} or @acronym{XML} using a publicly available
@acronym{DTD}, and standard-conforming simple @acronym{HTML} designed
for human modification.  Opaque formats include PostScript,
@acronym{PDF}, proprietary formats that can be read and edited only by
proprietary word processors, @acronym{SGML} or @acronym{XML} for which
the @acronym{DTD} and/or processing tools are not generally available,
and the machine-generated @acronym{HTML} produced by some word
processors for output purposes only.

The ``Title Page'' means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

@item
VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

@item
COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.

@item
MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

@enumerate A
@item
Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

@item
List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).

@item
State on the Title page the name of the publisher of the
Modified Version, as the publisher.

@item
Preserve all the copyright notices of the Document.

@item
Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

@item
Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

@item
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.

@item
Include an unaltered copy of this License.

@item
Preserve the section entitled ``History'', and its title, and add to
it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section entitled ``History'' in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

@item
Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the ``History'' section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

@item
In any section entitled ``Acknowledgments'' or ``Dedications'',
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgments
and/or dedications given therein.

@item
Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

@item
Delete any section entitled ``Endorsements''.  Such a section
may not be included in the Modified Version.

@item
Do not retitle any existing section as ``Endorsements''
or to conflict in title with any Invariant Section.
@end enumerate

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties---for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

@item
COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled ``History''
in the various original documents, forming one section entitled
``History''; likewise combine any sections entitled ``Acknowledgments'',
and any sections entitled ``Dedications''.  You must delete all sections
entitled ``Endorsements.''

@item
COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.

@item
AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an ``aggregate'', and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.

@item
TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.

@item
TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
@uref{http://www.gnu.org/copyleft/}.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
@end enumerate

@page
@appendixsubsec ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@smallexample
@group
  Copyright (C)  @var{year}  @var{your name}.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.1
  or any later version published by the Free Software Foundation;
  with the Invariant Sections being @var{list their titles}, with the
  Front-Cover Texts being @var{list}, and with the Back-Cover Texts being @var{list}.
  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
@end group
@end smallexample

If you have no Invariant Sections, write ``with no Invariant Sections''
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write ``no Front-Cover Texts'' instead of
``Front-Cover Texts being @var{list}''; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.


@c ------------------------------------------------------------



@c page
@node references
@appendix Bibliography and references



@c ------------------------------------------------------------

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
