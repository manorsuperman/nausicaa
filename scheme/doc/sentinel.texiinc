@node sentinel
@chapter The sentinel value


The @library{sentinel} library defines a unique value and a predicate to
test it.  The sentinel value can be used as terminator for sequences or
as value for uninitialised storage locations.


@defvr Constant sentinel
The sentinel value.
@end defvr


@defun sentinel? @var{obj}
Return @true{} if @var{obj} is the sentinel value.
@end defun


As usage example, the following form makes use of the sentinel as
terminator for a list:

@example
(let ((ell (list 1 2 3 4 5 sentinel)))
  (let loop ((ell ell)
             (res '()))
    (if (sentinel? (car ell))
        res
      (loop (cdr ell) (cons (car ell) res)))))
@result{} (5 4 3 2 1))
@end example

@noindent
the following form defines an iterator closure using the sentinel to
signal the end of the iteration:

@example
(let* ((ell  '(1 2 3 4 5))
       (iter (lambda ()
               (let ((ell ell))
                 (if (null? ell)
                     sentinel
                   (begin
                     (car ell)
                     (set! ell (cdr ell))))))))
  (let loop ((res '()))
    (let ((v (iter)))
      (if (sentinel? v)
          res
        (loop (cons v res))))))
@result{} (5 4 3 2 1)
@end example


@defun make-sentinel
Return a new sentinel value.  @func{sentinel?} will return @true{} when
applied to such a value, but new sentinel values are meant to be checked
with @func{eq?}.

New sentinels can be used in situations where a unique terminator is
needed: When we need to distinguish @samp{sentinel} from a temporary
sentinel we need for a specific operation.
@end defun


@defvr Constant undefined
The undefined value.
@end defvr


@defun undefined? @var{obj}
Return true if @var{obj} is @func{eq?} to @code{undefined}.
@end defun


@defvr Constant undefined
The unspecified value.
@end defvr


@defun unspecified? @var{obj}
Return true if @var{obj} is @func{eq?} to @code{unspecified}.
@end defun

@c end of file
