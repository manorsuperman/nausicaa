@node infix
@chapter Infix notation utilities


The @library{infix} library provides utilities to convert infix notation
expressions to prefix notation expressions; the library is built upon
@library{nausicaa}, @library{silex lexer} and @library{lalr lr-driver}.

@menu
* infix strings::               Converting strings.
* infix sexps::                 Converting S--expressions.
* infix syntax::                Infix notation expressions.
@end menu

@c page
@node infix strings
@section Converting strings


@defun infix-string->sexp @var{expr-string}
Return the prefix S--expression corresponding to @var{expr-string}.  The
S--expression can be used directly for some symbolic interpretation or
evaluated with @func{eval}.  @nauref{stdlib eval, Evaluation}

Examples:

@example
(infix-string->sexpr "1*2-3")   @result{} (- (* 1 2) 3)
(infix-string->sexpr "1//3")    @result{} (div 1 3)
(infix-string->sexpr "1%3")     @result{} (mod 1 3)
(infix-string->sexpr "1^3")     @result{} (expt 1 3)

(infix-string->sexpr "cos(sin(1.1)+4)")
@result{} (cos (+ (sin 1.1) 4))

(infix-string->sexpr "fun(1, 2, 3, 4)")
@result{} (fun 1 2 3 4)

(infix-string->sexpr "cos(a) * (tan(b) / c)")
@result{} (* (cos a) (/ (tan b) c))

(infix-string->sexp "a * (b / a ? b : c)")
@result{} (* a (if (/ b a) b c))
@end example
@end defun

Some interpretation rules:

@itemize
@item
Blank characters are ignored.

@item
Symbols in @var{expr-string} must match the following @library{silex}
regular expression:

@example
initial         [a-zA-Z_]
subsequent      @{initial@}|[0-9\.@@!$&:<=>\?~\-]
symbol          @{initial@}@{subsequent@}*
@end example

@noindent
@ref{silex syntax, Syntax of the specification}.

@item
The following infix operators are supported, in order of increasing
precedence from left to right:

@example
+ - * / // % ^ < > <= >= =
@end example

@noindent
remember that the Scheme comparison operators are meant to return a
boolean value, rather than a number object.  @samp{//} stands for
@func{div}, @samp{%} stands for @func{mod}, @samp{^} stands for
@func{expt}.

@item
The if--then--else statement involves the special symbols @code{?} and
@code{:} which cannot be variable symbols; this statement has the least
precedence.

@item
Every symbol which is not an operator is interpreted as variable
reference or function call.  If the first non--blank character following
the symbol is an open parenthesis, it is interpreted as function call.
@end itemize

@c page
@node infix sexps
@section Converting S--expressions


@defun infix->prefix @var{sexp-atom} ...
Convert the infix S--expression composed of the sequence of
@var{sexp-atom} arguments into a prefix S--expression.  The
S--expression can be used directly for some symbolic interpretation or
evaluated with @func{eval}.  @nauref{stdlib eval, Evaluation}

The simplest way to use the function is to apply it to a single
S--expression:

@example
(infix->prefix '(1 + 2 + 3))    @result{} '(+ (+ 1 2) 3)
(infix->prefix '(1 + 2 - 3))    @result{} '(- (+ 1 2) 3)
(infix->prefix '(1 + (2 + 3)))  @result{} '(+ 1 (+ 2 3))
(infix->prefix '(1 + (2 - 3)))  @result{} '(+ 1 (- 2 3))

(infix->prefix '(cos (sin (1.1))))
@result{} (cos (sin 1.1))

(infix->prefix '(cos (sin (1.1) + 4)))
@result{} (cos (+ (sin 1.1) 4))

(infix->prefix '(fun (1.1 2)))
@result{} (fun 1.1 2)

(infix->prefix '(fun (1 2 3 4)))
@result{} (fun 1 2 3 4)

(infix->prefix '(a * (b / a ? b : c)))
@result{} (* a (if (/ b a) b c))
@end example

@noindent
while applying it to multiple arguments looks like:

@example
(infix->prefix 1 '+ 2 '+ 3)     @result{} '(+ (+ 1 2) 3)
@end example

Some interpretation rules:

@itemize
@item
The following infix operators are supported, in order of increasing
precedence from left to right:

@example
+ - * / // % ^ < > <= >= =
@end example

@noindent
remember that the Scheme comparison operators are meant to return a
boolean value, rather than a number object.  @samp{//} stands for
@func{div}, @samp{%} stands for @func{mod}, @samp{^} stands for
@func{expt}.

@item
The if--then--else statement involves the special symbols @code{?} and
@code{:} which cannot be variable symbols; this statement has the least
precedence.

@item
The elements of the S--expression can be numbers, symbols, procedures,
all ``the other'' values.

@item
Symbols which are not operators are interpreted as variable references
or function calls.  If a symbol is followed by a list, it is a function
call.

@item
Function calls with one or more arguments require the arguments to be
grouped in a list.  There is no special separator in the list of
arguments.

@item
Procedures are treated like non--operator symbols.

@item
Numbers and all ``the other'' values are just put there.
@end itemize
@end defun

@c page
@node infix syntax
@section Infix notation expressions


The following bindings are exported by the @library{infix syntax}
library and reexported by the @library{infix} library.


@deffn Syntax infix @ameta{atom} ...
Expand to a prefix expression to be evaluated at runtime, in the lexical
context of the macro use; as a special case @code{(infix)} is equivalent
to @code{(values)}.  The syntax allows us to evaluate forms like:

@example
(let ((a 1) (b 2) (c 3))

  (infix cos (a) * tan (b) / c)
  @expansion{} (/ (* (cos a) (tan b)) c)

  (infix (cos (a) * tan (b) / c))
  @expansion{} (/ (* (cos a) (tan b)) c)

  (infix a ? b : c)
  @expansion{} (if a b c)

  #f)
@end example

Some interpretation rules:

@itemize
@item
The following infix operators are supported, in order of increasing
precedence from left to right:

@example
+ - * / div // div0 mod mod0 % expt ^ < > <= >= =
@end example

@noindent
remember that the Scheme comparison operators are meant to return a
boolean value, rather than a number object.  @samp{//} is an alias for
@func{div}, @samp{%} is an alias for @func{mod}, @samp{^} is an alias
for @func{expt}.  The recognised operators are bindings from both the
@library{rnrs} and @library{nausicaa} libraries; @samp{//}, @samp{%} and
@samp{^} should be free identifiers.

@item
The if--then--else statement involves the special symbols @code{?} and
@code{:} which should be free identifiers.  This statement has the least
precedence of all.

@item
Any Scheme value can be element of the S--expression.

@item
Symbols which are not operators are interpreted as variable references;
if a symbol is followed by a list, it is a function call.

@item
Function calls with one or more arguments require the arguments to be
grouped in a list; there is no special separator in the list of
arguments.

@example
(define (fun a b c)
  (+ a b c))

(infix fun (1 2 3)) @expansion{} (fun 1 2 3)

(infix fun(1 2 3))  @expansion{} (fun 1 2 3)
@end example

Notice that grouping the function arguments in a list is a requirement
of the infix expressions grammar.

@item
Numbers and all ``the other'' values are just put there as operands.

@item
As a special exception: the binding @func{begin} from @library{rnrs} is
recognised in the input form and allows us to nest prefix--notation
expressions.

@example
(infix (begin (+ 1 2)))
@result{} 3

(infix (begin
         (let ((a 3))
           (/ a 4))))
@result{} 3/4

(let ((a 3))
  (infix (begin (/ a 4))))
@result{} 3/4

(let ((a 1) (b 2) (c 3))
  (infix (1 + a ? (begin
                    (+ 2 b))
                : 3 + c - 4))
  @expansion{} (if (+ 1 a)
          (begin (+ 2 b))
        (- (+ 3 c) 4))
  #f)
@end example
@end itemize
@end deffn

@c end of file
