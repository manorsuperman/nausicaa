@node parameters
@chapter Parameter objects


The following bindings are exported by the @library{parameters} library.


@defun make-parameter @var{init}
@defunx make-parameter @var{init} @var{converter}
Return a new parameter object which is bound to a cell containing the
value returned by @code{(converter init)}.  If @var{converter} is not
specified, the identity function is used instead.

The parameter object is a procedure which accepts zero or one argument.
When it is called with no argument, the content of the cell bound to
this parameter object in the current dynamic environment is returned.
When it is called with one argument, the content of the cell bound to
this parameter object in the current dynamic environment is set to the
result of the call @code{(converter arg)}, where @var{arg} is the
argument passed to the parameter object, and an unspecified value is
returned.

Examples:

@example
(define radix
  (make-parameter 10))

(radix)         @result{} 10
(radix 2)
(radix)         @result{} 2
@end example
@end defun


@deffn Syntax parameterize ((@var{expr1} @var{expr2}) ...) . @var{body}
@deffnx Syntax parameterise ((@var{expr1} @var{expr2}) ...) . @var{body}
@deffnx Syntax parametrise ((@var{expr1} @var{expr2}) ...) . @var{body}
The expressions @var{expr1} and @var{expr2} are evaluated in an
unspecified order.  The value of the @var{expr1} expressions must be
parameter objects.  For each @var{expr1} expression and in an
unspecified order, the local dynamic environment is extended with a
binding of the parameter object @var{expr1} to a new cell whose content
is the result of the call @code{(converter val)}, where @var{val} is the
value of @var{expr2} and @var{converter} is the conversion procedure of
the parameter object.

The resulting dynamic environment is then used for the evaluation of the
forms in @var{body}.  The result(s) of the @func{parameterize} form are
the result(s) of the @var{body}.

With reference to the example above:

@example
(radix)
@result{}  2

(parameterize ((radix 16))
  (radix))
@result{}  16

(radix)
@result{}  2

(define (f n)
  (number->string n (radix)))

(f 10)
@result{}  "1010"

(parameterize ((radix 8))
  (f 10))
@result{}  "12"
@end example
@end deffn

@c end of file
