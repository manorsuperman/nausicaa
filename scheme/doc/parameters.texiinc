@node parameters
@chapter Parameter objects


@cindex @library{nausicaa language parameters}, library
@cindex Library @library{nausicaa language parameters}


The following bindings are exported by the @library{nausicaa language
parameters} library.


@defun make-parameter @var{init}
@defunx make-parameter @var{init} @var{converter}
Return a new parameter object which is associated to a mutable storage
location containing the value @var{init}.  The optional argument
@var{converter} is meant to be a procedure accepting one argument and
returning one value; when not given: the identity procedure is used.
@var{converter} is @strong{not} applied to @var{init} when initialising
the location.

The parameter object is a procedure which accepts zero, one or two
arguments:

@itemize
@item
When it is called with no argument, the content of location in the
current dynamic environment is returned.

@item
When it is called with one argument @var{arg}, the content of the
location in the current dynamic environment is set to the result of the
call @code{(@var{converter} @var{arg})}, and an unspecified value is
returned.

@item
When it is called with two arguments, the first being @var{arg} and the
second being @var{bool}, the content of the location in the current
dynamic environment is set to:

@itemize -
@item
When @var{bool} is false: @var{arg} itself.

@item
When @var{bool} is true: the result of the call @code{(@var{converter}
@var{arg})}.
@end itemize

@noindent
an unspecified value is returned.
@end itemize

Examples:

@example
(define radix
  (make-parameter 10))

(radix)         @result{} 10
(radix 2)
(radix)         @result{} 2
@end example
@end defun


@deffn Syntax parameterize ((@vari{expr} @varii{expr}) ...) . @var{body}
@deffnx Syntax parameterise ((@vari{expr} @varii{expr}) ...) . @var{body}
@deffnx Syntax parametrise ((@vari{expr} @varii{expr}) ...) . @var{body}
The expressions @vari{expr} and @varii{expr} are evaluated in an
unspecified order.  The value of the @vari{expr} expressions must be
parameter objects.  For each @vari{expr} expression and in an
unspecified order, the local dynamic environment is extended with a
binding of the parameter object @vari{expr} to a new location whose
content is the result of the call @code{(@var{converter} @var{val})},
where @var{val} is the value of @varii{expr} and @var{converter} is the
conversion procedure of the parameter object.

The resulting dynamic environment is then used for the evaluation of the
forms in @var{body}.  The result(s) of the @func{parameterize} form are
the result(s) of the @var{body}.

This macro takes care of applying the @var{converter} procedures only to
the new values of the parameters; when the old values are restored: the
@var{converter} is @strong{not} applied to the old value.

With reference to the example above:

@example
(radix)
@result{}  2

(parameterize ((radix 16))
  (radix))
@result{}  16

(radix)
@result{}  2

(define (f n)
  (number->string n (radix)))

(f 10)
@result{}  "1010"

(parameterize ((radix 8))
  (f 10))
@result{}  "12"
@end example
@end deffn

@c end of file
