@node generics
@chapter Multimethods dispatching


In the context of the @library{generics} library, @dfn{generic
functions} are interfaces to procedures that can be specialised to the
(possibly conventional) data types of their arguments; each
specialisation of a generic function is called @dfn{method}.  When
applying a generic function to a set of arguments, the most specific
method with respect to the arguments' types is chosen.

The @library{generics} library is built on top of the @library{classes}
library.

@menu
* generics examples::           Examples of method dispatching.
* generics application::        How generic functions and methods
                                are invoked.
* generics dispatching::        How methods are dispatched.
* generics define::             Defining generic functions and methods.
* generics next::               Invoking the next method.
* generics predefined::         Predefined generic functions.
@end menu

@c page
@node generics examples
@section Examples of method dispatching


Here we show with some examples what we have to expect from the
multimethod dispatching of @library{generics}.  In the following examples
the string @code{%apple} is written in place of the value bound to the
symbol @class{apple}.

Let's examine this example which uses the @library{classes} library:

@example
(define-class <one> (inherit <top>) (nongenerative one))
(define-class <two> (inherit <one>) (nongenerative two))
(define-class <c>   (inherit <two>) (nongenerative c))
@end example

@noindent
the record hierarchy is:

@example
<top> -> <one> -> <two> -> <c>
@end example

@noindent
the list of @uid{}s for @class{c} is:

@example
(class-uid-list <c>)
@result{} (c two one nausicaa:builtin:<top>)
@end example

@noindent
so for the generic function:

@example
(define-generic doit)
(define-method (doit (o <one>)) 'one)
(define-method (doit (o <two>)) 'two)
@end example

@noindent
applied to a value of type @class{c}: the method with @class{two} in the
signature is @emph{more specific} than the method with @class{one} in
the signature:

@example
(doit (make-<c>)) @result{} two
@end example

@noindent
also the method with @class{one} in the signature is the ``next method''
of the method with @class{two} in the signature, we can call it using
@func{call-next-method}.

The following example shows a call to the next method:

@example
(define-generic fluff)

(define-method (fluff (o <one>))
  'one)

(define-method (fluff (o <two>))
  (cons 'two (call-next-method)))

(define o (make-<c>))

(fluff o)
@result{} (two . one)
@end example

The syntax @func{define-generic} defines a macro and the syntax
@func{define-method} add a new method to the generic function; the first
method definition establishes the number of arguments for the generic
function: all the methods added afterwards must have the same number of
arguments.

It is possible to define a function accepting different numbers of
arguments as follows:

@example
(define fluff
  (case-lambda
   ((a)
    (fluff-1 a))
   ((a b)
    (fluff-2 a b))
   ((a b . rest)
    (fluff-3 a b rest))))

(define-generic fluff-1)
(define-generic fluff-2)
(define-generic fluff-3)

(define-method (fluff-1 (o <one>))
  ---)

(define-method (fluff-2 (o <one>) (p <two>))
  ---)

(define-method (fluff-3 (o <one>) (p <two>) rest)
  ---)
@end example

@noindent
this way we turn a set of macros into a single ``generic function''
which is truly a function.  If we avoid wrapping the macros into a
function we gain a bit of speed in function calls.

@c page
@node generics application
@section How generic functions and methods are invoked


@library{generics} is designed to work with class definitions from the
@library{classes} library; when a generic function is applied to a tuple
of arguments, the following happens:

@enumerate
@item
For each argument in the tuple a class type is determined, then the list
of unique @uid{}s representing the class hierarchy is acquired; the
tuple of @uid{} lists is called @dfn{signature}.  Each generic function
maintains an internal collection in which every method's closure is
associated to a signature.

@item
The internal collection of methods is queried for all the methods
applicable to the tuple of arguments, using the signature as search key.

@item
The list of applicable methods is sorted from the more specific to the
least specific for the signature.  From now on the list of sorted,
applicable methods is handled as a stack.

@item
The next method is popped from the stack and its closure applied to the
tuple of arguments; the return value of this application becomes the
return value of the generic function application.  If the function calls
the next method, recurse to step 4.
@end enumerate

@c page
@node generics dispatching
@section How methods are dispatched


Here we attempt the formulation of the rules of method dispatching.  A
method is identified by a couple of values: the signature and the
closure.

@c ------------------------------------------------------------

@subsubheading Applicability

First we need to understand when a method is applicable to a tuple of
arguments:

@enumerate
@item
Methods in a generic function have the same number of arguments, so the
tuple of arguments must match that number.

@item
Given a tuple of arguments, position by position, the class of the
method's argument is equal to, or a parent of, the class of the given
argument.
@end enumerate

@c ------------------------------------------------------------

@subsubheading Specificity

Now we can understand how to determine which one, among two applicable
methods, is more specific for a tuple of arguments.  Let's call the
methods @var{A} and @var{B}.

Notice that it is impossible for two distinct methods, in the same
generic function, to have the same signature.

Also, classes support only single inheritance, so if two methods are
applicable: the homologous lists of @uid{}s in their signatures, have at
least one @func{eq?} member (different from @class{top}).

The lists of @uid{}s in the signatures are compared in couples, position
by position from the beginning to the end.

@enumerate
@item
If the first @uid{}s are @func{eq?}: the next couple is inspected.

@item
If the @uid{} from @var{B} is a member of the list from @var{A}: @var{A}
is more specific than @var{B}.
@end enumerate

@c page
@node generics define
@section Defining generic functions and methods


@deffn Syntax define-generic @ameta{name}
Define a new generic function (a macro) and bind it to @meta{name}.  The
number of arguments is unspecified: it will be established by the first
@func{define-method} or @func{add-method} applied to @meta{name}.
@end deffn


@deffn Syntax define-generic/merge @ameta{name} @ametao{generic} @ameta{generic} ...
Define a new generic function and bind it to @meta{name}.  The internal
collection of methods holds the union of the method collections from the
@meta{generic} arguments, which must be generic function identifiers.

The union is performed visiting arguments from left to right; when two
methods have the same signature, the one from the leftmost generic
function has precedence.

Merging methods is useful when two different libraries export generic
functions bound to the same identifier.
@end deffn


@deffn Syntax define-method @ameta{generic} (@ameta{arg-spec} ...) @ameta{body}
@deffnx Syntax define-method (@ameta{generic} @ameta{arg-spec} ...) @ameta{body}
Add a new method to an already existent generic function,
@ameta{generic}.

The list of @meta{arg-spec} specifies the class of the arguments for
which this method specialises the generic function; an @meta{arg-spec}
can be:

@table @code
@item (@cmeta{arg} @cmeta{class name})
Where @meta{arg} is the formal name of the argument and @meta{class
name} the (possibly conventional) class name of expected values.

@item @cmeta{arg}
Where @meta{arg} is the formal name of the argument.  In this case the
class defaults to the conventional @class{top}, which is interpreted as
parent of every other class (and so it has the least specificity).
@end table

If a method is defined with the same signature of an already registered
method: the old method is overwritten by the new one.
@end deffn


@deffn Syntax add-method @ameta{generic} @ameta{classes} @ameta{closure}
Add a new method to an already existent generic function,
@meta{generic}.  @meta{classes} must be a list of class names for which
this method specialises the generic function.  @meta{closure} must be
the method's closure.
@end deffn

@c page
@node generics next
@section Invoking the next method


The ``traditional'' way to make the bindings @func{call-next-method} and
@func{next-method?} available in the body of methods is to add two
arguments to the function at expand time; the following method function:

@example
(lambda (arg1 arg2)
  ---)
@end example

@noindent
is changed to:

@example
(lambda (call-next-method next-method? arg1 arg2)
  ---)
@end example

@noindent
this way the bindings are available only to the methods.  This
implementation requires the source syntax object of the method to be
available at expansion time, and to hold a @func{lambda} form.

@library{generics} instead makes use of parameters; this allows
functions from foreign libraries to be used directly as methods and also
macros to be used as methods (through @func{add-method}, which requires
only the method's identifier).  The bindings are available also to code
outside the method implementations, but this is not a big problem.


@defun call-next-method
Call the next most specific method.
@end defun


@defun next-method?
Return true if a next method is available.
@end defun

@c page
@node generics predefined
@section Predefined generic functions


The following bindings are exported by the @library{generics
object-to-string} library.


@deffn {Generic Function} object->string @var{obj}
Return a string representation for @var{obj}.  A non--specialised method
is predefined to use the following implementation:

@example
(call-with-string-output-port
   (lambda (port)
     (display obj port)))
@end example
@end deffn

@c end of file
