\input texinfo.tex
@c %**start of header
@setfilename nausicaa.info
@settitle Nausicaa for Scheme
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@macro aclass{NAME}
<\NAME\>
@end macro

@macro cclass{NAME}
<\NAME\>
@end macro

@macro objtype{NAME}
@code{\NAME\}
@end macro

@macro condition{NAME}
@code{&\NAME\}
@end macro

@macro enum{NAME}
@code{enum-\NAME\}
@end macro

@macro rtd{}
@acronym{RTD}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@macro naumoreref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa-more}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@c The following macro does not work.  It appears that it is not
@c possible to use "@cindex" in the expansion of a macro because the DVI
@c output will not work.  Texinfo output would work, though.  Tested
@c with "texi2dvi" version 1.135 (GNU Texinfo 4.13).
@c
@c @macro cindexRsixlibrary{THING}
@c @cindex @rsixlibrary{\THING\}, library
@c @cindex Library, @rsixlibrary{\THING\}
@c @end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metao{THING}
<\THING\0>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@macro metan{THING}
<\THING\N>
@end macro

@macro metani{THING}
<\THING\N+1>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetao{THING}
<\THING\0>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@macro cmetan{THING}
<\THING\N>
@end macro

@macro cmetani{THING}
<\THING\N+1>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametao{THING}
<\THING\0>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@macro ametan{THING}
<\THING\N>
@end macro

@macro ametani{THING}
<\THING\N+1>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Nausicaa for Scheme

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/Scheme

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2008, 2009, 2010


@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a set of
Scheme libraries defining a slightly modified @rnrs{6} Scheme language
and augmenting the features of the base and standard @rnrs{6} libraries.
@naumoreref{Top, More Nausicaa Libraries} for the documentation of
additional libraries.

The project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR}.@*
Copyright @copyright{} 1996, 1997, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation.@*
Copyright @copyright{} 1996, 1999-2005 Dorai Sitaram.@*
Copyright @copyright{} 1998 Oleg Kiselyov.@*
Copyright @copyright{} 1998, 1999, 2000 Olin Shivers.@*
Copyright @copyright{} 1999 John David Stone.@*
Copyright @copyright{} 1999, 2002 Marc Feeley.@*
Copyright @copyright{} 2001, 2009 Danny Dube'@*
Copyright @copyright{} 2002 Dr. Mirko Luedde.@*
Copyright @copyright{} 2002, 2003, 2005, 2006 Sebastian Egner.@*
Copyright @copyright{} 2003 Ray Dillinger.@*
Copyright @copyright{} 2003 Taylor Campbell.@*
Copyright @copyright{} 2005 Jens Axel Soegaard.@*
Copyright @copyright{} 2005-2009 Alex Shinn.@*
Copyright @copyright{} 2008 Taro Minowa (Higepon).@*
Copyright @copyright{} 2005-2008 Dominique Boucher.@*
Copyright @copyright{} 2004, 2005 Tony Garnock-Jones@*
Copyright @copyright{} 2005 LShift Ltd.@*
Copyright @copyright{} 2007, 2008 Philip L. Bewig.@*
Copyright @copyright{} 2000 Will Fitzgerald.@*
Copyright @copyright{} 2000 Neodesic Corporation.@*
Copyright @copyright{} 2000-2006 Joachim Henke.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation

This document embeds an unofficial assemblage of several documents
reformatted in Texinfo; the reformatting author and maintainer is
@value{AUTHOR} @value{AUTHOR_EMAIL}.  See the appendix ``Credits'' for
the list of original documents and their authors.  See also the
@file{README} and @file{CREDITS} files for additional attributions.
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Version @version{}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa: (nausicaa).         @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top, overview, (dir), (dir)
@top @value{TITLE}

@insertcopying

@menu
* overview::
* scheme::                      The Scheme language.
* baselib::                     Base library.
* stdlib::                      Standard libraries.
* nausicaa::                    The @library{nausicaa} language.

Basic libraries

* cond-expand::                 Feature-based conditional expansion.
* unimplemented::               Unimplemented error condition.
* conditions::                  More condition types.
* lang::                        Simple language extensions.
* pretty-print::                Pretty printing.
* parameters::                  Parameter objects.
* shared-structures::           External representation for data
                                with shared structure.
* sentinel::                    The sentinel value.
* makers::                      Maker syntaxes.
* classes::                     Record utilities.
* compensations::               Compensation stacks.
* deferred exceptions::         Deferred exceptions.

More libraries

* ffi::                         Foreign functions interface.
* notes::
* examples::                    Scheme programming examples.
* binfmt::                      Launching programs directly.
* credits::                     Credits.
* Package License::             @gnu{} General Public License.
* Documentation License::       @gnu{} Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.



@detailmenu
 --- The Detailed Node Listing ---

Overview of the distribution

* overview implementation::     Supported implementations.
* overview porting::            On writing portable code.
* overview libraries::          Other libraries.
* overview binfmt::             Launching Scheme programs directly.

The Scheme language

* scheme overview::             Overview of Scheme.
* scheme requirements::         Requirement levels.
* scheme numbers::              Numbers.
* scheme lex::                  Lexical syntax and datum syntax.
* scheme basic::                Semantic concepts.
* scheme entry::                Entry format.
* scheme library::              Libraries.
* scheme programs::             Top-level programs.
* scheme syntax::               Primitive syntax.
* scheme expansion::            Expansion process.
* scheme derived::              Sample definitions for derived forms.

Overview of Scheme

* scheme overview intro::         Introduction.
* scheme overview basic types::   Basic types.
* scheme overview expressions::   Expressions.
* scheme overview variables::     Variables and binding.
* scheme overview definitions::   Definitions.
* scheme overview forms::         Forms.
* scheme overview procedures::    Procedures.
* scheme overview syntax::        Procedure calls and syntactic keywords.
* scheme overview assignment::    Assignment.
* scheme overview macros::        Derived forms and macros.
* scheme overview data::          Syntactic data and datum values.
* scheme overview continuations:: Continuations.
* scheme overview libraries::     Libraries.
* scheme overview programs::      Top--level programs.

Numbers

* scheme numbers tower::        Numerical tower.
* scheme numbers exactness::    Exactness.
* scheme numbers fix flo::      Fixnums and flonums.
* scheme numbers requirements:: Implementation requirements.
* scheme numbers inf nan::      Infinities and NaNs.
* scheme numbers minus zero::   Distinguished @math{-0.0}.

Lexical syntax and datum syntax

* scheme lex intro::            Introduction.
* scheme lex notation::         Notation.
* scheme lex syntax::           Lexical syntax.
* scheme lex datum::            Datum syntax.

Lexical syntax

* scheme lex syntax formal account::           Formal account.
* scheme lex syntax line endings::             Line endings.
* scheme lex syntax whitespace and comments::  Whitespace and comments.
* scheme lex syntax identifiers::              Identifiers.
* scheme lex syntax booleans::                 Booleans.
* scheme lex syntax characters::               Characters.
* scheme lex syntax strings::                  Strings.
* scheme lex syntax numbers::                  Numbers.

Datum syntax

* scheme lex datum formal account::  Formal account.
* scheme lex datum pairs and lists:: Pairs and lists.
* scheme lex datum vectors::         Vectors.
* scheme lex datum bytevectors::     Bytevectors.
* scheme lex datum abbreviations::   Abbreviations.

Semantic concepts

* scheme basic programs and libraries::      Programs and libraries.
* scheme basic variables keywords regions::  Variables, keywords,
                                             and regions.
* scheme basic exceptions::                  Exceptional situations.
* scheme basic argument checking::           Argument checking.
* scheme basic syntax violations::           Syntax violations.
* scheme basic safety::                      Safety.
* scheme basic boolean values::              Boolean values.
* scheme basic multiple return values::      Multiple return values.
* scheme basic unspecified behavior::        Unspecified behavior.
* scheme basic storage model::               Storage model.
* scheme basic proper tail recursion::       Proper tail recursion.
* scheme basic dynamic extent::              Dynamic extent and the
                                             dynamic environment.

Entry format

* scheme entry syntax::              Syntax entries.
* scheme entry procedure::           Procedure entries.
* scheme entry implementation resp:: Implementation responsibilities.
* scheme entry other kinds::         Other kinds of entries.
* scheme entry equivalent::          Equivalent entries.
* scheme entry evaluation examples:: Evaluation examples.
* scheme entry naming conventions::  Naming conventions.

Libraries

* scheme library form::           Library form.
* scheme library import export::  Import and export levels.
* scheme library examples::       Examples.

Library form

* scheme library form decl::      Library declaration.
* scheme library form names::     Library names.
* scheme library form export::    The export specification.
* scheme library form import::    The import specification.
* scheme library form version::   The version reference.
* scheme library form conflicts:: Handling conflicts.
* scheme library form body::      Library bodies.

Top--level programs

* scheme programs syntax::      Top-level program syntax.
* scheme programs semantics::   Top-level program semantics.

Primitive syntax

* scheme syntax primitive::     Primitive expression types.
* scheme syntax macros::        Macros.

Base library

* baselib types::               Base types.
* baselib definitions::         Definitions.
* baselib bodies::              Bodies.
* baselib expressions::         Expressions.
* baselib predicates::          Equivalence and procedure predicates.
* baselib math::                Mathematics.
* baselib booleans::            Booleans.
* baselib lists::               Pairs and lists.
* baselib symbols::             Symbols.
* baselib characters::          Characters.
* baselib strings::             Strings.
* baselib vectors::             Vectors.
* baselib errors::              Errors and violations.
* baselib control::             Control features.
* baselib iteration::           Iteration.
* baselib quasiquotation::      Quasiquotation.
* baselib syntax binding::      Binding constructs for syntactic keywords.
* baselib transformers::        Macro transformers.
* baselib tail call::           Tail calls and tail contexts.

Definitions

* baselib definitions variables::  Variables definitions.
* baselib definitions syntax::     Syntax definitions.

Expressions

* baselib expressions quotation::       Quotation.
* baselib expressions procedures::      Procedures.
* baselib expressions conditionals::    Conditionals.
* baselib expressions assignments::     Assignments.
* baselib expressions derived cond::    Derived conditionals.
* baselib expressions binding::         Binding constructs.
* baselib expressions sequencing::      Sequencing.

Mathematics

* baselib math exactness::      Propagation of exactness and inexactness.
* baselib math infinities::     Representability of infinities and NaNs.
* baselib math semantics::      Semantics of common operations.
* baselib math ops::            Numerical operations.
* baselib math string::         Numerical input and output.

Semantics of common operations

* baselib math semantics integer::      Integer division.
* baselib math semantics trascend::     Transcendental functions.

Numerical operations

* baselib math ops type pred::          Numerical type predicates.
* baselib math ops exactness::          Generic conversion.
* baselib math ops value pred::         Value predicates.
* baselib math ops comparison::         Comparison.
* baselib math ops arithmetic::         Arithmetic operations.
* baselib math ops part::               Part separation.
* baselib math ops trascend::           Trascendental functions.
* baselib math ops exponentiation::     Exponentiation functions.
* baselib math ops complex::            Complex numbers functions.

Standard libraries

* stdlib unicode::              Unicode.
* stdlib bytevector::           Bytevectors.
* stdlib list::                 List utilities.
* stdlib sorting::              Sorting.
* stdlib control::              Control structures.
* stdlib records::              Records.
* stdlib exceptions::           Exceptions and conditions.
* stdlib io::                   Input/output.
* stdlib files::                File system.
* stdlib programlib::           Command line access and exit values.
* stdlib arithmetics::          Arithmetics.
* stdlib syntax-case::          Syntax-case.
* stdlib hashtable::            Hashtables.
* stdlib enum::                 Enumerations.
* stdlib complib::              Composite library.
* stdlib eval::                 Evaluation.
* stdlib mutable pairs::        Mutable pairs.
* stdlib mutable strings::      Mutable strings.
* stdlib rfive compat::         @rnrs{5} compatibility.

Unicode

* stdlib unicode characters::   Characters.
* stdlib unicode strings::      Strings.

Bytevectors

* stdlib bytevector endianness::        Endianness.
* stdlib bytevector general::           General operations.
* stdlib bytevector bytes and octets::  Operations on bytes and octets.
* stdlib bytevector integers::          Operations on integers of
                                        arbitrary size.
* stdlib bytevector integers 16::       Operations on 16-bit integers.
* stdlib bytevector integers 32::       Operations on 32-bit integers.
* stdlib bytevector integers 64::       Operations on 64-bit integers.
* stdlib bytevector flonum::            Operations on @ieee{} 754
                                        representations.
* stdlib bytevector strings::           Operations on strings.

Records

* stdlib records intro::                Introduction.
* stdlib records mutability::           Mutability and equivalence
                                        of records.
* stdlib records syntactic layer::      Syntactic layer.
* stdlib records procedural layer::     Procedural layer.
* stdlib records inspection::           Inspection.

Exceptions and conditions

* stdlib exceptions exceptions::        Exceptions.
* stdlib exceptions conditions::        Conditions.

Conditions

* stdlib exceptions conditions objects::        Condition objects.
* stdlib exceptions conditions types::          Standard condition types.

Input/output

* stdlib io conditions::        Condition types.
* stdlib io port::              Port input/output.
* stdlib io simple::            Simple input/output.

Port input/output

* stdlib io port file names::           File names.
* stdlib io port file options::         File options.
* stdlib io port buffer modes::         Buffer modes.
* stdlib io port transcoders::          Transcoders.
* stdlib io port eof object::           End of file object.
* stdlib io port io ports::             Input and output ports.
* stdlib io port input ports::          Input ports.
* stdlib io port binary input::         Binary input.
* stdlib io port textual input::        Textual input.
* stdlib io port output ports::         Output ports.
* stdlib io port binary output::        Binary output.
* stdlib io port textual output::       Textual output.
* stdlib io port input output ports::   Input/output ports.

Arithmetics

* stdlib arithmetics bitwise::          Bitwise operations.
* stdlib arithmetics fixnum::           Fixnums.
* stdlib arithmetics flonum::           Flonums.
* stdlib arithmetics exact bitwise::    Exact bitwise arithmetic.

Syntax--case

* stdlib syntax-case intro::            Informal introduction
                                        for beginners.
* stdlib syntax-case hygiene::          Hygiene.
* stdlib syntax-case objects::          Syntax objects.
* stdlib syntax-case transformers::     Transformers.
* stdlib syntax-case parsing::          Parsing input and producing
                                        output.
* stdlib syntax-case identifier::       Identifier predicates.
* stdlib syntax-case conversion::       Syntax-object and datum
                                        conversions.
* stdlib syntax-case temporaries::      Generating lists of temporaries.
* stdlib syntax-case derived::          Derived forms and procedures.
* stdlib syntax-case violations::       Syntax violations.

Examples

* stdlib syntax-case lisp::             Common Lisp style macros.

Hashtables

* stdlib hashtable constructors::       Constructors.
* stdlib hashtable procedures::         Procedures.
* stdlib hashtable inspection::         Inspection.
* stdlib hashtable hash functions::     Hash functions.

The @library{nausicaa} language

* nausicaa libs::               Component libraries.
* nausicaa functions::          Normalised functions.
* nausicaa syntax::             Extended syntaxes.
* nausicaa environment::        Accessing environment variables.

More condition types

* conditions define::           Defining new condition types.
* conditions mismatch::         General mismatch error.
* conditions num-args::         Wrong number of arguments error.

Simple language extensions

* lang lang::                   Language constructs.
* lang let::                    Binding constructs.
* lang loop::                   Loop constructs.
* lang id::                     Bindings mutations.
* lang define::                 Macro definition helpers.

Maker syntaxes

* makers intro::                Introduction to maker macros.
* makers api::                  Defining makers.

Record utilities

* classes define::              Defining new class types.
* classes make::                Record makers.
* classes pred::                Record type predicates.
* classes inspect::             Class and instance inspection.
* classes dot::                 Using dot notation.
* classes builtin::             Conventional type descriptors.

Defining new class types

* classes define class::        Defining class types.
* classes define inherit::      Defining hierarchies of classes.
* classes define protocol::     Defining constructor protocols.
* classes define maker::        Defining class makers.
* classes define predicate::    Defining class predicates.
* classes define virtual::      Defining classes having virtual
                                fields.
* classes define method::       Defining classes having methods.
* classes define setter::       Defining classes having custom
                                setters and getters.
* classes define bindings::     Defining classes having custom
                                bindings.
* classes define labels::       Defining labels.

Using dot notation

* classes dot with::            Basic dot notation usage.
* classes dot let::             Local bindings.
* classes dot lambda::          Function bindings.
* classes dot setter::          Setters and getters.

Conventional type descriptors

* classes builtin chart::       A chart for predefined builtin types.
* classes builtin base::        Basic conventional types.
* classes builtin list::        Pairs and lists types.
* classes builtin compound::    Non--list compound types.
* classes builtin number::      Numeric objects types.
* classes builtin port::        Input/output port objects types.
* classes builtin string::      Character and string types.
* classes builtin misc::        Miscellaneous conventional types.

Compensation stacks

* compensations usage::         Basic compensations usage.
* compensations api::           Compensations @api{}.

Deferred exceptions

* deferred exceptions intro::   Introduction.
* deferred exceptions usage::   Usage examples.
* deferred exceptions api::     Programming interface.

Foreign--functions interface

* ffi core::                    Foreign--functions interface.
* ffi memory::                  Low level memory handling.
* ffi cstrings::                C language strings handling.
* ffi errno::                   C language system errors.

Foreign--functions interface

* ffi core libraries::          Installed libraries.
* ffi core conditions::         Condition objects.
* ffi core types::              Interface to C language types.
* ffi core sizeof::             Sizes and limits.
* ffi core pointers::           Pointer objects.
* ffi core access::             Direct access to memory blocks.
* ffi core call::               Callouts and callbacks.
* ffi core struct::             Accessing data structures.
* ffi core headers::            Inspecting foreign header files.
* ffi core generator::          Generating an interface.

Condition objects

* ffi core conditions library-name::    Foreign library names.
* ffi core conditions shared-object::   Shared objects.
* ffi core conditions foreign-symbol::  Foreign symbols.
* ffi core conditions opening::         Shared objects opening error.
* ffi core conditions lookup::          Shared objects lookup error.

Callouts and callbacks

* ffi core call shared::        Dynamic loading of libraries.
* ffi core call out::           Calling foreign functions.
* ffi core call back::          Calling Scheme functions.
* ffi core call macros::        Utility macros.
* ffi core call platform::      Low level interface.

Inspecting foreign header files

* ffi core headers setup::      Setting up the C language environment.
* ffi core headers includes::   Including header files.
* ffi core headers valueof::    Determining the value of expressions.
* ffi core headers sizeof::     Determining the size of data types.
* ffi core headers typeof::     Determining the basic type of data
                                types.
* ffi core headers alignof::    Determining the alignment of data
                                types.
* ffi core headers strideof::   Determining the array stride of data
                                types.
* ffi core headers offsetof::   Determining the offset of fields in
                                data structures.
* ffi core headers inspect::    Full inspection of data types.
* ffi core headers string::     Determining string values.
* ffi core headers common::     Common groups of tests.

Low level memory handling

* ffi memory conditions::       Out of memory errors.
* ffi memory alloc::            Allocation functions.
* ffi memory blocks::           Memory blocks.
* ffi memory cache::            Caching memory blocks.
* ffi memory compensate::       Compensations.
* ffi memory operations::       Operations.
* ffi memory bytevectors::      Bytevectors conversion.

Independent libraries

* ffi memory mempool::          Allocation from a memory pool.
* ffi memory refcount::         Reference counting.
* ffi memory membuffer::        Memory buffers.
* ffi memory guarded::          Guarded memory allocation.

Allocation functions

* ffi memory alloc system::     System functions.
* ffi memory alloc platform::   Platform functions.
* ffi memory alloc primitive::  Primitive functions.
* ffi memory alloc high::       Exception raising functions.
* ffi memory alloc examples::   Memory allocation examples.

Memory blocks

* ffi memory blocks type::        Record type definition.
* ffi memory blocks clone::       Duplicating blocks.
* ffi memory blocks conversion::  Conversion between blocks and other
                                  objects.
* ffi memory blocks portions::    Dealing with block portions.
* ffi memory blocks misc::        Miscellaneous stuff.

C language strings handling

* ffi cstrings constants::      Constant values.
* ffi cstrings inspection::     Inspecting cstrings.
* ffi cstrings operations::     Acting upon cstrings.
* ffi cstrings conversion::     Converting to and from cstrings.
* ffi cstrings argv::           Converting arrays of cstrings.

C language system errors

* ffi errno values::            Error codes.
* ffi errno enumerations::      Enumeration type.
* ffi errno conversion::        Conversion of error codes.
* ffi errno condition::         Raising exceptions.

Miscellaneous notes on everything

* notes nan::                   How to deal with not--a--number.

How to deal with not--a--number

* notes nan inf::               How to deal with infinities.
* notes nan nan::               Understanding not--a--number.

Scheme programming examples

* examples macros::             Exploring macro mechanisms.

Exploring macro mechanisms

* examples macros phases::      Bits about phases.
* examples macros underscore::  About the underscore.
* examples macros patterns::    About writing patterns.
* examples macros literals::    About literal identifiers.
* examples macros syntax::      Syntax objects and you.

Syntax objects and you

* examples macros syntax not::   What we do not do.

Launching programs directly

* binfmt overview::             Overview of the mechanism.
* binfmt loading::              Loading the module.
* binfmt registry::             The registry.
* binfmt using::                Using the mechanism.
* binfmt control::              Controlling the mechanism.
* binfmt hints::                Hints.
* binfmt scheme::               Running Scheme programs.

@end detailmenu
@end menu

@end ifnottex

@c page
@include overview.texiinc
@include scheme.texiinc
@include baselib.texiinc
@include stdlib.texiinc
@include nausicaa.texiinc
@include cond-expand.texiinc
@include unimplemented.texiinc
@include conditions.texiinc
@include lang.texiinc
@include pretty-print.texiinc
@include parameters.texiinc
@include shared-structures.texiinc
@include sentinel.texiinc
@include makers.texiinc
@include classes.texiinc
@include compensations.texiinc
@include deferred-exceptions.texiinc
@include ffi.texiinc

@c ------------------------------------------------------------
@c appendices

@include notes.texiinc
@include examples.texiinc
@include binfmt.texiinc
@include credits.texiinc

@c ------------------------------------------------------------
@c licenses

@include gpl-3.0.texiinc
@include fdl-1.3.texiinc

@c ------------------------------------------------------------
@c indices

@include references.texiinc
@include index-concept.texiinc
@include index-function.texiinc
@include index-variable.texiinc
@include index-type.texiinc

@contents
@bye

@c end of file
@c Local Variables:
@c mode: texinfo
@c TeX-master: t
@c End:
