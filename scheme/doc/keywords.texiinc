@node keywords
@chapter Keyword values


The @library{keywords} library implements a type of value,
@dfn{keywords}, disjoint from all the other types.  Keywords can be
treated much like symbols, but they must be compared with
@func{keyword=?} not @func{eq?}.


@deffn Syntax keyword @ameta{symbol}
@deffnx Function %keyword @var{symbol}
Both the macro and the function return a new keyword value associated to
the Scheme @var{symbol}.  The macro is a wrapper for the function, so
the following two forms are equivalent (notice the quoting):

@example
(keyword   alpha)
(%keyword 'alpha)
@end example

When this function is applied to the same symbol multiple times, it
returns the same keyword value; so those keywords are @func{eq?} to each
other.
@end deffn


@deffn Syntax define-keywords @ameta{symbol} ...
Build new keyword values using @func{keyword} upon @meta{symbol}
arguments, then bind them to @meta{symbol}.  Keyword values defined by
@func{define-keywords} can be, and are meant to be, exported by a
library if there is the need.
@end deffn


@defun keyword? @var{obj}
Return true if @var{obj} is a keyword value.
@end defun


@defun keyword=? @vari{obj} @varii{obj}
Return true if the arguments are equal keywords; two keywords are equal
if @func{keyword->symbol} applied to them returns the same symbol
according to @func{eq?}.
@end defun


@defun keyword->symbol @var{key}
@defunx symbol->keyword @var{str}
Convert a keyword to and from a symbol.
@end defun


@defun keyword->string @var{key}
@defunx string->keyword @var{str}
Convert a keyword to and from a string.
@end defun


@deffn Syntax with-keywords @var{keywords} @var{form0} @var{form} ...
Define a set of keywords while the forms are evaluated.  The following:

@example
(with-keywords (:a :b :c :d)
  ---)
@end example

@noindent
expands to:

@example
(let ((:a (keyword :a))
      (:b (keyword :b))
      (:c (keyword :c))
      (:d (keyword :d)))
  ---)
@end example
@end deffn


@deffn Syntax let-keywords @ameta{options} @ameta{allow-unknown} ((@ameta{name} @ameta{key} @ameta{default}) ...) @ameta{form0} @ameta{form} ...
@deffnx Syntax let-keywords* @ameta{options} @ameta{allow-unknown} ((@ameta{name} @ameta{key} @ameta{default}) ...) @ameta{form0} @ameta{form} ...
These are @func{let} and @func{let*} like macros that allow parsing a
list of keyword/value couples in @meta{options}.  All the @meta{key}
arguments must be keywords identifier; they are created by this form to
be available in the context of the @meta{form}.

@enumerate
@item
First all the @meta{default} expressions are evaluated and their results
bound to the @meta{name} identifiers, like with @func{let} or
@func{let*}.

@item
Then @meta{options} is parsed and the values associated to the @meta{key}
keywords are assigned to the @meta{name} variables.

@item
Finally the @meta{form} arguments are evaluated like in a @func{begin}
form.  The @meta{form} arguments are the region of the @meta{name}
bindings.
@end enumerate

If @meta{allow-unknown} is true: @meta{options} can contain keywords not
included in the @meta{key} list; else an error is raised.  Each keyword
in @meta{options} must be followed by a value, else an error is raised.

Example:

@example
(define (doit . options)
  (let-keywords options #f
       ((a :a #\a)
        (b :b #\b)
        (c :c #\c)
        (d :d #\d))
    (list a b c d)))

(with-keywords (:a :b :c :d)
  (doit :a 1 :b 2 :d 4))
@result{} (1 2 #\c 4)
@end example
@end deffn

@c end of file
