@node uri
@chapter Uniform resource identifiers


The @library{uri} library implements a parser and class type to handle
@uri{}s compliant with @rfc{} 3986.@footnote{@aurl{} last verified Thu
Jun 17, 2010:

@center @url{http://datatracker.ietf.org/doc/rfc3986/}
}

@menu
* uri string::                  Plain conversion between strings
                                and bytevectors.
* uri percent::                 Percent encoding of characters.
@end menu

@c page
@node uri string
@section Plain conversion between strings and bytevectors


The following bindings are exported by the @library{uri low} library; it
is suggested to prefix them when importing this library.


@defun to-bytevector @var{obj}
If @var{obj} is a bytevector: @var{obj} itself is returned.  If
@var{obj} is a string: convert it to a bytevector representation;
characters are taken from @var{obj} and inserted into the resulting
bytevector after decoding them, char to byte, as @ascii{}.
@end defun


@defun to-string @var{obj}
If @var{obj} is a string: @var{obj} itself is returned.  If @var{obj} is
a bytevector: convert it to a string representation; bytes are taken
from @var{obj} and inserted into the resulting string after encoding
them, byte to char, as @ascii{}.
@end defun

@c page
@node uri percent
@section Percent encoding of characters


A string is valid as @uri{} component only if its characters match the
following @library{silex} specification:

@example
ALPHA           [a-zA-Z]
DIGIT           [0-9]
HEXDIG          [0-9a-fA-F]

pct-encoded     %@{HEXDIG@}@{HEXDIG@}

gen-delims      [:/\?#\[\]@@]
sub-delims      [\!\$&\'()\*\+,\;=]

reserved        @{gen-delims@}|@{sub-delims@}
unreserved      @{ALPHA@}|@{DIGIT@}|[\-\._~]
@end example

@noindent
@ref{silex syntax} for the syntax of the specification.  All the
characters which are not unreserved are meant to be percent--encoded in
a @uri{} string; in particular the following must be encoded:

@example
: / ? # [ ] @ \ ! $ & ' ( ) * + , ; =
@end example

@noindent
the characters in the unreserved set can, but should not, be encoded.

The following bindings are exported by the @library{uri low} library; it
is suggested to prefix them when importing this library.


@defun unreserved-char? @var{obj}
Return true if @var{obj} represents an unreserved character according to
@rfc{} 3986.  @var{obj} can be either a character or an integer
representing a character according to @func{char->integer}.
@end defun


@deffn Syntax percent-encode @ameta{obj} @ameta{clause} ...
This syntax is a maker, @nauref{makers, Maker syntaxes}.
Percent--encode the given object, return the result; characters outside
a selected range are percent--encoded.

@var{obj} must be an expression evaluating to any character, or string,
or bytevector; the character is converted to a string and the string is
converted to a bytevector with @func{string->utf8}.

The following clauses are supported:

@table @code
@item :char-selector @var{pred}
@var{pred} must be a predicate function which, applied to an integer
representing a character according to @func{char->integer}, returns true
if the character must be percent encoded.  The default is to encode all
the character not unreserved.

@item :string-result? @var{bool}
If @var{bool} is true: return a string, else return a bytevector; the
default is to return a bytevector.
@end table
@end deffn


@deffn Syntax percent-decode @ameta{obj} @ameta{clause} ...
This syntax is a maker, @nauref{makers, Maker syntaxes}.
Percent--decode the given @var{obj}, return the result.

@var{obj} must be an expression evaluating to any string or bytevector;
the string is converted to a bytevector with @func{string->utf8}.

The following clauses are supported:

@table @code
@item :string-result? @var{bool}
If @var{bool} is true: return a string, else return a bytevector; the
default is to return a bytevector.
@end table
@end deffn


@defun normalise-percent-encoded-bytevector @var{bv}
Normalise the given percent--encoded bytevector; bytes that are encoded
but should not are decoded; return the normalised bytevector.  Assume
that @var{bv} is composed by bytes in the valid range for @uri{}s.

Notice that this function does @strong{not} percent--encode bytes which
are already not so.
@end defun


@defun normalise-percent-encoded-string @var{str}
Normalise the given percent--encoded string; characters that are encoded
but should not are decoded; return the normalised string.  Assume that
@var{str} is composed by characters in the valid range for @uri{}s.

Notice that this function does @strong{not} percent--encode characters
which are already not so.
@end defun

@c end of file
