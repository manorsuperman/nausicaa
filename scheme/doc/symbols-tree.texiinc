@node symbols-tree
@chapter Search tree for lists of symbols


@cindex @library{nausicaa symbols-tree}, library
@cindex Library @library{nausicaa symbols-tree}


The library @library{nausicaa symbols-tree} handles search trees in
which keys are lists of Scheme symbols and values can be anything; the
tree has the structure of nested alists.  Inserting the following keys
and values (in this order):

@example
(a b1 c1 d1)   1
(a b1 c1 d2)   2
(a b1 c2 d1)   1
(a b1 c1 d3)   3
(a b2 c1)      4
(a b1 c2 d2)   2
(a b2 c2)      5
(a b1 c2 d3)   3
(a b2 c3)      6
(a b2)         7
(a b1 c2)      8
@end example

@noindent
yields the following tree:

@example
((a . ((b2 . ((#f . 7)
              (c3 . ((#f . 6)))
              (c2 . ((#f . 5)))
              (c1 . ((#f . 4)))))
       (b1 . ((c2 . ((#f . 8)
                     (d3 . ((#f . 3)))
                     (d2 . ((#f . 2)))
                     (d1 . ((#f . 1)))))
              (c1 . ((d3 . ((#f . 3)))
                     (d2 . ((#f . 2)))
                     (d1 . ((#f . 1))))))))))
@end example

@noindent
notice that the keys are stored as sequences ending with a pair having
@false{} as key, and such pairs are kept at the beginning of the alist.

Storing a key/value pair whose key already exists causes the old value
to be overwritten.


@defun tree-cons @var{key} @var{value} @var{tree}
@defunx tree-cons @var{key} @var{value} @var{tree} @var{overwrite?}
Add the @var{key}/@var{value} pair to @var{tree} and return the new
tree.  @var{key} must be null or a list of symbols, @var{value} can be
anything, @var{tree} must be null or a symbols tree.

If @var{overwrite?} is true and the key already exists: the old value is
overwritten with @var{value}, else it is left unchanged.
@var{overwrite?} defaults to @false{}.
@end defun


@defun treeq @var{key} @var{tree} @var{default}
Search for @var{key} in @var{tree} and return the associated value;
return @var{default} if @var{key} was not found.  @var{key} must be null
or a list of symbols, @var{tree} must be null or a symbols tree.
@end defun


@defun make-tree-iterator @var{tree}
Return an iterator closure upon @var{tree}.  Whenever evaluated, the
iterator returns three values: a boolean, false if the iteration is
over; a list of symbols representing the reversed key for this tree
element; this element's value.

Iterating over a tree means; composing a sequence of keys and values;
for the following simple tree:

@example
((#f . 1)
 (a . ((#f . 2)))
 (b . ((c1 . ((#f . 3)))
       (c2 . ((#f . 4))))))
@end example

@noindent
iterating means generating the following sequence of key/value couples:

@example
()      1
(a)     2
(b c1)  3
(b c3)  4
@end example

@noindent
for implementation reasons the iterator returns the keys as reversed
lists:

@example
()      1
(a)     2
(c1 b)  3
(c3 b)  4
@end example

@noindent
but this is not a big problem.
@end defun


@defun tree-merge @var{dst} @var{src}
@defunx tree-merge @var{dst} @var{src} @var{overwrite?}
Merge the @var{src} tree into the @var{dst} tree without mutating
@var{src}; @var{dst} is mutated.

If @var{overwrite?} is true and a key from @var{src} already exists in
@var{dst}: the old value in @var{dst} is overwritten with the new value
from @var{src}, else it is left unchanged.  @var{overwrite?} defaults to
@false{}.
@end defun

@c end of file
