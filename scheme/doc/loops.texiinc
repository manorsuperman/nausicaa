@node loops
@chapter Loop constructs


The @library{loops} library provides extensions to the Scheme language
to loop over general sequences of values.

@menu
* loops intro::                 Introduction.
* loops comprehensions::        Comprehensions.
* loops qualifiers::            Qualifiers.
* loops generators::            Generators.
@end menu

@c page
@node loops intro
@section Introduction


An eager comprehension is a convenient notation for one or more nested
or parallel loops generating a sequence of values, and accumulating this
sequence into a result.  In its most simple form, a comprehension looks
like this:

@example
(list-ec (: i 5)
  (* i i))
@result{} (0 1 4 9 16)
@end example

@noindent
where @var{i} is a local variable that is sequentially bound to the
values 0, 1, @dots{}, 4, and the squares of these numbers are collected
in a list.  The following example illustrates most conventions with
respect to nesting and syntax:

@example
(list-ec (: n 1 4)
         (: i n)
  (list n i))
@result{} ((1 0) (2 0) (2 1)
    (3 0) (3 1) (3 2))
@end example

@noindent
the variable @var{n} is first bound to 1 then to 2 and finally to 3, and
for each binding of @var{n} the variable @var{i} is bound to the values
0, 1, ..., @var{n}-1 in turn.  The expression @code{(list n i)}
constructs a two--element list for each binding, and the comprehension
@func{list-ec} collects all these results in a list.

@c page
@node loops comprehensions
@section Comprehensions


@menu
* loops comprehensions do::     Simple loops.
* loops comprehensions list::   List accumulator loops.
* loops comprehensions string:: String accumulator loops.
* loops comprehensions vector:: Vector accumulator loops.
* loops comprehensions arith::  Arithmetic accumulator loops.
* loops comprehensions search:: Searching loops.
* loops comprehensions fold::   Folding loops.
* loops comprehensions define:: Defining new comprehensions.
@end menu

@c page
@node loops comprehensions do
@subsection Simple loops


@deffn Syntax do-ec @meta{qualifier} ... @var{command}
Evaluate the @var{command} exactly once for each binding in the sequence
defined by the qualifiers.  If there are no qualifiers @var{command} is
evaluated exactly once.  The expression is evaluated for its
side--effects only.  The result of the comprehension is unspecified.

@example
(let ((x 0))
  (do-ec                ;no qualifiers
    (set! x (+ x 1)))
  x)
@result{} 1

(let ((x 0))
  (do-ec (:range i 10)  ;i from 0 to 9
    (set! x (+ x 1)))
  x)
@result{} 10

(let ((x 0))
  (do-ec (:range i 0)   ;loops zero times
    (set! x (+ x 1)))
  x)
@result{} 0

(let ((x 0))
  (do-ec (:range n 10)  ;n from 0 to 9
         (:range k n)   ;k from 0 to n
    (set! x (+ x 1)))
  x)
@result{} 45
@end example
@end deffn

@c page
@node loops comprehensions list
@subsection List accumulator loops


@deffn Syntax list-ec @meta{qualifier} ... @var{expression}
The list of values obtained by evaluating @var{expression} once for each
binding in the sequence defined by the qualifiers.  If there are no
qualifiers the result is the list with the value of @var{expression}.

@example
(list-ec                ;no qualifiers
  1)
@result{} (1)

(list-ec (:range i 4)   ;i from 0 to 3
  i)
@result{} (0 1 2 3)

(list-ec (:range n 3)
         (:range k (+ n 1))
  (list n k))
@result{} ((0 0)
    (1 0) (1 1)
    (2 0) (2 1) (2 2))
@end example
@end deffn


@deffn Syntax append-ec @meta{qualifier} ... @var{expression}
The list obtained by appending all values of @var{expression}, which
must all be lists.  Think of it as:

@example
(apply append (list-ec @meta{qualifier} ... @var{expression}))
@end example

Examples:

@example
(append-ec              ;no qualifiers
  '(a b))
@result{} (a b)

(append-ec (:range i 0) ;loops zero times
  '(a b))
@result{} '()

(append-ec (:range i 1)
  '(a b))
@result{} (a b)

(append-ec (:range i 2)
  '(a b))
@result{} '(a b a b)
@end example
@end deffn

@c page
@node loops comprehensions string
@subsection String accumulator loops


@deffn Syntax string-ec @meta{qualifier} ... @var{expression}
The string of all values of @var{expression}.  Think of it as:

@example
(list->string (list-ec @meta{qualifier} ... @var{expression}))
@end example

Examples:

@example
(string-ec              ;no qualifiers
  #\a)
@result{} (string #\a)

(string-ec (:range i 0)
  #\a)
@result{} ""

(string-ec (:range i 1)
  #\a)
@result{} "a"

(string-ec (:range i 2)
  #\a)
@result{} "aa"
@end example
@end deffn


@deffn Syntax string-append-ec @meta{qualifier} ... @var{expression}
The string obtained by appending all values of @var{expression}, which
must all be strings.  Think of it as:

@example
(apply string-append (list-ec @meta{qualifier} ... @var{expression}))
@end example

Examples:

@example
(string-append-ec
  "ab")
@result{} "ab"

(string-append-ec (:range i 0)
  "ab")
@result{} ""

(string-append-ec (:range i 1)
  "ab")
@result{} "ab"

(string-append-ec (:range i 2)
  "ab")
@result{} "abab"
@end example
@end deffn

@c page
@node loops comprehensions vector
@subsection Vector accumulator loops


@deffn Syntax vector-ec @meta{qualifier} ... @var{expression}
The vector of all values of @var{expression}.  Think of it as:

@example
(list->vector (list-ec @meta{qualifier} ... @var{expression}))
@end example

Examples:

@example
(vector-ec              ;no qualifiers
  1)
@result{} (vector 1)

(vector-ec (:range i 0)
  i)
@result{} (vector)

(vector-ec (:range i 1)
  i)
@result{} (vector 0)

(vector-ec (:range i 2)
  i)
@result{} (vector 0 1)
@end example
@end deffn


@deffn Syntax vector-of-length-ec @var{k} @meta{qualifier} ... @var{expression}
The vector of all values of @var{expression}, of which there must be
exactly @var{k}.  This comprehension behaves like @func{vector-ec} but
can be implemented more efficiently.

@example
(vector-of-length-ec 1
  1)
@result{} (vector 1)

(vector-of-length-ec 0 (:range i 0)
  i)
@result{} (vector)

(vector-of-length-ec 1 (:range i 1)
  i)
@result{} (vector 0)

(vector-of-length-ec 2 (:range i 2)
  i)
@result{} (vector 0 1)
@end example
@end deffn

@c page
@node loops comprehensions arith
@subsection Arithmetic accumulator loops


@deffn Syntax sum-ec @meta{qualifier} ... @var{expression}
The sum of all values of @var{expression}.  Think of it as:

@example
(apply + (list-ec @meta{qualifier} ... @var{expression}))
@end example

Examples:

@example
(sum-ec                 ;no qualifiers
  1)
@result{} 1

(sum-ec (:range i 0)
  i)
@result{} 0

(sum-ec (:range i 1)
  i)
@result{} 0

(sum-ec (:range i 2)
  i)
@result{} 1

(sum-ec (:range i 3)
  i)
@result{} 3
@end example
@end deffn


@deffn Syntax product-ec @meta{qualifier} ... @var{expression}
The product of all values of @var{expression}.  Think of it as:

@example
(apply * (list-ec @meta{qualifier} ... @var{expression}))
@end example

Examples:

@example
(product-ec             ;no qualifiers
  1)
@result{} 1

(product-ec (:range i 1 0)      ;i from 1 to 1
  i)
@result{} 1

(product-ec (:range i 1 1)      ;loop zero times
  i)
@result{} 1

(product-ec (:range i 9 9)      ;loop zero times
  i)
@result{} 1

(product-ec (:range i 1 2)      ;i from 1 to 1
  i)
@result{} 1

(product-ec (:range i 1 3)      ;i from 1 to 2
  i)
@result{} 2

(product-ec (:range i 1 4)      ;i from 1 to 3
  i)
@result{} 6
@end example
@end deffn


@deffn Syntax min-ec @meta{qualifier} ... @var{expression}
@deffnx Syntax max-ec @meta{qualifier} ... @var{expression}
The minimum and maximum of all values of @var{expression}.  The sequence
of values must be non-empty.  Think of these as

@example
(apply min (list-ec @meta{qualifier} ... @var{expression}))
(apply max (list-ec @meta{qualifier} ... @var{expression}))
@end example

If we want to return a default value in case the sequence is empty we
may want to consider:

@example
(fold3-ec 'infinity @meta{qualifier} ... @var{expression} min min)
@end example
@end deffn

@c page
@node loops comprehensions search
@subsection Searching loops


@deffn Syntax any?-ec @meta{qualifier} ... @var{test}
Tests whether any value of @var{test} in the sequence of bindings
specified by the qualifiers is non--@false{}.  If this is the case:
@true{} is returned, otherwise @false{}.  If there are no bindings at
all, in the sequence specified by the qualifiers, then the result is
@false{}.  The enumeration of values stops after the first non--@false{}
encountered.
@end deffn


@deffn Syntax every?-ec @meta{qualifier} ... @var{test}
Tests whether all values of @var{test} are non--@false{}.  If this is
the case: @true{} is returned, otherwise @false{}.  If the sequence is
empty the result is @true{}.  Enumeration stops after the first
@false{}.
@end deffn


@deffn Syntax first-ec @var{default} @meta{qualifier} ... @var{expression}
@deffnx Syntax last-ec  @var{default} @meta{qualifier} ... @var{expression}
The first or last value of @var{expression} in the sequence of bindings
specified by the qualifiers.  Before enumeration, the result is
initialized with the value of @var{default}; so this will be the result
if the sequence is empty.  Enumeration is terminated in @func{first-ec}
when the first value has been computed.
@end deffn

@c page
@node loops comprehensions fold
@subsection Folding loops


@deffn Syntax fold-ec @var{x0} @meta{qualifier} ... @var{expression} @var{f2}
@deffnx Syntax fold3-ec @var{x0} @meta{qualifier} ... @var{expression} @var{f1} @var{f2}
Reduce the sequence @math{x[1], x[2], @dots{}, x[n-1]} of values
obtained by evaluating @var{expression} once for each binding as
specified by the @meta{qualifier} syntaxes.  The arguments @var{x0},
@var{f2} and @var{f1}, all syntactically equivalent to @var{expression},
specify the reduction process.

@example
(define (f2 expr knil)
  (+ knil (* expr expr)))

(fold-ec 0              ;knil
         (:range k 1 5) ;qualifier, k from 1 to 4
  k                     ;expression
  f2)
@result{} 30 ;(+ 0 (* 1 1) (* 2 2) (* 3 3) (* 4 4))
@end example

The reduction process for @func{fold-ec} is defined as follows.  A
reduction variable @var{x} is initialized to the value of @var{x0}, and
for each @math{k \in @{1, ..., n-1@}} the command:

@example
(set! x[k+1] (f2 x[k] x[k-1]))
@end example

@noindent
is evaluated.  Finally, @math{x[n]} is returned as the value of the
comprehension.

The reduction process for @func{fold3-ec} is different:

@enumerate
@item
If and only if the sequence is empty: @var{x0} is evaluated and returned
as the value of the comprehension.

@item
If the sequence in non--empty: A reduction variable @var{x} is
initialized to the value of @code{(f1 x[1])}, and for each @math{k \in
@{2, ..., n-1@}} the command:

@example
(set! x[k+1] (f2 x[k] x[k-1]))
@end example

@noindent
is evaluated; finally, @math{x[n]} is returned as the value of the
comprehension.
@end enumerate

Example:

@example
(define (f2 expr knil)
  (+ knil (* expr expr)))

(define (f1 x)
  x)

(fold3-ec 1234                  ;never used
          (:range k 2 5)        ;k from 2 to 4
  k                             ;expression
  f1
  f2)
@result{} 27 ;(+ (f1 2) (* 3 3) (* 4 4))

(fold3-ec 1234
          (:range k 2 2)        ;loop zero times
  k
  f1
  f2)
@result{} 1234
@end example

As the order of the arguments suggests, @var{x0} is evaluated outside
the scope of the qualifiers, whereas the reduction expressions involving
@var{f1} and @var{f2} are inside the scope of the qualifiers (so they
may depend on any variable introduced by the qualifiers).  Note that
@var{f2} is evaluated repeatedly, with any side--effect or overhead this
might have.

The main purpose of these comprehensions is implementing other
comprehensions as special cases.  They are generalizations of the
procedures @func{fold-left} and @func{reduce}.  Note that
@func{fold3-ec} is defined such that @var{x0} is only evaluated in case
the sequence is empty.  This allows raising an error for the empty
sequence.
@end deffn

@c page
@node loops comprehensions define
@subsection Defining new comprehensions


To create a new comprehension a hygienic macro with that name is
defined.  The macro transforms the new comprehension patterns into
instances of @func{do-ec}, which is the most fundamental eager
comprehension, or any other comprehension already defined.

For example, the following code defines @func{list-ec} and @func{min-ec}
in terms of @func{fold-ec} and @func{fold3-ec}:

@example
(define-syntax list-ec
  (syntax-rules ()
    ((_ ?etc1 ?etc ...)
     (reverse (fold-ec '() ?etc1 ?etc ... cons)))))

(define-syntax min-ec
  (syntax-rules ()
    ((_ ?etc1 ?etc ...)
     (fold3-ec (min) ?etc1 ?etc ... min min))))
@end example

Note that the pattern @samp{?etc1 ...} matches @var{qualifier*} and
@var{expression} without separate access to @var{qualifier*} and
@var{expression}.  In order to define a comprehension that does need
explicit access to the @var{expression} part, the following method is
used.

First, all qualifiers are collected into a nested--qualifier, and then
the ``exactly one qualifier'' case is implemented.  For illustration,
the following code defines @func{fold3-ec} in terms of @func{do-ec}:

@example
(define-syntax fold3-ec
  (syntax-rules (nested)

    ((fold3-ec x0 (nested q1 ...) q etc1 etc2 etc3 etc ...)
     (fold3-ec x0 (nested q1 ... q) etc1 etc2 etc3 etc ...))

    ((fold3-ec x0 q1 q2 etc1 etc2 etc3 etc ...)
     (fold3-ec x0 (nested q1 q2) etc1 etc2 etc3 etc ...))

    ((fold3-ec x0 expression f1 f2)
     (fold3-ec x0 (nested) expression f1 f2))

    ((fold3-ec x0 qualifier expression f1 f2)
     (let ((result #f)
           (empty  #t))
       (do-ec qualifier
         (let ((value expression)) ; don't duplicate code
           (if empty
               (begin
                 (set! result (f1 value))
                 (set! empty #f))
             (set! result (f2 value result)))))
       (if empty x0 result)))))
@end example

Finally, observe that the newly defined @func{fold3-ec} comprehension
inherits all types of qualifiers supported by @func{do-ec}, including
all application--specific generators; no further definitions are
necessary.

@c page
@node loops qualifiers
@section Qualifiers


This section defines the syntax @meta{qualifier}.  The nesting of
qualifiers is from left (outer) to right (inner).  In other words, the
rightmost generator ``spins faster''.  The nesting also defines the
region of the variables introduced by the generators.  This implies that
inner generators may depend on the variables of outer generators.  The
sequence of enumeration of values is strictly depth first.  These
conventions are illustrated by the first example.

The syntax @meta{qualifier} consists of the following alternatives.

@deffn {Qualifier Syntax} @meta{generator}
Enumerate a sequence of bindings of one or more variables.  The region
of the variables starts at the generator and extends over all subsequent
qualifiers and expressions in the comprehension.  @ref{loops generators,
Generators}
@end deffn


@deffn {Qualifier Syntax} if @var{test}
Filter the sequence of bindings by testing if @var{test} evaluates to
non--@false{}.  Only for those bindings for which this is the case, the
subsequent qualifiers of the comprehension are evaluated.

@example
(list-ec (:range i 10)
         (if (even? i))
  i)
@result{} (0 2 4 6 8)

(list-ec (:range i 5)
         (if (even? i))
         (:let j (+ 1 i))
  j)
@result{} (1 3 5)
@end example
@end deffn


@deffn {Qualifier Syntax} not @var{test}
@deffnx {Qualifier Syntax} and @var{test} ...
@deffnx {Qualifier Syntax} or @var{test} ...
Abbreviated notations for filters of the form:

@example
(if (not @var{test}))
(if (and @var{test} ...))
(if (or  @var{test} ...))
@end example
@end deffn


@deffn {Qualifier Syntax} begin @var{sequence}
Evaluate @var{sequence}, consisting of @samp{@var{command} ...
@var{expression}}, once for each binding of the variables defined by the
previous qualifiers in the comprehension.  Using this qualifier, side
effects can be inserted into the body of a comprehension.

@example
(let* ((ans '())
       (ell (list-ec (:range i 5)
                     (begin
                       (set! ans (cons i ans)))
                     i)))
  (list ans ell))
@result{} ((4 3 2 1 0)
    (0 1 2 3 4))
@end example
@end deffn


@deffn {Qualifier Syntax} nested @meta{qualifier} ...
A syntactic construct to group qualifiers.  The meaning of a qualifier
according to the @samp{nested} syntax is the same as inserting the
@meta{qualifier} syntaxes into the enclosing comprehension.

This construct can be used to reduce comprehensions with several
qualifiers into a form with exactly one qualifier.

@example
(list-ec (nested (:range i 5)
                 (if (even? i))
                 (:let j (+ 1 i)))
  j)
@result{} (1 3 5)

(list-ec (:range i 5)
         (nested (if (even? i))
                 (:let j (+ 1 i)))
  j)
@result{} (1 3 5)

(list-ec (:range i 5)
         (if (even? i))
         (nested (:let j (+ 1 i)))
  j)
@result{} (1 3 5)

(list-ec (:range i 5)
         (if (even? i))
         (:let j (+ 1 i))
         (nested)
  j)
@result{} (1 3 5)
@end example
@end deffn

@c page
@node loops generators
@section Generators


@menu
* loops generators intro::      Introduction to generators.
* loops generators do::         Loop generators.
* loops generators typed::      Typed generators.
* loops generators ranges::     Range generators.
* loops generators port::       Port generators.
* loops generators dispatch::   Dispatched generators.
* loops generators let::        Let generators.
* loops generators parallel::   Parallel generators.
* loops generators cond::       Conditional generators.
@end menu

@c page
@node loops generators intro
@subsection Introduction to generators


This section defines the syntax @meta{generator}.  Each generator defines
a sequence of bindings through which one or more variables are run.  The
scope of the variables begins after the closing parenthesis of the
generator expression and extends to the end of the comprehension it is
part of.

The variables defined by the generators are specified using the syntax:

@example
<vars> -> <variable1>
       |  <variable1> (index <variable2>)
@end example

@noindent
where @var{variable1} runs through the values in the sequence defined by
the generator, and the optional @var{variable2} is an exact
integer--valued index variable counting the values (starting from
@math{0}).  The names of the variables must be distinct.  The following
example illustrates the index variable:

@example
(list-ec (: x (index i) "abc")
   (list x i))
@result{} ((#\a 0) (#\b 1) (#\c 2))
@end example

Unless defined otherwise, all generators make sure that the expressions
provided for their syntactic arguments are evaluated exactly once,
before enumeration begins.  Moreover, it may be assumed that the
generators do not copy the code provided for their arguments, because
that could lead to exponential growth in code size.

Finally, it is possible to assign a value to the variables defined by a
generator, but the effect of this assignment is unspecified; example:

@example
(list-ec (:range i 5)
  (set! i #\a)          ;undefined behaviour because of this
  ---)
@end example

@c page
@node loops generators do
@subsection Loop generators


@deffn {Generator Syntax} :do (@meta{lb} ...) @meta{ne1?} (@meta{ls} ...)
@deffnx {Generator Syntax} :do (let (@meta{ob} ...) @meta{oc} ...) (@meta{lb} ...) @meta{ne1?} (let (@meta{ib} ...) @meta{ic} ...) @meta{ne2?} (@meta{ls} ...)
Defines a generator in terms of a named @func{let}, optionally decorated
with inner and outer @func{let}.  This generator is for defining other
generators.  (In fact, the reference implementation transforms any other
generator into an instance of fully decorated @code{:do}.)

The generator is a compromise between expressive power (more flexible
loops) and fixed structure (necessary for merging and modifying
generators).

In the fully decorated form, the following syntactic variables are
present:

@table @meta
@item ob
Outer binding.

@item oc
Outer command.

@item lb
Loop binding.

@item ne1?
Not end predicate.

@item ib
Inner binding.

@item ic
Inner command.

@item ne2?
Not end predicate.

@item ls
Loop step.
@end table

They define the following loop skeleton:

@example
(let (@meta{ob} ...)
  @meta{oc} ...
  (let loop (@meta{lb} ...)
    (when @meta{ne1?}
      (let (@meta{ib} ...)
        @meta{ic} ...
        payload
        (when @meta{ne2?}
          (loop @meta{ls} ...))))))
@end example

@noindent
where @meta{oc} and @meta{ic} are syntactically equivalent to forms in
the body of a @func{begin}, i.e. they do not begin with a
@meta{definition}.  The latter requirement allows the code generator to
produce more efficient code for special cases by removing empty
@func{let} expressions altogether.
@end deffn

@c page
@node loops generators typed
@subsection Typed generators


@deffn {Generator Syntax} {:list} @var{vars} @var{arg0} @var{arg} ...
@deffnx {Generator Syntax} {:string} @var{vars} @var{arg0} @var{arg} ...
@deffnx {Generator Syntax} {:vector} @var{vars} @var{arg0} @var{arg} ...
Run through one or more lists, strings, or vectors.  First all the
@var{arg} expressions are evaluated and then all elements of the
resulting values are enumerated from left to right.  One can think of it
as first appending all arguments and then enumerating the combined
object.

@example
(list-ec (:string c (index i) "a" "b")
  (cons c i))
@result{} ((#\a . 0) (#\b . 1))

(list-ec (:string c (index i) "ciao" "mamma")
  (cons c i))
@result{} ((#\c . 0) (#\i . 1) (#\a . 2) (#\o . 3)
    (#\m . 4) (#\a . 5) (#\m . 6) (#\m . 7) (#\a . 8))
@end example
@end deffn


@deffn {Generator Syntax} {:integers} @var{vars}
Runs through the sequence @math{0, 1, 2, @dots{}} of non--negative
integers.  This is most useful in combination with @samp{:parallel},
@samp{:while}, and @samp{:until} or with a non--local exit in the body
of the comprehension.
@end deffn

@c ------------------------------------------------------------

@subsubheading Application specific typed generator


To define a new typed generator a hygienic referentially transparent
macro of the same name is defined to transform the generator pattern
into an instance of the @samp{:do} generator.  The extension is fully
modular, meaning that no other macro has to be modified to add the new
generator.  This is achieved by defining the new macro in Continuation
Passing Style.

Technically, this works as follows.  Assume the generator syntax:

@example
(:mygen @var{var} @var{arg})
@end example

@noindent
is to be implemented, for example running the variable @var{var} through
the list @code{(reverse @var{arg})}.  The following definition
implements @code{:mygen} in terms of @samp{:list} using the additional
syntactic variable @var{cc} (read current continuation):

@example
(define-syntax :mygen
  (syntax-rules ()
    ((:mygen cc var arg)
     (:list cc var (reverse arg)))))
@end example

After this definition, any comprehension will accept the @code{:mygen}
generator and produce the proper code for it.  This works as follows.
When a comprehension sees something of the form @code{(@var{g} @var{arg}
...)} in the position of a @meta{qualifier} then it will transform the
entire comprehension into:

@example
(@var{g} (continue ...) @var{arg} ...)
@end example

This effectively ``transfers control'' to the macro @var{g}, for example
@samp{:mygen}.  The macro @var{g} has full control of the
transformation, but eventually it should transform the expression into:

@example
(:do (continue ...)  etc ...)
@end example

In the @samp{:mygen} example this is done by the @samp{:list} macro.
The macro @samp{:do} finally transforms into:

@example
(continue ... (:do etc ...))
@end example

As @samp{continue} has been chosen by the macro implementing the
comprehension, it can regain control and proceed with other qualifiers.

In order to ensure consistency of new generators with the ones defined
in @library{loops}, a few conventions are in order.

@itemize
@item
The generator patterns begin with one or more variables followed by
arguments defining the sequence.

@item
Each generator except @samp{:do} can handle an optional index variable.
This is most easily implemented using @samp{:parallel} together with
@samp{:integers}.  In case the payload generator needs an index anyhow
(e.g. @samp{:vector}) it is more efficient to add an index variable if
none is given and to implement the indexed case.

@item
Make sure that no syntactic variable of the generator pattern ever gets
duplicated in the code (to avoid exponential code size in nested
application), and introduce sufficient intermediate variables to make
sure expressions are evaluated at the correct time.
@end itemize

@c page
@node loops generators ranges
@subsection Range generators


@deffn {Generator Syntax} {:range} @var{vars} @var{stop}
@deffnx {Generator Syntax} {:range} @var{vars} @var{start} @var{stop}
@deffnx {Generator Syntax} {:range} @var{vars} @var{start} @var{stop} @var{step}
Runs through a range of exact rational numbers.

@table @code
@item (:range @var{vars} @var{stop})
Evaluate the expression @var{stop}, which must result in an exact
integer @math{N}, and runs through the finite sequence @math{0, 1, 2,
@dots{}, N-1}.  If @math{N} is zero or negative the sequence is empty.

@item (:range @var{vars} @var{start} @var{stop})
Evaluate the expressions @var{start} and @var{stop}, which must result
in exact integers @math{A} and @math{B}, and runs through the finite
sequence @math{A, A+1, A+2, @dots{}, B-1}.  If @math{B} is less or equal
@math{A} then the sequence is empty.

@item (:range @var{vars} @var{start} @var{stop} @var{step})
First evaluates the expressions @var{start}, @var{stop} and @var{step},
which must result in exact integers @math{A}, @math{B} and @math{S} such
that @math{S} is non--zero.  Then the sequence @math{A, A+S, A+2*S,
@dots{}, A+(N-1)*S} is enumerated where: @math{N = ceil((B-A)/S)}.

In other words, the sequence starts at @math{A}, increments by @math{S},
and stops when the next value would reach or cross @math{B}.  If
@math{N} is zero or negative the sequence is empty.
@end table
@end deffn


@deffn {Generator Syntax} {:real-range} @var{vars} @var{stop}
@deffnx {Generator Syntax} {:real-range} @var{vars} @var{start} @var{stop}
@deffnx {Generator Syntax} {:real-range} @var{vars} @var{start} @var{stop} @var{step}
Runs through a range of real numbers using an explicit index variable.
This form of range enumeration avoids accumulation of rounding errors
and is the one to use if any of the numbers defining the range is
inexact, not an integer, or a bignum of large magnitude.

Providing default values @math{0} for @var{start} and @math{1} for
@var{step}, the generator first evaluates @var{start}, @var{stop} and
@var{step}, which must result in reals @math{A}, @math{B} and @math{S}
such that @math{N = (B-A)/S} is also representable as a real.  Then the
sequence @math{0, 1, 2, @dots{}, N-1} is enumerated while the current
value @math{I} is less than @math{N}, and the variable in @var{vars} is
bound to the value @math{A+I*S}.  If any of the values @math{A},
@math{B} or @math{S} is non--exact then all values in the sequence are
non--exact.
@end deffn


@deffn {Generator Syntax} {:char-range} @var{vars} @var{min} @var{max}
Run through a range of characters.  First @var{min} and @var{max} are
evaluated, which must result in two characters @math{A} and @math{B}.
Then the sequence of characters @math{A, A+1, A+2, @dots{}, B} is
enumerated in the order defined by @func{char<=?}.  If @math{B} is
smaller than @math{A} then the sequence is empty.  Note that @math{B} is
included in the sequence.
@end deffn

@c page
@node loops generators port
@subsection Port generators


@deffn {Generator Syntax} {:port} @var{vars} @var{port}
@deffnx {Generator Syntax} {:port} @var{vars} @var{port} @var{read-proc}
Read from the port until the eof--object is read.  If a port reader
procedure @var{read-proc} is supplied: The generator first evaluates
@var{port} and @var{read-proc}, which must result in an input port
@var{p} and a procedure @var{r}.  Then the variable is run through the
sequence obtained by @code{(@var{r} @var{p})} while the result does not
satisfy @func{eof-object?}.
@end deffn

@c page
@node loops generators dispatch
@subsection Dispatched generators


@deffn {Generator Syntax} {:} @var{vars} @var{arg0} @var{arg} ...
First the @var{arg} expressions are evaluated into @math{a[1], a[2],
@dots{}, a[n]} and then a global dispatch procedure is used to dispatch
on the number and types of the arguments and run the resulting
generator.  Initially the following cases are recognized, with @math{i
\in @{1, @dots{}, n@}}:

@table @samp
@item :list
If for all @math{i}:

@example
(list? a[i]) @result{} #t
@end example

@item :string
If for all @math{i}:

@example
(string? a[i]) @result{} #t
@end example

@item :vector
If for all @math{i}:

@example
(vector? a[i]) @result{} #t
@end example

@item :range
If @math{n \in @{1, @dots{}, 3@}} and for all @math{i \in @{1, @dots{},
n@}}:

@example
(and (integer? a[i])
     (exact?   a[i]))
@result{} #t
@end example

@item :real-range
If @math{n \in @{1, @dots{}, 3@}} and for all @math{i \in @{1, @dots{},
n@}}:

@example
(real? a[i]) @result{} #t
@end example

@item :char-range
If @math{n = 2} and for all @math{i \in @{1, 2@}}:

@example
(char? a[i]) @result{} #t
@end example

@item :port
If @math{n \in @{1, 2@}} and:

@example
(and (input-port? a[1])
     (procedure?  a[2]))
@result{} #t
@end example
@end table

The current dispatcher can be retrieved as @code{(:-dispatch-ref)}, a
new dispatcher @samp{d} can be installed by @code{(:-dispatch-set! d)}
yielding an unspecified result, and a copy of the initial dispatcher can
be obtained as @code{(make-initial-:-dispatch)}.  Please refer to the
section below for recommendation how to add cases to the dispatcher.
@end deffn


@deffn {Generator Syntax} {:dispatched} @var{vars} @var{dispatch} @var{arg0} @var{arg} ...
Runs the variables through a sequence defined by @var{dispatch} and the
@var{arg} expressions.  The purpose of @samp{:dispatched} is
implementing dispatched generators, in particular the predefined
dispatching generator @samp{:}.

The working of @samp{:dispatched} is as follows: First @var{dispatch}
and the @var{arg} expressions are evaluated, resulting in a procedure
@var{d} (the ``dispatcher'') and the values @math{a[1], a[2], @dots{},
a[n]}.  Then:

@example
(d (list a[1] a[2] ... a[n]))
@end example

@noindent
is evaluated, resulting in a value @var{g}.  If @var{g} is not a
procedure then the dispatcher did not recognize the argument list and an
error is raised.  Otherwise the ``generator procedure'' @var{g} is used
to run @var{vars} through a sequence of values.

The sequence defined by @var{g} is obtained by repeated evaluation of
@code{(@var{g} @var{empty})} until the result is @var{empty}.  In other
words, @var{g} indicates the end of the sequence by returning its only
argument, for which the caller has provided an object distinct from
anything @var{g} can produce.

The definition of dispatchers is greatly simplified by the macro
@code{:generator-proc} that constructs a generator procedure from a
typed generator.  Let @code{(@var{g} @var{var} @var{arg0} @var{arg}
...)} be an instance of the @meta{generator} syntax, for example an
application--specific typed generator, with a single variable @var{var}
and no index variable.  Then:

@example
(:generator-proc (g arg0 arg ...))
@result{} g
@end example

@noindent
where the generator procedure @var{g} runs through the list:

@example
(list-ec (g var arg0 arg ...) var)
@end example

In order to define a new dispatching generator (say @code{:my}) first a
dispatching procedure (say @code{:my-dispatch}) is defined.  The
dispatcher will be called with a single (!) argument containing the list
of all values to dispatch on.  To enable informative error messages, the
dispatcher should return a descriptive object (e.g.  a symbol for the
module name) when it is called with the empty list.  Otherwise (if there
is at least one value to dispatch on), the dispatcher must either return
a generator procedure or @false{} (which means: no interest).  As an
example, the following skeleton code defines a dispatcher similar to the
initial dispatcher of @code{:}:

@example
(define (:my-dispatch args)
  (case (length args)
    ((1) (let ((a1 (car args)))
           (cond
            ((list? a1)
             (:generator-proc (:list a1)))
            ((string? a1)
             (:generator-proc (:string a1)))
            ...more unary cases...
            (else
             #f))))
    ((2) (let ((a1 (car args))
               (a2 (cadr args)))
           (cond
            ((and (list? a1) (list? a2))
             (:generator-proc (:list a1 a2)))
            ...more binary cases...
            (else
             #f))))
    ...more arity cases...
    (else
     (cond
      ((every?-ec (:list a args) (list? a))
       (:generator-proc (:list (apply append args))))
      ...more large variable arity cases...
      (else
       #f)))))
@end example

Once the dispatcher has been defined, the following macro implements the
new dispatching generator:

@example
(define-syntax :my
  (syntax-rules (index)
    ((:my cc var (index i) arg0 arg ...)
     (:dispatched cc var (index i) :my-dispatch arg0 arg ...))
    ((:my cc var arg0 arg ...)
     (:dispatched cc var :my-dispatch arg0 arg ...))))
@end example

This method of extension yields complete control of the dispatching
process.  Other modules can only add cases to @samp{:my} if they have
access to @samp{:my-dispatch}.
@end deffn

@c ------------------------------------------------------------

@subsubheading Extending the predefined dispatched generator

An alternative to adding a new dispatched generator is to extend the
predefined generator @samp{:}.  Technically, extending @samp{:} means
installing a new global dispatching procedure using
@samp{:-dispatch-set!} as described above.  In most cases, however, the
already installed dispatcher should be extended by new cases.  The
following procedure is a utility for doing so:

@example
(dispatch-union d1 d2)
@result{} d
@end example

@noindent
where the new dispatcher @var{d} recognizes the union of the cases
recognized by the dispatchers @var{d1} and @var{d2}.  The new dispatcher
always tries both component dispatchers and raises an error in case of
conflict.  The identification returned by @code{(d)} is the
concatenation of the component identifications @code{(d1)} and
@code{(d2)}, enclosed in lists if necessary.  For illustration, consider
the following code:

@example
(define (example-dispatch args)
  (cond
   ((null? args)
    'example)
   ((and (= (length args) 1) (symbol? (car args)) )
    (:generator-proc (:string (symbol->string (car args)))))
   (else
    #f)))

(:-dispatch-set! (dispatch-union (:-dispatch-ref) example-dispatch))
@end example

After evaluation of this code, the following example will work:

@example
(list-ec (: c 'abc)
  c)
@result{} (#\a #\b #\c)
@end example

Adding cases to @samp{:} is particularly useful for frequent cases of
interactive input.  Be warned, however, that the advantage of global
extension also carries the danger of conflicts, unexpected
side--effects, and slow dispatching.

@c page
@node loops generators let
@subsection Let generators


@deffn {Generator Syntax} :let @var{vars} @var{expression}
Run through the sequence consisting of the value of @var{expression},
only.  This is the same as:

@example
(:list @var{vars} (list @var{expression}))
@end example

If an index variable is specified, its value is @math{0}.  The
@samp{:let} generator can be used to introduce an intermediate variable
depending on outer generators.
@end deffn

@c page
@node loops generators parallel
@subsection Parallel generators


@deffn {Generator Syntax} :parallel @meta{generator} ...
Run several generators in parallel.  This means that the next binding in
the sequence is obtained by advancing each generator by one step.  The
parallel generator terminates when any of its component generators
terminate.  The generators share a common scope for the variables they
introduce.  This implies that the names of the variables introduced by
the various generators must be distinct.
@end deffn

@c page
@node loops generators cond
@subsection Conditional generators


@deffn {Generator Syntax} :while @meta{generator} @var{expression}
Run @meta{generator} while @var{expression} evaluates to non--@false{}.
The guarding expression is included in the region of the variables
introduced by the generator.

Note the distinction between the filter @code{if} and the modified
generator expressed by @code{:while}.
@end deffn


@deffn {Generator Syntax} :until @meta{generator} @var{expression}
Run @meta{generator} until after @var{expression} has evaluated to
non--@false{}.  The guarding expression is included in the region of the
variables introduced by the generator.
@end deffn

Note the distinction between @code{:while}, stopping at a certain
condition, and @code{:until}, stopping after a certain condition has
occurred.  The latter implies that the binding that has triggered
termination has been processed by the comprehension.

@c end of file
