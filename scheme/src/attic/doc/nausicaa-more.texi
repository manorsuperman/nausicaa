\input texinfo.tex
@c %**start of header
@setfilename nausicaa-more.info
@settitle More Nausicaa Libraries
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@macro aclass{NAME}
<\NAME\>
@end macro

@macro cclass{NAME}
<\NAME\>
@end macro

@macro objtype{NAME}
@code{\NAME\}
@end macro

@macro condition{NAME}
@code{&\NAME\}
@end macro

@macro rtd{}
@acronym{RTD}
@end macro

@macro uid{}
@acronym{UID}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro json{}
@acronym{JSON}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro uri{}
@acronym{URI}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@macro dst{}
@acronym{DST}
@end macro

@macro gmt{}
@acronym{GMT}
@end macro

@macro jdn{}
@acronym{JDN}
@end macro

@macro mjdn{}
@acronym{MJDN}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@macro naumoreref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa-more}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@c The following macro does not work.  It appears that it is not
@c possible to use "@cindex" in the expansion of a macro because the DVI
@c output will not work.  Texinfo output would work, though.  Tested
@c with "texi2dvi" version 1.135 (GNU Texinfo 4.13).
@c
@c @macro cindexRsixlibrary{THING}
@c @cindex @rsixlibrary{\THING\}, library
@c @cindex Library, @rsixlibrary{\THING\}
@c @end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metao{THING}
<\THING\0>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@macro metan{THING}
<\THING\N>
@end macro

@macro metani{THING}
<\THING\N+1>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetao{THING}
<\THING\0>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@macro cmetan{THING}
<\THING\N>
@end macro

@macro cmetani{THING}
<\THING\N+1>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametao{THING}
<\THING\0>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@macro ametan{THING}
<\THING\N>
@end macro

@macro ametani{THING}
<\THING\N+1>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      More Nausicaa Libraries

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/Scheme

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2008, 2009, 2010

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes the libraries collection distributed with
version @version{} of @value{PACKAGE}, a set of Scheme libraries
defining a slightly modified @rnrs{6} Scheme language and augmenting the
features of the base and standard @rnrs{6} libraries.  @nauref{Top,
Nausicaa} for the main documentation.

The project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR}.@*
Copyright @copyright{} 1996, 1997, 2000, 2001, 2002, 2003, 2004, 2005
Free Software Foundation.@*
Copyright @copyright{} 1996, 1999-2005 Dorai Sitaram.@*
Copyright @copyright{} 1998 Oleg Kiselyov.@*
Copyright @copyright{} 1998, 1999, 2000 Olin Shivers.@*
Copyright @copyright{} 1999 John David Stone.@*
Copyright @copyright{} 1999, 2002 Marc Feeley.@*
Copyright @copyright{} 2001, 2009 Danny Dube'@*
Copyright @copyright{} 2002 Dr. Mirko Luedde.@*
Copyright @copyright{} 2002, 2003, 2005, 2006 Sebastian Egner.@*
Copyright @copyright{} 2003 Ray Dillinger.@*
Copyright @copyright{} 2003 Taylor Campbell.@*
Copyright @copyright{} 2005 Jens Axel Soegaard.@*
Copyright @copyright{} 2005-2009 Alex Shinn.@*
Copyright @copyright{} 2008 Taro Minowa (Higepon).@*
Copyright @copyright{} 2005-2008 Dominique Boucher.@*
Copyright @copyright{} 2004, 2005 Tony Garnock-Jones@*
Copyright @copyright{} 2005 LShift Ltd.@*
Copyright @copyright{} 2007, 2008 Philip L. Bewig.@*
Copyright @copyright{} 2000 Will Fitzgerald.@*
Copyright @copyright{} 2000 Neodesic Corporation.@*
Copyright @copyright{} 2000-2006 Joachim Henke.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation

This document embeds an unofficial assemblage of several documents
reformatted in Texinfo; the reformatting author and maintainer is
@value{AUTHOR} @value{AUTHOR_EMAIL}.  See the appendix ``Credits'' for
the list of original documents and their authors.  See also the
@file{README} and @file{CREDITS} files for additional attributions.
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Version @version{}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-more: (nausicaa-more). @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* old-generics::                Old multimethods dispatching.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

@detailmenu
 --- The Detailed Node Listing ---

Old multimethods dispatching

* old-generics application::    How generic functions and methods
                                are invoked.
* old-generics dispatching::    How methods are dispatched.
* old-generics define::         Defining generic functions and methods.
* old-generics next::           Invoking the next method.
* old-generics examples::       Examples of method dispatching.
* old-generics predefined::     Predefined generic functions.

@end detailmenu
@end menu

@end ifnottex

@c page
@node old-generics
@appendix Old multimethods dispatching


In the context of the @library{old-generics} library, @dfn{generic
functions} are procedures that can be specialised to the (possibly
conventional) class types of their arguments; each specialisation of a
generic function is called @dfn{method}.  When applying a generic
function to a set of arguments, the most specific method with respect to
the arguments' types is chosen.

The @library{old-generics} library is deprecated, use @library{generics}
instead.  The @library{old-generics} library is built on top of the
@library{classes} library.

@menu
* old-generics application::    How generic functions and methods
                                are invoked.
* old-generics dispatching::    How methods are dispatched.
* old-generics define::         Defining generic functions and methods.
* old-generics next::           Invoking the next method.
* old-generics examples::       Examples of method dispatching.
* old-generics predefined::     Predefined generic functions.
@end menu

@c page
@node old-generics application
@appendixsec How generic functions and methods are invoked


When a generic function is applied to a tuple of arguments, the
following happens:

@enumerate
@item
For each argument in the tuple a class type is determined, then the list
of unique @uid{}s representing the class hierarchy is acquired.  The
tuple of @uid{} lists is called @dfn{signature}.  Each generic function
maintains an internal collection in which every method's closure is
associated to a signature.

@item
The internal collection of methods is queried for all the methods
applicable to the tuple of arguments, using the signature as search key.

@item
The list of applicable methods is sorted from the more specific to the
least specific for the signature.  From now on the list of sorted,
applicable methods is handled as a stack.

@item
The next method is popped from the stack and its closure is applied to
the tuple of arguments.  The return value of this application becomes
the return value of the generic function application.  If the function
calls the next method, recurse to step 4.
@end enumerate

@c page
@node old-generics dispatching
@appendixsec How methods are dispatched


Here we attempt the formulation of the rules of method dispatching.  A
method is identified by a triplet of values: the signature; a boolean
value telling if the closure accepts rest arguments; the closure.

@c ------------------------------------------------------------

@subsubheading Applicability

First we need to understand when a method is applicable to a tuple of
arguments.  Class types are identified by the list of @uid{}s
representing the hierarchy: the expansion of @func{class-uid-list}.
Given a tuple of arguments, a method supporting no rest arguments is
applicable to the tuple if:

@enumerate
@item
The length of the signature is equal to the length of the arguments'
tuple.

@item
Position by position, the class of the method's argument is equal to, or
a parent of, the class of the given argument.
@end enumerate

@noindent
a method supporting rest arguments is applicable to the tuple if:

@enumerate
@item
The length of the signature is less than, or equal to, the length of the
arguments' tuple.

@item
Position by position, up to the last element in the signature, the class
of the method's argument is equal to, or a parent of, the class of the
given argument.
@end enumerate

@c ------------------------------------------------------------

@subsubheading Specificity

Now we can understand how to determine which one, among two applicable
methods, is more specific for a tuple of arguments.  Let's call the
methods @var{A} and @var{B}.

Notice that it is impossible for two distinct methods, in the same
generic function, to have the same signature and the same support for
rest arguments.

Also, classes support only single inheritance, so if two methods are
applicable: the homologous classes in their signatures are equal or one
parent of the other.

@enumerate
@item
If both @var{A} and @var{B} support rest arguments: the one with the
longest signature is more specific.

@item
The classes in the signatures are compared in couples, position by
position from the beginning to the end.

@enumerate a
@item
If the classes are equal: the next couple is inspected.

@item
If the class from @var{A} is a subclass of the one from @var{B}: @var{A}
is more specific than @var{B}.
@end enumerate

@item
If the methods' signatures have the same length, and, position by
position, the classes of @var{A} are equal to the classes of @var{B},
but @var{A} supports rest arguments while @var{B} does not: then @var{B}
is more specific than @var{A}.
@end enumerate

@c page
@node old-generics define
@appendixsec Defining generic functions and methods


The number of arguments (arity) of a generic function is undefined:
every method can have a different number of arguments.


@deffn Syntax define-generic @ameta{name}
Define a new generic function and bind it to @meta{name}.
@end deffn


@defun make-generic-function
Build and return a new generic function.
@end defun


@deffn Syntax define-generic/merge @ameta{name} @ametao{generic} @ameta{generic} ...
Define a new generic function and bind it to @meta{name}.  The internal
collection of methods holds the union of the method collections from the
@meta{generic} arguments, which must be generic functions.

The union is performed visiting arguments from left to right; when two
methods have the same signature and the same support for rest arguments,
the one from the leftmost generic function has precedence.

Merging methods is useful when two different libraries export generic
functions bound to the same identifier.
@end deffn


@deffn Syntax define-method @ameta{generic} (@ameta{arg-spec} ...) @ameta{body}
@deffnx Syntax define-method (@ameta{generic} @ameta{arg-spec} ...) @ameta{body}
Add a new method to an already existent generic function,
@ameta{generic}.

The list of @meta{arg-spec} specifies the classes of the arguments for
which this method specialises the generic function.  Notice that rest
arguments are supported and specified with the usual syntax.  An
@meta{arg-spec} can be:

@table @code
@item (@meta{arg} @meta{class name})
Where @meta{arg} is the formal name of the argument and @meta{class
name} the (possibly conventional) class name of expected values.

@item @meta{arg}
Where @meta{arg} is the formal name of the argument.  In this case the
class defaults to the conventional @class{top}, which is interpreted as
parent of every other class (and so it has the least specificity).
@end table

If a method is defined with the same signature, and support for rest
arguments, of an already registered method: the old method is
overwritten by the new one.  Two methods having, position by position,
arguments of the same class, but such that one supports rest arguments
and the other does not, are different.
@end deffn


@deffn Syntax add-method @ameta{generic} @ameta{classes} @ameta{has-rest} @ameta{closure}
Add a new method to an already existent generic function,
@meta{generic}.  @meta{classes} must be a list of class names for which
this method specialises the generic function.  @meta{closure} must be
the method's closure.  @meta{has-rest} must be @true{} or @false{}, when
@true{} it means that the closure supports rest arguments.
@end deffn

@c page
@node old-generics next
@appendixsec Invoking the next method


@defun call-next-method
Call the next most specific method.
@end defun


@defun next-method?
Return true if a next method is available.
@end defun

@c page
@node old-generics examples
@appendixsec Examples of method dispatching


Here we show with some examples what we have to expect from the
multimethod dispatching of @library{old-generics}.  In the following
examples the string @code{%apple} is written in place of the value bound
to the symbol @class{apple}.

Let's examine this example:

@example
(define-class <one> (parent <top>))
(define-class <two> (parent <one>))
(define-class <c>   (parent <two>))
@end example

@noindent
the class hierarchy is:

@example
<top> -> <one> -> <two> -> <c>
@end example

@noindent
so for the generic function:

@example
(define-generic doit)
(define-method (doit (o <one>)) 'one)
(define-method (doit (o <two>)) 'two)
@end example

@noindent
applied to a value of type @class{c}: the method with @class{two} in the
signature is @emph{more specific} than the method with @class{one} in
the signature:

@example
(doit (make-<c>)) @result{} two
@end example

@noindent
also the method with @class{one} in the signature is the ``next method''
of the method with @class{two} in the signature, we can call it using
@func{call-next-method}.

The following example shows a call to the next method:

@example
(define-generic fluff)

(define-method (fluff (o <one>))
  'one)

(define-method (fluff (o <two>))
  (cons 'two (call-next-method)))

(define o (make-<c>))

(fluff o)
@result{} (two . one)
@end example

@c page
@node old-generics predefined
@appendixsec Predefined generic functions


@deffn {Generic Function} object->string @var{obj}
Return a string representation for @var{obj}.  A non--specialised method
is predefined to use the following implementation:

@example
(call-with-string-output-port
   (lambda (port)
     (display obj port)))
@end example
@end deffn

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
@c Local Variables:
@c mode: texinfo
@c TeX-master: t
@c End:
