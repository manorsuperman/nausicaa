(library (nausicaa r6rs lexer-table)
  (export
    r6rs-lexer-table)
  (import (rnrs) (nausicaa silex lexer)(nausicaa silex default-error-handler)(nausicaa parser-tools lexical-token)(nausicaa parser-tools source-location))

;
; Table generated from the file lexer-table.l by SILex 1.0
;

(define r6rs-lexer-table
  (vector
   'all
   (lambda (yycontinue yygetc yyungetc)
     (lambda (yytext yyline yycolumn yyoffset)
       			(make-<lexical-token> '*eoi*
			 (make-<source-location> #f yyline yycolumn yyoffset)
			 (eof-object) 0)
       ))
   (lambda (yycontinue yygetc yyungetc)
     (lambda (yytext yyline yycolumn yyoffset)
         		(silex-default-error-handler)

;;; end of file
       ))
   (vector
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
        		(make-<lexical-token> 'OPAREN
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\( 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
        		(make-<lexical-token> 'CPAREN
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\) 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
          		(make-<lexical-token> 'OBRACKET
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\[ 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
          		(make-<lexical-token> 'CBRACKET
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\] 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
      			(make-<lexical-token> 'TICK
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\' 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
          		(make-<lexical-token> 'BACKTICK
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\` 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
         		(make-<lexical-token> 'COMMAAT
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      ",@" 2)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
       			(make-<lexical-token> 'COMMA
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\, 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
     			(make-<lexical-token> 'DOT
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\. 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
             		(make-<lexical-token> 'DOUBLEQUOTE
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\" 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
           		(make-<lexical-token> 'SEMICOLON
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\; 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
            		(make-<lexical-token> 'SHARPPAREN
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      "#(" 2)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
               		(make-<lexical-token> 'SHARPVU8PAREN
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      "#vu8(" 4)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
           		(make-<lexical-token> 'SHARPTICK
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      "#'" 2)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
               		(make-<lexical-token> 'SHARPBACKTICK
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      "#`" 2)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
              		(make-<lexical-token> 'SHARPCOMMAAT
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      "#,@" 3)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
            		(make-<lexical-token> 'SHARPCOMMA
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      #\( 1)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
                	(make-<lexical-token> 'SHARPSEMICOLON
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      "#;" 2)
        ))
    #t
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yytext yyline yycolumn yyoffset)
             		(make-<lexical-token> 'LINECOMMENT
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      yytext (string-length yytext))
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
                	(make-<lexical-token> 'ONESTEDCOMMENT
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      "#|" 2)
        ))
    #t
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yytext yyline yycolumn yyoffset)
               		(make-<lexical-token> 'SHARPBANGR6RS
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      yytext 6)
        ))
    #f
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yyline yycolumn yyoffset)
           		(make-<lexical-token> 'SHARPBANG
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      "#!" 2)
        ))
    #t
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yytext yyline yycolumn yyoffset)
            		(make-<lexical-token> 'WHITESPACE
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      yytext (string-length yytext))
        ))
    #t
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yytext yyline yycolumn yyoffset)
            		(make-<lexical-token> 'LINEENDING
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      yytext (string-length yytext))
        ))
    #t
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yytext yyline yycolumn yyoffset)
            		(make-<lexical-token> 'IDENTIFIER
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      (string->symbol yytext) (string-length yytext))
        ))
    #t
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yytext yyline yycolumn yyoffset)
                     	(make-<lexical-token> 'IDENTIFIER
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      (string->symbol yytext) (string-length yytext))
        ))
    #t
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yytext yyline yycolumn yyoffset)
         		(make-<lexical-token> 'BOOLEAN
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      (case yytext
						(("#t" "#T")	#t)
						(("#f" "#F")	#f))
					      2)
        ))
    #t
    (lambda (yycontinue yygetc yyungetc)
      (lambda (yytext yyline yycolumn yyoffset)
           		(make-<lexical-token> 'character
					      (make-<source-location> #f yyline yycolumn yyoffset)
					      yytext (string-length yytext))
        )))
   'code
   (lambda (<<EOF>>-pre-action
            <<ERROR>>-pre-action
            rules-pre-action
            IS)
     (letrec
         ((user-action-<<EOF>> #f)
          (user-action-<<ERROR>> #f)
          (user-action-0 #f)
          (user-action-1 #f)
          (user-action-2 #f)
          (user-action-3 #f)
          (user-action-4 #f)
          (user-action-5 #f)
          (user-action-6 #f)
          (user-action-7 #f)
          (user-action-8 #f)
          (user-action-9 #f)
          (user-action-10 #f)
          (user-action-11 #f)
          (user-action-12 #f)
          (user-action-13 #f)
          (user-action-14 #f)
          (user-action-15 #f)
          (user-action-16 #f)
          (user-action-17 #f)
          (user-action-18 #f)
          (user-action-19 #f)
          (user-action-20 #f)
          (user-action-21 #f)
          (user-action-22 #f)
          (user-action-23 #f)
          (user-action-24 #f)
          (user-action-25 #f)
          (user-action-26 #f)
          (user-action-27 #f)
          (start-go-to-end    (:input-system-start-go-to-end	IS))
          (end-go-to-point    (:input-system-end-go-to-point	IS))
          (init-lexeme        (:input-system-init-lexeme	IS))
          (get-start-line     (:input-system-get-start-line	IS))
          (get-start-column   (:input-system-get-start-column	IS))
          (get-start-offset   (:input-system-get-start-offset	IS))
          (peek-left-context  (:input-system-peek-left-context	IS))
          (peek-char          (:input-system-peek-char		IS))
          (read-char          (:input-system-read-char		IS))
          (get-start-end-text (:input-system-get-start-end-text IS))
          (user-getc          (:input-system-user-getc		IS))
          (user-ungetc        (:input-system-user-ungetc	IS))
          (action-<<EOF>>
           (lambda (yyline yycolumn yyoffset)
             (user-action-<<EOF>> "" yyline yycolumn yyoffset)))
          (action-<<ERROR>>
           (lambda (yyline yycolumn yyoffset)
             (user-action-<<ERROR>> "" yyline yycolumn yyoffset)))
          (action-0
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-0 yyline yycolumn yyoffset)))
          (action-1
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-1 yyline yycolumn yyoffset)))
          (action-2
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-2 yyline yycolumn yyoffset)))
          (action-3
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-3 yyline yycolumn yyoffset)))
          (action-4
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-4 yyline yycolumn yyoffset)))
          (action-5
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-5 yyline yycolumn yyoffset)))
          (action-6
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-6 yyline yycolumn yyoffset)))
          (action-7
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-7 yyline yycolumn yyoffset)))
          (action-8
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-8 yyline yycolumn yyoffset)))
          (action-9
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-9 yyline yycolumn yyoffset)))
          (action-10
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-10 yyline yycolumn yyoffset)))
          (action-11
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-11 yyline yycolumn yyoffset)))
          (action-12
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-12 yyline yycolumn yyoffset)))
          (action-13
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-13 yyline yycolumn yyoffset)))
          (action-14
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-14 yyline yycolumn yyoffset)))
          (action-15
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-15 yyline yycolumn yyoffset)))
          (action-16
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-16 yyline yycolumn yyoffset)))
          (action-17
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-17 yyline yycolumn yyoffset)))
          (action-18
           (lambda (yyline yycolumn yyoffset)
             (let ((yytext (get-start-end-text)))
               (start-go-to-end)
               (user-action-18 yytext yyline yycolumn yyoffset))))
          (action-19
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-19 yyline yycolumn yyoffset)))
          (action-20
           (lambda (yyline yycolumn yyoffset)
             (let ((yytext (get-start-end-text)))
               (start-go-to-end)
               (user-action-20 yytext yyline yycolumn yyoffset))))
          (action-21
           (lambda (yyline yycolumn yyoffset)
             (start-go-to-end)
             (user-action-21 yyline yycolumn yyoffset)))
          (action-22
           (lambda (yyline yycolumn yyoffset)
             (let ((yytext (get-start-end-text)))
               (start-go-to-end)
               (user-action-22 yytext yyline yycolumn yyoffset))))
          (action-23
           (lambda (yyline yycolumn yyoffset)
             (let ((yytext (get-start-end-text)))
               (start-go-to-end)
               (user-action-23 yytext yyline yycolumn yyoffset))))
          (action-24
           (lambda (yyline yycolumn yyoffset)
             (let ((yytext (get-start-end-text)))
               (start-go-to-end)
               (user-action-24 yytext yyline yycolumn yyoffset))))
          (action-25
           (lambda (yyline yycolumn yyoffset)
             (let ((yytext (get-start-end-text)))
               (start-go-to-end)
               (user-action-25 yytext yyline yycolumn yyoffset))))
          (action-26
           (lambda (yyline yycolumn yyoffset)
             (let ((yytext (get-start-end-text)))
               (start-go-to-end)
               (user-action-26 yytext yyline yycolumn yyoffset))))
          (action-27
           (lambda (yyline yycolumn yyoffset)
             (let ((yytext (get-start-end-text)))
               (start-go-to-end)
               (user-action-27 yytext yyline yycolumn yyoffset))))
          (state-0
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (< c 93)
                       (if (< c 42)
                           (if (< c 33)
                               (if (< c 11)
                                   (if (< c 9)
                                       (state-15 action)
                                       (if (< c 10)
                                           (state-11 action)
                                           (state-1 action)))
                                   (if (< c 14)
                                       (if (< c 13)
                                           (state-11 action)
                                           (state-9 action))
                                       (if (< c 32)
                                           (state-15 action)
                                           (state-11 action))))
                               (if (< c 36)
                                   (if (< c 34)
                                       (state-6 action)
                                       (if (< c 35)
                                           (state-14 action)
                                           (state-12 action)))
                                   (if (< c 40)
                                       (if (< c 39)
                                           (state-6 action)
                                           (state-18 action))
                                       (if (< c 41)
                                           (state-22 action)
                                           (state-21 action)))))
                           (if (< c 58)
                               (if (< c 45)
                                   (if (< c 43)
                                       (state-6 action)
                                       (if (< c 44)
                                           (state-4 action)
                                           (state-16 action)))
                                   (if (< c 47)
                                       (if (< c 46)
                                           (state-2 action)
                                           (state-3 action))
                                       (if (< c 48)
                                           (state-6 action)
                                           (state-15 action))))
                               (if (< c 64)
                                   (if (= c 59)
                                       (state-13 action)
                                       (state-6 action))
                                   (if (< c 91)
                                       (if (< c 65)
                                           (state-15 action)
                                           (state-6 action))
                                       (if (< c 92)
                                           (state-20 action)
                                           (state-5 action))))))
                       (if (< c 8192)
                           (if (< c 134)
                               (if (< c 97)
                                   (if (< c 94)
                                       (state-19 action)
                                       (if (< c 96)
                                           (state-6 action)
                                           (state-17 action)))
                                   (if (< c 126)
                                       (if (< c 123)
                                           (state-6 action)
                                           (state-15 action))
                                       (if (< c 133)
                                           (state-6 action)
                                           (state-7 action))))
                               (if (< c 5760)
                                   (if (= c 160)
                                       (state-8 action)
                                       (state-6 action))
                                   (if (< c 6158)
                                       (if (< c 5761)
                                           (state-8 action)
                                           (state-6 action))
                                       (if (< c 6159)
                                           (state-8 action)
                                           (state-6 action)))))
                           (if (< c 8287)
                               (if (< c 8233)
                                   (if (< c 8203)
                                       (state-8 action)
                                       (if (< c 8232)
                                           (state-6 action)
                                           (state-10 action)))
                                   (if (< c 8239)
                                       (if (< c 8234)
                                           (state-8 action)
                                           (state-6 action))
                                       (if (< c 8240)
                                           (state-8 action)
                                           (state-6 action))))
                               (if (< c 12289)
                                   (if (< c 8288)
                                       (state-8 action)
                                       (if (< c 12288)
                                           (state-6 action)
                                           (state-8 action)))
                                   (if (< c 57344)
                                       (if (< c 55296)
                                           (state-6 action)
                                           (state-15 action))
                                       (if (< c 1114112)
                                           (state-6 action)
                                           (state-15 action)))))))
                   action))))
          (state-1
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 6159)
                       (if (< c 160)
                           (if (< c 14)
                               (if (< c 9)
                                   action-22
                                   (state-23 action-22))
                               (if (= c 32)
                                   (state-23 action-22)
                                   action-22))
                           (if (< c 5760)
                               (if (< c 161)
                                   (state-23 action-22)
                                   action-22)
                               (if (< c 5761)
                                   (state-23 action-22)
                                   (if (< c 6158)
                                       action-22
                                       (state-23 action-22)))))
                       (if (< c 8239)
                           (if (< c 8203)
                               (if (< c 8192)
                                   action-22
                                   (state-23 action-22))
                               (if (< c 8232)
                                   action-22
                                   (if (< c 8234)
                                       (state-23 action-22)
                                       action-22)))
                           (if (< c 8288)
                               (if (< c 8240)
                                   (state-23 action-22)
                                   (if (< c 8287)
                                       action-22
                                       (state-23 action-22)))
                               (if (= c 12288)
                                   (state-23 action-22)
                                   action-22))))
                   action-22))))
          (state-2
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 62)
                       (state-24 action-8)
                       action-8)
                   action-8))))
          (state-3
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 46)
                       (state-25 action-8)
                       action-8)
                   action-8))))
          (state-4
           (lambda (action)
             (end-go-to-point)
             action-8))
          (state-5
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 120)
                       (state-26 action-8)
                       action-8)
                   action-8))))
          (state-6
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 91)
                       (if (< c 42)
                           (if (< c 34)
                               (if (< c 33)
                                   action-8
                                   (state-28 action-8))
                               (if (< c 36)
                                   action-8
                                   (if (< c 39)
                                       (state-28 action-8)
                                       action-8)))
                           (if (< c 45)
                               (if (< c 44)
                                   (state-28 action-8)
                                   action-8)
                               (if (= c 59)
                                   action-8
                                   (state-28 action-8))))
                       (if (< c 97)
                           (if (< c 93)
                               (if (< c 92)
                                   action-8
                                   (state-27 action-8))
                               (if (< c 94)
                                   action-8
                                   (if (< c 96)
                                       (state-28 action-8)
                                       action-8)))
                           (if (< c 55296)
                               (if (< c 123)
                                   (state-28 action-8)
                                   (if (< c 126)
                                       action-8
                                       (state-28 action-8)))
                               (if (< c 57344)
                                   action-8
                                   (if (< c 1114112)
                                       (state-28 action-8)
                                       action-8)))))
                   action-8))))
          (state-7
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 91)
                       (if (< c 42)
                           (if (< c 34)
                               (if (< c 33)
                                   action-8
                                   (state-28 action-8))
                               (if (< c 36)
                                   action-8
                                   (if (< c 39)
                                       (state-28 action-8)
                                       action-8)))
                           (if (< c 45)
                               (if (< c 44)
                                   (state-28 action-8)
                                   action-8)
                               (if (= c 59)
                                   action-8
                                   (state-28 action-8))))
                       (if (< c 97)
                           (if (< c 93)
                               (if (< c 92)
                                   action-8
                                   (state-27 action-8))
                               (if (< c 94)
                                   action-8
                                   (if (< c 96)
                                       (state-28 action-8)
                                       action-8)))
                           (if (< c 55296)
                               (if (< c 123)
                                   (state-28 action-8)
                                   (if (< c 126)
                                       action-8
                                       (state-28 action-8)))
                               (if (< c 57344)
                                   action-8
                                   (if (< c 1114112)
                                       (state-28 action-8)
                                       action-8)))))
                   action-8))))
          (state-8
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 126)
                       (if (< c 45)
                           (if (< c 34)
                               (if (< c 14)
                                   (if (< c 9)
                                       action-8
                                       (state-23 action-8))
                                   (if (< c 32)
                                       action-8
                                       (if (< c 33)
                                           (state-23 action-8)
                                           (state-28 action-8))))
                               (if (< c 39)
                                   (if (< c 36)
                                       action-8
                                       (state-28 action-8))
                                   (if (< c 42)
                                       action-8
                                       (if (< c 44)
                                           (state-28 action-8)
                                           action-8))))
                           (if (< c 93)
                               (if (< c 60)
                                   (if (< c 59)
                                       (state-28 action-8)
                                       action-8)
                                   (if (< c 91)
                                       (state-28 action-8)
                                       (if (< c 92)
                                           action-8
                                           (state-27 action-8))))
                               (if (< c 96)
                                   (if (< c 94)
                                       action-8
                                       (state-28 action-8))
                                   (if (< c 97)
                                       action-8
                                       (if (< c 123)
                                           (state-28 action-8)
                                           action-8)))))
                       (if (< c 8234)
                           (if (< c 6158)
                               (if (< c 161)
                                   (if (< c 160)
                                       (state-28 action-8)
                                       (state-29 action-8))
                                   (if (= c 5760)
                                       (state-29 action-8)
                                       (state-28 action-8)))
                               (if (< c 8192)
                                   (if (< c 6159)
                                       (state-29 action-8)
                                       (state-28 action-8))
                                   (if (< c 8203)
                                       (state-29 action-8)
                                       (if (< c 8232)
                                           (state-28 action-8)
                                           (state-29 action-8)))))
                           (if (< c 12288)
                               (if (< c 8240)
                                   (if (< c 8239)
                                       (state-28 action-8)
                                       (state-29 action-8))
                                   (if (= c 8287)
                                       (state-29 action-8)
                                       (state-28 action-8)))
                               (if (< c 55296)
                                   (if (< c 12289)
                                       (state-29 action-8)
                                       (state-28 action-8))
                                   (if (< c 57344)
                                       action-8
                                       (if (< c 1114112)
                                           (state-28 action-8)
                                           action-8))))))
                   action-8))))
          (state-9
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 5761)
                       (if (< c 33)
                           (if (< c 11)
                               (if (< c 9)
                                   action-8
                                   (if (< c 10)
                                       (state-23 action-8)
                                       (state-1 action-8)))
                               (if (< c 14)
                                   (state-23 action-8)
                                   (if (< c 32)
                                       action-8
                                       (state-23 action-8))))
                           (if (< c 160)
                               (if (= c 133)
                                   (state-30 action-8)
                                   action-8)
                               (if (< c 161)
                                   (state-23 action-8)
                                   (if (< c 5760)
                                       action-8
                                       (state-23 action-8)))))
                       (if (< c 8234)
                           (if (< c 8192)
                               (if (= c 6158)
                                   (state-23 action-8)
                                   action-8)
                               (if (< c 8203)
                                   (state-23 action-8)
                                   (if (< c 8232)
                                       action-8
                                       (state-23 action-8))))
                           (if (< c 8287)
                               (if (= c 8239)
                                   (state-23 action-8)
                                   action-8)
                               (if (< c 12288)
                                   (if (< c 8288)
                                       (state-23 action-8)
                                       action-8)
                                   (if (< c 12289)
                                       (state-23 action-8)
                                       action-8)))))
                   action-8))))
          (state-10
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 126)
                       (if (< c 45)
                           (if (< c 34)
                               (if (< c 14)
                                   (if (< c 9)
                                       action-8
                                       (state-23 action-8))
                                   (if (< c 32)
                                       action-8
                                       (if (< c 33)
                                           (state-23 action-8)
                                           (state-28 action-8))))
                               (if (< c 39)
                                   (if (< c 36)
                                       action-8
                                       (state-28 action-8))
                                   (if (< c 42)
                                       action-8
                                       (if (< c 44)
                                           (state-28 action-8)
                                           action-8))))
                           (if (< c 93)
                               (if (< c 60)
                                   (if (< c 59)
                                       (state-28 action-8)
                                       action-8)
                                   (if (< c 91)
                                       (state-28 action-8)
                                       (if (< c 92)
                                           action-8
                                           (state-27 action-8))))
                               (if (< c 96)
                                   (if (< c 94)
                                       action-8
                                       (state-28 action-8))
                                   (if (< c 97)
                                       action-8
                                       (if (< c 123)
                                           (state-28 action-8)
                                           action-8)))))
                       (if (< c 8234)
                           (if (< c 6158)
                               (if (< c 161)
                                   (if (< c 160)
                                       (state-28 action-8)
                                       (state-29 action-8))
                                   (if (= c 5760)
                                       (state-29 action-8)
                                       (state-28 action-8)))
                               (if (< c 8192)
                                   (if (< c 6159)
                                       (state-29 action-8)
                                       (state-28 action-8))
                                   (if (< c 8203)
                                       (state-29 action-8)
                                       (if (< c 8232)
                                           (state-28 action-8)
                                           (state-29 action-8)))))
                           (if (< c 12288)
                               (if (< c 8240)
                                   (if (< c 8239)
                                       (state-28 action-8)
                                       (state-29 action-8))
                                   (if (= c 8287)
                                       (state-29 action-8)
                                       (state-28 action-8)))
                               (if (< c 55296)
                                   (if (< c 12289)
                                       (state-29 action-8)
                                       (state-28 action-8))
                                   (if (< c 57344)
                                       action-8
                                       (if (< c 1114112)
                                           (state-28 action-8)
                                           action-8))))))
                   action-8))))
          (state-11
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 6159)
                       (if (< c 160)
                           (if (< c 14)
                               (if (< c 9)
                                   action-8
                                   (state-23 action-8))
                               (if (= c 32)
                                   (state-23 action-8)
                                   action-8))
                           (if (< c 5760)
                               (if (< c 161)
                                   (state-23 action-8)
                                   action-8)
                               (if (< c 5761)
                                   (state-23 action-8)
                                   (if (< c 6158)
                                       action-8
                                       (state-23 action-8)))))
                       (if (< c 8239)
                           (if (< c 8203)
                               (if (< c 8192)
                                   action-8
                                   (state-23 action-8))
                               (if (< c 8232)
                                   action-8
                                   (if (< c 8234)
                                       (state-23 action-8)
                                       action-8)))
                           (if (< c 8288)
                               (if (< c 8240)
                                   (state-23 action-8)
                                   (if (< c 8287)
                                       action-8
                                       (state-23 action-8)))
                               (if (= c 12288)
                                   (state-23 action-8)
                                   action-8))))
                   action-8))))
          (state-12
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 85)
                       (if (< c 44)
                           (if (< c 39)
                               (if (= c 33)
                                   (state-33 action-8)
                                   action-8)
                               (if (< c 40)
                                   (state-38 action-8)
                                   (if (< c 41)
                                       (state-40 action-8)
                                       action-8)))
                           (if (< c 60)
                               (if (< c 45)
                                   (state-36 action-8)
                                   (if (< c 59)
                                       action-8
                                       (state-35 action-8)))
                               (if (< c 71)
                                   (if (< c 70)
                                       action-8
                                       (state-32 action-8))
                                   (if (< c 84)
                                       action-8
                                       (state-32 action-8)))))
                       (if (< c 103)
                           (if (< c 96)
                               (if (= c 92)
                                   (state-31 action-8)
                                   action-8)
                               (if (< c 97)
                                   (state-37 action-8)
                                   (if (< c 102)
                                       action-8
                                       (state-32 action-8))))
                           (if (< c 118)
                               (if (= c 116)
                                   (state-32 action-8)
                                   action-8)
                               (if (< c 124)
                                   (if (< c 119)
                                       (state-39 action-8)
                                       action-8)
                                   (if (< c 125)
                                       (state-34 action-8)
                                       action-8)))))
                   action-8))))
          (state-13
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 14)
                       (if (< c 11)
                           (if (< c 10)
                               (state-41 action-8)
                               (state-44 action-8))
                           (if (< c 13)
                               (state-41 action-8)
                               (state-42 action-8)))
                       (if (< c 134)
                           (if (< c 133)
                               (state-41 action-8)
                               (state-43 action-8))
                           (if (< c 8232)
                               (state-41 action-8)
                               (if (< c 8234)
                                   (state-43 action-8)
                                   (state-41 action-8)))))
                   action-8))))
          (state-14
           (lambda (action)
             (end-go-to-point)
             action-8))
          (state-15
           (lambda (action)
             (end-go-to-point)
             action-8))
          (state-16
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 64)
                       (state-45 action-7)
                       action-7)
                   action-7))))
          (state-17
           (lambda (action)
             (end-go-to-point)
             action-5))
          (state-18
           (lambda (action)
             (end-go-to-point)
             action-4))
          (state-19
           (lambda (action)
             (end-go-to-point)
             action-3))
          (state-20
           (lambda (action)
             (end-go-to-point)
             action-2))
          (state-21
           (lambda (action)
             (end-go-to-point)
             action-1))
          (state-22
           (lambda (action)
             (end-go-to-point)
             action-0))
          (state-23
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 6159)
                       (if (< c 160)
                           (if (< c 14)
                               (if (< c 9)
                                   action-22
                                   (state-23 action-22))
                               (if (= c 32)
                                   (state-23 action-22)
                                   action-22))
                           (if (< c 5760)
                               (if (< c 161)
                                   (state-23 action-22)
                                   action-22)
                               (if (< c 5761)
                                   (state-23 action-22)
                                   (if (< c 6158)
                                       action-22
                                       (state-23 action-22)))))
                       (if (< c 8239)
                           (if (< c 8203)
                               (if (< c 8192)
                                   action-22
                                   (state-23 action-22))
                               (if (< c 8232)
                                   action-22
                                   (if (< c 8234)
                                       (state-23 action-22)
                                       action-22)))
                           (if (< c 8288)
                               (if (< c 8240)
                                   (state-23 action-22)
                                   (if (< c 8287)
                                       action-22
                                       (state-23 action-22)))
                               (if (= c 12288)
                                   (state-23 action-22)
                                   action-22))))
                   action-22))))
          (state-24
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 91)
                       (if (< c 42)
                           (if (< c 34)
                               (if (< c 33)
                                   action-25
                                   (state-24 action-25))
                               (if (< c 36)
                                   action-25
                                   (if (< c 39)
                                       (state-24 action-25)
                                       action-25)))
                           (if (< c 45)
                               (if (< c 44)
                                   (state-24 action-25)
                                   action-25)
                               (if (= c 59)
                                   action-25
                                   (state-24 action-25))))
                       (if (< c 97)
                           (if (< c 93)
                               (if (< c 92)
                                   action-25
                                   (state-46 action-25))
                               (if (< c 94)
                                   action-25
                                   (if (< c 96)
                                       (state-24 action-25)
                                       action-25)))
                           (if (< c 55296)
                               (if (< c 123)
                                   (state-24 action-25)
                                   (if (< c 126)
                                       action-25
                                       (state-24 action-25)))
                               (if (< c 57344)
                                   action-25
                                   (if (< c 1114112)
                                       (state-24 action-25)
                                       action-25)))))
                   action-25))))
          (state-25
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 46)
                       (state-47 action)
                       action)
                   action))))
          (state-26
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (< c 65)
                       (if (< c 48)
                           action
                           (if (< c 58)
                               (state-48 action)
                               action))
                       (if (< c 97)
                           (if (< c 71)
                               (state-48 action)
                               action)
                           (if (< c 103)
                               (state-48 action)
                               action)))
                   action))))
          (state-27
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 120)
                       (state-49 action)
                       action)
                   action))))
          (state-28
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 91)
                       (if (< c 42)
                           (if (< c 34)
                               (if (< c 33)
                                   action-24
                                   (state-28 action-24))
                               (if (< c 36)
                                   action-24
                                   (if (< c 39)
                                       (state-28 action-24)
                                       action-24)))
                           (if (< c 45)
                               (if (< c 44)
                                   (state-28 action-24)
                                   action-24)
                               (if (= c 59)
                                   action-24
                                   (state-28 action-24))))
                       (if (< c 97)
                           (if (< c 93)
                               (if (< c 92)
                                   action-24
                                   (state-27 action-24))
                               (if (< c 94)
                                   action-24
                                   (if (< c 96)
                                       (state-28 action-24)
                                       action-24)))
                           (if (< c 55296)
                               (if (< c 123)
                                   (state-28 action-24)
                                   (if (< c 126)
                                       action-24
                                       (state-28 action-24)))
                               (if (< c 57344)
                                   action-24
                                   (if (< c 1114112)
                                       (state-28 action-24)
                                       action-24)))))
                   action-24))))
          (state-29
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 126)
                       (if (< c 45)
                           (if (< c 34)
                               (if (< c 14)
                                   (if (< c 9)
                                       action-22
                                       (state-23 action-22))
                                   (if (< c 32)
                                       action-22
                                       (if (< c 33)
                                           (state-23 action-22)
                                           (state-28 action-22))))
                               (if (< c 39)
                                   (if (< c 36)
                                       action-22
                                       (state-28 action-22))
                                   (if (< c 42)
                                       action-22
                                       (if (< c 44)
                                           (state-28 action-22)
                                           action-22))))
                           (if (< c 93)
                               (if (< c 60)
                                   (if (< c 59)
                                       (state-28 action-22)
                                       action-22)
                                   (if (< c 91)
                                       (state-28 action-22)
                                       (if (< c 92)
                                           action-22
                                           (state-27 action-22))))
                               (if (< c 96)
                                   (if (< c 94)
                                       action-22
                                       (state-28 action-22))
                                   (if (< c 97)
                                       action-22
                                       (if (< c 123)
                                           (state-28 action-22)
                                           action-22)))))
                       (if (< c 8234)
                           (if (< c 6158)
                               (if (< c 161)
                                   (if (< c 160)
                                       (state-28 action-22)
                                       (state-29 action-22))
                                   (if (= c 5760)
                                       (state-29 action-22)
                                       (state-28 action-22)))
                               (if (< c 8192)
                                   (if (< c 6159)
                                       (state-29 action-22)
                                       (state-28 action-22))
                                   (if (< c 8203)
                                       (state-29 action-22)
                                       (if (< c 8232)
                                           (state-28 action-22)
                                           (state-29 action-22)))))
                           (if (< c 12288)
                               (if (< c 8240)
                                   (if (< c 8239)
                                       (state-28 action-22)
                                       (state-29 action-22))
                                   (if (= c 8287)
                                       (state-29 action-22)
                                       (state-28 action-22)))
                               (if (< c 55296)
                                   (if (< c 12289)
                                       (state-29 action-22)
                                       (state-28 action-22))
                                   (if (< c 57344)
                                       action-22
                                       (if (< c 1114112)
                                           (state-28 action-22)
                                           action-22))))))
                   action-22))))
          (state-30
           (lambda (action)
             (end-go-to-point)
             action-23))
          (state-31
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (< c 110)
                       (if (< c 99)
                           (if (< c 11)
                               (if (< c 10)
                                   (state-62 action)
                                   action)
                               (if (< c 97)
                                   (state-62 action)
                                   (if (< c 98)
                                       (state-60 action)
                                       (state-59 action))))
                           (if (< c 102)
                               (if (< c 100)
                                   (state-62 action)
                                   (if (< c 101)
                                       (state-50 action)
                                       (state-52 action)))
                               (if (= c 108)
                                   (state-57 action)
                                   (state-62 action))))
                       (if (< c 116)
                           (if (< c 113)
                               (if (< c 111)
                                   (state-56 action)
                                   (if (< c 112)
                                       (state-62 action)
                                       (state-54 action)))
                               (if (< c 114)
                                   (state-62 action)
                                   (if (< c 115)
                                       (state-53 action)
                                       (state-51 action))))
                           (if (< c 119)
                               (if (< c 117)
                                   (state-58 action)
                                   (if (< c 118)
                                       (state-62 action)
                                       (state-55 action)))
                               (if (= c 120)
                                   (state-61 action)
                                   (state-62 action)))))
                   action))))
          (state-32
           (lambda (action)
             (end-go-to-point)
             action-26))
          (state-33
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 114)
                       (state-63 action-21)
                       action-21)
                   action-21))))
          (state-34
           (lambda (action)
             (end-go-to-point)
             action-19))
          (state-35
           (lambda (action)
             (end-go-to-point)
             action-17))
          (state-36
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 64)
                       (state-64 action-16)
                       action-16)
                   action-16))))
          (state-37
           (lambda (action)
             (end-go-to-point)
             action-14))
          (state-38
           (lambda (action)
             (end-go-to-point)
             action-13))
          (state-39
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 117)
                       (state-65 action)
                       action)
                   action))))
          (state-40
           (lambda (action)
             (end-go-to-point)
             action-11))
          (state-41
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (< c 14)
                       (if (< c 11)
                           (if (< c 10)
                               (state-41 action)
                               (state-44 action))
                           (if (< c 13)
                               (state-41 action)
                               (state-42 action)))
                       (if (< c 134)
                           (if (< c 133)
                               (state-41 action)
                               (state-43 action))
                           (if (< c 8232)
                               (state-41 action)
                               (if (< c 8234)
                                   (state-43 action)
                                   (state-41 action)))))
                   action))))
          (state-42
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 14)
                       (if (< c 11)
                           (if (< c 10)
                               (state-41 action-18)
                               (state-44 action-18))
                           (if (< c 13)
                               (state-41 action-18)
                               (state-42 action-18)))
                       (if (< c 134)
                           (if (< c 133)
                               (state-41 action-18)
                               (state-43 action-18))
                           (if (< c 8232)
                               (state-41 action-18)
                               (if (< c 8234)
                                   (state-43 action-18)
                                   (state-41 action-18)))))
                   action-18))))
          (state-43
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 14)
                       (if (< c 11)
                           (if (< c 10)
                               (state-41 action-18)
                               (state-44 action-18))
                           (if (< c 13)
                               (state-41 action-18)
                               (state-42 action-18)))
                       (if (< c 134)
                           (if (< c 133)
                               (state-41 action-18)
                               (state-43 action-18))
                           (if (< c 8232)
                               (state-41 action-18)
                               (if (< c 8234)
                                   (state-43 action-18)
                                   (state-41 action-18)))))
                   action-18))))
          (state-44
           (lambda (action)
             (end-go-to-point)
             action-18))
          (state-45
           (lambda (action)
             (end-go-to-point)
             action-6))
          (state-46
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 120)
                       (state-66 action)
                       action)
                   action))))
          (state-47
           (lambda (action)
             (end-go-to-point)
             action-25))
          (state-48
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (< c 60)
                       (if (< c 58)
                           (if (< c 48)
                               action
                               (state-48 action))
                           (if (< c 59)
                               action
                               (state-28 action)))
                       (if (< c 71)
                           (if (< c 65)
                               action
                               (state-48 action))
                           (if (< c 97)
                               action
                               (if (< c 103)
                                   (state-48 action)
                                   action))))
                   action))))
          (state-49
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (< c 65)
                       (if (< c 48)
                           action
                           (if (< c 58)
                               (state-67 action)
                               action))
                       (if (< c 97)
                           (if (< c 71)
                               (state-67 action)
                               action)
                           (if (< c 103)
                               (state-67 action)
                               action)))
                   action))))
          (state-50
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-68 action-27)
                       action-27)
                   action-27))))
          (state-51
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 112)
                       (state-69 action-27)
                       action-27)
                   action-27))))
          (state-52
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 115)
                       (state-70 action-27)
                       action-27)
                   action-27))))
          (state-53
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-71 action-27)
                       action-27)
                   action-27))))
          (state-54
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 97)
                       (state-72 action-27)
                       action-27)
                   action-27))))
          (state-55
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 116)
                       (state-73 action-27)
                       action-27)
                   action-27))))
          (state-56
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 102)
                       (if (< c 101)
                           action-27
                           (state-74 action-27))
                       (if (= c 117)
                           (state-75 action-27)
                           action-27))
                   action-27))))
          (state-57
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 105)
                       (state-76 action-27)
                       action-27)
                   action-27))))
          (state-58
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 97)
                       (state-77 action-27)
                       action-27)
                   action-27))))
          (state-59
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 97)
                       (state-78 action-27)
                       action-27)
                   action-27))))
          (state-60
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (= c 108)
                       (state-79 action-27)
                       action-27)
                   action-27))))
          (state-61
           (lambda (action)
             (end-go-to-point)
             (let ((c (read-char)))
               (if c
                   (if (< c 65)
                       (if (< c 48)
                           action-27
                           (if (< c 58)
                               (state-61 action-27)
                               action-27))
                       (if (< c 97)
                           (if (< c 71)
                               (state-61 action-27)
                               action-27)
                           (if (< c 103)
                               (state-61 action-27)
                               action-27)))
                   action-27))))
          (state-62
           (lambda (action)
             (end-go-to-point)
             action-27))
          (state-63
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 54)
                       (state-80 action)
                       action)
                   action))))
          (state-64
           (lambda (action)
             (end-go-to-point)
             action-15))
          (state-65
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 56)
                       (state-81 action)
                       action)
                   action))))
          (state-66
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (< c 65)
                       (if (< c 48)
                           action
                           (if (< c 58)
                               (state-82 action)
                               action))
                       (if (< c 97)
                           (if (< c 71)
                               (state-82 action)
                               action)
                           (if (< c 103)
                               (state-82 action)
                               action)))
                   action))))
          (state-67
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (< c 60)
                       (if (< c 58)
                           (if (< c 48)
                               action
                               (state-67 action))
                           (if (< c 59)
                               action
                               (state-28 action)))
                       (if (< c 71)
                           (if (< c 65)
                               action
                               (state-67 action))
                           (if (< c 97)
                               action
                               (if (< c 103)
                                   (state-67 action)
                                   action))))
                   action))))
          (state-68
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 108)
                       (state-83 action)
                       action)
                   action))))
          (state-69
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 97)
                       (state-84 action)
                       action)
                   action))))
          (state-70
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 99)
                       (state-62 action)
                       action)
                   action))))
          (state-71
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 116)
                       (state-85 action)
                       action)
                   action))))
          (state-72
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 103)
                       (state-86 action)
                       action)
                   action))))
          (state-73
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 97)
                       (state-87 action)
                       action)
                   action))))
          (state-74
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 119)
                       (state-88 action)
                       action)
                   action))))
          (state-75
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 108)
                       (state-62 action)
                       action)
                   action))))
          (state-76
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 110)
                       (state-89 action)
                       action)
                   action))))
          (state-77
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 98)
                       (state-62 action)
                       action)
                   action))))
          (state-78
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 99)
                       (state-90 action)
                       action)
                   action))))
          (state-79
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 97)
                       (state-91 action)
                       action)
                   action))))
          (state-80
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 114)
                       (state-92 action)
                       action)
                   action))))
          (state-81
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 40)
                       (state-93 action)
                       action)
                   action))))
          (state-82
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (< c 60)
                       (if (< c 58)
                           (if (< c 48)
                               action
                               (state-82 action))
                           (if (< c 59)
                               action
                               (state-24 action)))
                       (if (< c 71)
                           (if (< c 65)
                               action
                               (state-82 action))
                           (if (< c 97)
                               action
                               (if (< c 103)
                                   (state-82 action)
                                   action))))
                   action))))
          (state-83
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-94 action)
                       action)
                   action))))
          (state-84
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 99)
                       (state-95 action)
                       action)
                   action))))
          (state-85
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 117)
                       (state-96 action)
                       action)
                   action))))
          (state-86
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-62 action)
                       action)
                   action))))
          (state-87
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 98)
                       (state-62 action)
                       action)
                   action))))
          (state-88
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 108)
                       (state-97 action)
                       action)
                   action))))
          (state-89
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-98 action)
                       action)
                   action))))
          (state-90
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 107)
                       (state-99 action)
                       action)
                   action))))
          (state-91
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 114)
                       (state-100 action)
                       action)
                   action))))
          (state-92
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 115)
                       (state-101 action)
                       action)
                   action))))
          (state-93
           (lambda (action)
             (end-go-to-point)
             action-12))
          (state-94
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 116)
                       (state-102 action)
                       action)
                   action))))
          (state-95
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-62 action)
                       action)
                   action))))
          (state-96
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 114)
                       (state-103 action)
                       action)
                   action))))
          (state-97
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 105)
                       (state-104 action)
                       action)
                   action))))
          (state-98
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 102)
                       (state-105 action)
                       action)
                   action))))
          (state-99
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 115)
                       (state-106 action)
                       action)
                   action))))
          (state-100
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 109)
                       (state-62 action)
                       action)
                   action))))
          (state-101
           (lambda (action)
             (end-go-to-point)
             action-20))
          (state-102
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-62 action)
                       action)
                   action))))
          (state-103
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 110)
                       (state-62 action)
                       action)
                   action))))
          (state-104
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 110)
                       (state-107 action)
                       action)
                   action))))
          (state-105
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-108 action)
                       action)
                   action))))
          (state-106
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 112)
                       (state-109 action)
                       action)
                   action))))
          (state-107
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-62 action)
                       action)
                   action))))
          (state-108
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-110 action)
                       action)
                   action))))
          (state-109
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 97)
                       (state-111 action)
                       action)
                   action))))
          (state-110
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 100)
                       (state-62 action)
                       action)
                   action))))
          (state-111
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 99)
                       (state-112 action)
                       action)
                   action))))
          (state-112
           (lambda (action)
             (let ((c (read-char)))
               (if c
                   (if (= c 101)
                       (state-62 action)
                       action)
                   action))))
          (start-automaton
           (lambda ()
             (if (peek-char)
                 (state-0 action-<<ERROR>>)
               action-<<EOF>>)))
          (final-lexer
           (lambda ()
             (init-lexeme)
             (let ((yyline (get-start-line))
                   (yycolumn (get-start-column))
                   (yyoffset (get-start-offset)))
               ((start-automaton) yyline yycolumn yyoffset)))))
       (set! user-action-<<EOF>> (<<EOF>>-pre-action
                                  final-lexer user-getc user-ungetc))
       (set! user-action-<<ERROR>> (<<ERROR>>-pre-action
                                    final-lexer user-getc user-ungetc))
       (set! user-action-0 ((vector-ref rules-pre-action 1)
                            final-lexer user-getc user-ungetc))
       (set! user-action-1 ((vector-ref rules-pre-action 3)
                            final-lexer user-getc user-ungetc))
       (set! user-action-2 ((vector-ref rules-pre-action 5)
                            final-lexer user-getc user-ungetc))
       (set! user-action-3 ((vector-ref rules-pre-action 7)
                            final-lexer user-getc user-ungetc))
       (set! user-action-4 ((vector-ref rules-pre-action 9)
                            final-lexer user-getc user-ungetc))
       (set! user-action-5 ((vector-ref rules-pre-action 11)
                            final-lexer user-getc user-ungetc))
       (set! user-action-6 ((vector-ref rules-pre-action 13)
                            final-lexer user-getc user-ungetc))
       (set! user-action-7 ((vector-ref rules-pre-action 15)
                            final-lexer user-getc user-ungetc))
       (set! user-action-8 ((vector-ref rules-pre-action 17)
                            final-lexer user-getc user-ungetc))
       (set! user-action-9 ((vector-ref rules-pre-action 19)
                            final-lexer user-getc user-ungetc))
       (set! user-action-10 ((vector-ref rules-pre-action 21)
                             final-lexer user-getc user-ungetc))
       (set! user-action-11 ((vector-ref rules-pre-action 23)
                             final-lexer user-getc user-ungetc))
       (set! user-action-12 ((vector-ref rules-pre-action 25)
                             final-lexer user-getc user-ungetc))
       (set! user-action-13 ((vector-ref rules-pre-action 27)
                             final-lexer user-getc user-ungetc))
       (set! user-action-14 ((vector-ref rules-pre-action 29)
                             final-lexer user-getc user-ungetc))
       (set! user-action-15 ((vector-ref rules-pre-action 31)
                             final-lexer user-getc user-ungetc))
       (set! user-action-16 ((vector-ref rules-pre-action 33)
                             final-lexer user-getc user-ungetc))
       (set! user-action-17 ((vector-ref rules-pre-action 35)
                             final-lexer user-getc user-ungetc))
       (set! user-action-18 ((vector-ref rules-pre-action 37)
                             final-lexer user-getc user-ungetc))
       (set! user-action-19 ((vector-ref rules-pre-action 39)
                             final-lexer user-getc user-ungetc))
       (set! user-action-20 ((vector-ref rules-pre-action 41)
                             final-lexer user-getc user-ungetc))
       (set! user-action-21 ((vector-ref rules-pre-action 43)
                             final-lexer user-getc user-ungetc))
       (set! user-action-22 ((vector-ref rules-pre-action 45)
                             final-lexer user-getc user-ungetc))
       (set! user-action-23 ((vector-ref rules-pre-action 47)
                             final-lexer user-getc user-ungetc))
       (set! user-action-24 ((vector-ref rules-pre-action 49)
                             final-lexer user-getc user-ungetc))
       (set! user-action-25 ((vector-ref rules-pre-action 51)
                             final-lexer user-getc user-ungetc))
       (set! user-action-26 ((vector-ref rules-pre-action 53)
                             final-lexer user-getc user-ungetc))
       (set! user-action-27 ((vector-ref rules-pre-action 55)
                             final-lexer user-getc user-ungetc))
       final-lexer))))

) ; end of library

