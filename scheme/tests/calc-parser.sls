(library (calc-parser)
  (export make-calc-parser
          make-source-location
          source-location?
          source-location-line
          source-location-input
          source-location-column
          source-location-offset
          source-location-length
          make-lexical-token
          lexical-token?
          lexical-token-value
          lexical-token-category
          lexical-token-source
          lexical-token?/end-of-input
          lalr-initial-stack-size)
  (import (rnrs) (lalr lr-driver) (lalr common) (sentinel) (calc-parser-helper) (rnrs eval))
  (define (make-calc-parser)
    (lr-driver
      '#(((*default* . *error*) (error . 6) (ID . 5) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . -24))
         ((*default* . -22) (ASSIGN . 16) (LPAREN . 15))
         ((*default* . *error*) (NEWLINE . 17))
         ((*default* . *error*)
          (NEWLINE . 30)
          (+ . 29)
          (- . 28)
          (* . 27)
          (/ . 26)
          (DIV . 25)
          (MOD . 24)
          (EXPT . 23)
          (LESS . 22)
          (GREAT . 21)
          (LESSEQ . 20)
          (GREATEQ . 19)
          (EQUAL . 18))
         ((*default* . *error*) (NEWLINE . 31))
         ((*default* . -3))
         ((*default* . *error*)
          (*eoi* . 32)
          (error . 6)
          (ID . 5)
          (NUM . 4)
          (LPAREN . 3)
          (+ . 2)
          (- . 1))
         ((*default* . -22) (LPAREN . 15))
         ((*default* . -13)
          (EQUAL . 18)
          (GREATEQ . 19)
          (LESSEQ . 20)
          (GREAT . 21)
          (LESS . 22)
          (EXPT . 23)
          (MOD . 24)
          (DIV . 25)
          (/ . 26)
          (* . 27))
         ((*default* . -12))
         ((*default* . *error*)
          (RPAREN . 34)
          (+ . 29)
          (- . 28)
          (* . 27)
          (/ . 26)
          (DIV . 25)
          (MOD . 24)
          (EXPT . 23)
          (LESS . 22)
          (GREAT . 21)
          (LESSEQ . 20)
          (GREATEQ . 19)
          (EQUAL . 18))
         ((*default* . -26) (- . 1) (+ . 2) (LPAREN . 3) (NUM . 4) (ID . 11))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . -6))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . -5))
         ((*default* . -4))
         ((*default* . -1) (*eoi* . accept))
         ((*default* . -2))
         ((*default* . -25))
         ((*default* . *error*) (RPAREN . 50))
         ((*default* . -29)
          (EQUAL . 18)
          (GREATEQ . 19)
          (LESSEQ . 20)
          (GREAT . 21)
          (LESS . 22)
          (EXPT . 23)
          (MOD . 24)
          (DIV . 25)
          (/ . 26)
          (* . 27)
          (- . 28)
          (+ . 29)
          (COMMA . 51))
         ((*default* . -7)
          (+ . 29)
          (- . 28)
          (* . 27)
          (/ . 26)
          (DIV . 25)
          (MOD . 24)
          (EXPT . 23)
          (LESS . 22)
          (GREAT . 21)
          (LESSEQ . 20)
          (GREATEQ . 19)
          (EQUAL . 18))
         ((*default* . -21))
         ((*default* . -20))
         ((*default* . -19))
         ((*default* . -18))
         ((*default* . -17))
         ((*default* . -16))
         ((*default* . -15))
         ((*default* . -14))
         ((*default* . -11))
         ((*default* . -10))
         ((*default* . -9)
          (EQUAL . 18)
          (GREATEQ . 19)
          (LESSEQ . 20)
          (GREAT . 21)
          (LESS . 22)
          (EXPT . 23)
          (MOD . 24)
          (DIV . 25)
          (/ . 26)
          (* . 27))
         ((*default* . -8)
          (EQUAL . 18)
          (GREATEQ . 19)
          (LESSEQ . 20)
          (GREAT . 21)
          (LESS . 22)
          (EXPT . 23)
          (MOD . 24)
          (DIV . 25)
          (/ . 26)
          (* . 27))
         ((*default* . -23))
         ((*default* . *error*) (ID . 11) (NUM . 4) (LPAREN . 3) (+ . 2) (- . 1))
         ((*default* . -27))
         ((*default* . -29)
          (EQUAL . 18)
          (GREATEQ . 19)
          (LESSEQ . 20)
          (GREAT . 21)
          (LESS . 22)
          (EXPT . 23)
          (MOD . 24)
          (DIV . 25)
          (/ . 26)
          (* . 27)
          (- . 28)
          (+ . 29)
          (COMMA . 51))
         ((*default* . -28)))
      (vector
        '((4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (3 . 8)
          (2 . 9)
          (1 . 10)
          (1 . 10))
        '((4 . 12)
          (4 . 12)
          (4 . 12)
          (4 . 12)
          (4 . 12)
          (4 . 12)
          (4 . 12)
          (4 . 12)
          (4 . 12)
          (4 . 12)
          (4 . 12)
          (4 . 12)
          (4 . 12))
        '((4 . 13)
          (4 . 13)
          (4 . 13)
          (4 . 13)
          (4 . 13)
          (4 . 13)
          (4 . 13)
          (4 . 13)
          (4 . 13)
          (4 . 13)
          (4 . 13)
          (4 . 13)
          (4 . 13))
        '((4 . 14)
          (4 . 14)
          (4 . 14)
          (4 . 14)
          (4 . 14)
          (4 . 14)
          (4 . 14)
          (4 . 14)
          (4 . 14)
          (4 . 14)
          (4 . 14)
          (4 . 14)
          (4 . 14))
        '()
        '()
        '()
        '()
        '()
        '()
        '((4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (4 . 7)
          (3 . 8)
          (2 . 33))
        '()
        '()
        '()
        '()
        '((5 . 35)
          (4 . 36)
          (4 . 36)
          (4 . 36)
          (4 . 36)
          (4 . 36)
          (4 . 36)
          (4 . 36)
          (4 . 36)
          (4 . 36)
          (4 . 36)
          (4 . 36)
          (4 . 36)
          (4 . 36))
        '((4 . 37)
          (4 . 37)
          (4 . 37)
          (4 . 37)
          (4 . 37)
          (4 . 37)
          (4 . 37)
          (4 . 37)
          (4 . 37)
          (4 . 37)
          (4 . 37)
          (4 . 37)
          (4 . 37))
        '()
        '((4 . 38)
          (4 . 38)
          (4 . 38)
          (4 . 38)
          (4 . 38)
          (4 . 38)
          (4 . 38)
          (4 . 38)
          (4 . 38)
          (4 . 38)
          (4 . 38)
          (4 . 38)
          (4 . 38))
        '((4 . 39)
          (4 . 39)
          (4 . 39)
          (4 . 39)
          (4 . 39)
          (4 . 39)
          (4 . 39)
          (4 . 39)
          (4 . 39)
          (4 . 39)
          (4 . 39)
          (4 . 39)
          (4 . 39))
        '((4 . 40)
          (4 . 40)
          (4 . 40)
          (4 . 40)
          (4 . 40)
          (4 . 40)
          (4 . 40)
          (4 . 40)
          (4 . 40)
          (4 . 40)
          (4 . 40)
          (4 . 40)
          (4 . 40))
        '((4 . 41)
          (4 . 41)
          (4 . 41)
          (4 . 41)
          (4 . 41)
          (4 . 41)
          (4 . 41)
          (4 . 41)
          (4 . 41)
          (4 . 41)
          (4 . 41)
          (4 . 41)
          (4 . 41))
        '((4 . 42)
          (4 . 42)
          (4 . 42)
          (4 . 42)
          (4 . 42)
          (4 . 42)
          (4 . 42)
          (4 . 42)
          (4 . 42)
          (4 . 42)
          (4 . 42)
          (4 . 42)
          (4 . 42))
        '((4 . 43)
          (4 . 43)
          (4 . 43)
          (4 . 43)
          (4 . 43)
          (4 . 43)
          (4 . 43)
          (4 . 43)
          (4 . 43)
          (4 . 43)
          (4 . 43)
          (4 . 43)
          (4 . 43))
        '((4 . 44)
          (4 . 44)
          (4 . 44)
          (4 . 44)
          (4 . 44)
          (4 . 44)
          (4 . 44)
          (4 . 44)
          (4 . 44)
          (4 . 44)
          (4 . 44)
          (4 . 44)
          (4 . 44))
        '((4 . 45)
          (4 . 45)
          (4 . 45)
          (4 . 45)
          (4 . 45)
          (4 . 45)
          (4 . 45)
          (4 . 45)
          (4 . 45)
          (4 . 45)
          (4 . 45)
          (4 . 45)
          (4 . 45))
        '((4 . 46)
          (4 . 46)
          (4 . 46)
          (4 . 46)
          (4 . 46)
          (4 . 46)
          (4 . 46)
          (4 . 46)
          (4 . 46)
          (4 . 46)
          (4 . 46)
          (4 . 46)
          (4 . 46))
        '((4 . 47)
          (4 . 47)
          (4 . 47)
          (4 . 47)
          (4 . 47)
          (4 . 47)
          (4 . 47)
          (4 . 47)
          (4 . 47)
          (4 . 47)
          (4 . 47)
          (4 . 47)
          (4 . 47))
        '((4 . 48)
          (4 . 48)
          (4 . 48)
          (4 . 48)
          (4 . 48)
          (4 . 48)
          (4 . 48)
          (4 . 48)
          (4 . 48)
          (4 . 48)
          (4 . 48)
          (4 . 48)
          (4 . 48))
        '((4 . 49)
          (4 . 49)
          (4 . 49)
          (4 . 49)
          (4 . 49)
          (4 . 49)
          (4 . 49)
          (4 . 49)
          (4 . 49)
          (4 . 49)
          (4 . 49)
          (4 . 49)
          (4 . 49))
        '()
        '()
        '()
        '()
        '()
        '()
        '((6 . 52))
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '()
        '((4 . 53)
          (4 . 53)
          (4 . 53)
          (4 . 53)
          (4 . 53)
          (4 . 53)
          (4 . 53)
          (4 . 53)
          (4 . 53)
          (4 . 53)
          (4 . 53)
          (4 . 53)
          (4 . 53))
        '()
        '((6 . 54))
        '())
      (vector
        '()
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3)))) $1))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___reduce-pop-and-push
              2
              1
              (let ((result $2))
                (when result (evaluated-expressions (cons result (evaluated-expressions))))
                result))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($1 (vector-ref ___stack (- ___sp 1))))
            (___reduce-pop-and-push
              1
              1
              (let ((result $1))
                (when result (evaluated-expressions (cons result (evaluated-expressions))))
                result))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___reduce-pop-and-push 2 2 $1)))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___reduce-pop-and-push 2 2 $1)))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* () (___reduce-pop-and-push 2 2 #f)))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 3 (begin (hashtable-set! (table-of-variables) $1 $3) #f))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (+ $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (- $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (* $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (/ $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___reduce-pop-and-push 2 4 $2)))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___reduce-pop-and-push 2 4 (- $2))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (div $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (mod $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (expt $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (< $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (> $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (<= $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (>= $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 (= $1 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($1 (vector-ref ___stack (- ___sp 1))))
            (___reduce-pop-and-push 1 4 (hashtable-ref (table-of-variables) $1 #f))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($4 (vector-ref ___stack (- ___sp 1)))
                 ($3 (vector-ref ___stack (- ___sp 3)))
                 ($2 (vector-ref ___stack (- ___sp 5)))
                 ($1 (vector-ref ___stack (- ___sp 7))))
            (___reduce-pop-and-push 4 4 (apply (eval $1 (environment '(rnrs))) $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___reduce-pop-and-push 1 4 $1)))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 4 $2)))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* () (___reduce-pop-and-push 0 5 '())))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___reduce-pop-and-push 2 5 (cons $1 $2))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___reduce-pop-and-push 3 6 (cons $2 $3))))
        (lambda (___stack ___sp ___reduce-pop-and-push yypushback yycustom)
          (let* () (___reduce-pop-and-push 0 6 '())))))))