(library (calc-parser)
  (export make-calc-parser
          make-source-location
          source-location?
          source-location-line
          source-location-input
          source-location-column
          source-location-offset
          source-location-length
          make-lexical-token
          lexical-token?
          lexical-token-value
          lexical-token-category
          lexical-token-source)
  (import (rnrs) (lalr lr-driver) (lalr common) (calc-parser-helper) (rnrs eval))
  (define (make-calc-parser)
    (lr-driver
      '#(((*default* *error*) (error 5) (ID 4) (NUM 3) (LPAREN 2) (- 1))
         ((*default* *error*) (ID 10) (NUM 3) (LPAREN 2) (- 1))
         ((*default* *error*) (ID 10) (NUM 3) (LPAREN 2) (- 1))
         ((*default* -15))
         ((*default* -13) (ASSIGN 14) (LPAREN 13))
         ((*default* *error*) (NEWLINE 15))
         ((*default* *error*) (NEWLINE 20) (+ 19) (- 18) (* 17) (/ 16))
         ((*default* *error*) (NEWLINE 21))
         ((*default* -3))
         ((*default* *error*) (*eoi* 22) (error 5) (ID 4) (NUM 3) (LPAREN 2) (- 1))
         ((*default* -13) (LPAREN 13))
         ((*default* -12) (/ 16) (* 17))
         ((*default* *error*) (RPAREN 24) (+ 19) (- 18) (* 17) (/ 16))
         ((*default* -17) (- 1) (LPAREN 2) (NUM 3) (ID 10))
         ((*default* *error*) (ID 10) (NUM 3) (LPAREN 2) (- 1))
         ((*default* -6))
         ((*default* *error*) (ID 10) (NUM 3) (LPAREN 2) (- 1))
         ((*default* *error*) (ID 10) (NUM 3) (LPAREN 2) (- 1))
         ((*default* *error*) (ID 10) (NUM 3) (LPAREN 2) (- 1))
         ((*default* *error*) (ID 10) (NUM 3) (LPAREN 2) (- 1))
         ((*default* -5))
         ((*default* -4))
         ((*default* -1) (*eoi* accept))
         ((*default* -2))
         ((*default* -16))
         ((*default* *error*) (RPAREN 32))
         ((*default* -20) (/ 16) (* 17) (- 18) (+ 19) (COMMA 33))
         ((*default* -7) (+ 19) (- 18) (* 17) (/ 16))
         ((*default* -11))
         ((*default* -10))
         ((*default* -9) (/ 16) (* 17))
         ((*default* -8) (/ 16) (* 17))
         ((*default* -14))
         ((*default* *error*) (ID 10) (NUM 3) (LPAREN 2) (- 1))
         ((*default* -18))
         ((*default* -20) (/ 16) (* 17) (- 18) (+ 19) (COMMA 33))
         ((*default* -19)))
      (vector
        '((4 . 6) (4 . 6) (4 . 6) (4 . 6) (4 . 6) (3 . 7) (2 . 8) (1 . 9) (1 . 9))
        '((4 . 11) (4 . 11) (4 . 11) (4 . 11) (4 . 11))
        '((4 . 12) (4 . 12) (4 . 12) (4 . 12) (4 . 12))
        '()
        '()
        '()
        '()
        '()
        '()
        '((4 . 6) (4 . 6) (4 . 6) (4 . 6) (4 . 6) (3 . 7) (2 . 23))
        '()
        '()
        '()
        '((5 . 25) (4 . 26) (4 . 26) (4 . 26) (4 . 26) (4 . 26))
        '((4 . 27) (4 . 27) (4 . 27) (4 . 27) (4 . 27))
        '()
        '((4 . 28) (4 . 28) (4 . 28) (4 . 28) (4 . 28))
        '((4 . 29) (4 . 29) (4 . 29) (4 . 29) (4 . 29))
        '((4 . 30) (4 . 30) (4 . 30) (4 . 30) (4 . 30))
        '((4 . 31) (4 . 31) (4 . 31) (4 . 31) (4 . 31))
        '()
        '()
        '()
        '()
        '()
        '()
        '((6 . 34))
        '()
        '()
        '()
        '()
        '()
        '()
        '((4 . 35) (4 . 35) (4 . 35) (4 . 35) (4 . 35))
        '()
        '((6 . 36))
        '())
      (vector
        '()
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3)))) $1))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___push
              2
              1
              (let ((result $2))
                (when result (evaluated-expressions (cons result (evaluated-expressions))))))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($1 (vector-ref ___stack (- ___sp 1))))
            (___push
              1
              1
              (let ((result $1))
                (when result (evaluated-expressions (cons result (evaluated-expressions))))))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___push 2 2 $1)))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___push 2 2 $1)))
        (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 2 2 #f)))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___push 3 3 (begin (hashtable-set! (table-of-variables) $1 $3) #f))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___push 3 4 (+ $1 $3))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___push 3 4 (- $1 $3))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___push 3 4 (* $1 $3))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___push 3 4 (/ $1 $3))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___push 2 4 (- $2))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($1 (vector-ref ___stack (- ___sp 1))))
            (___push 1 4 (hashtable-ref (table-of-variables) $1 #f))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($4 (vector-ref ___stack (- ___sp 1)))
                 ($3 (vector-ref ___stack (- ___sp 3)))
                 ($2 (vector-ref ___stack (- ___sp 5)))
                 ($1 (vector-ref ___stack (- ___sp 7))))
            (___push 4 4 (apply (eval $1 (environment '(rnrs))) $3))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 4 $1)))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___push 3 4 $2)))
        (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 5 '())))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($2 (vector-ref ___stack (- ___sp 1))) ($1 (vector-ref ___stack (- ___sp 3))))
            (___push 2 5 (cons $1 $2))))
        (lambda (___stack ___sp ___goto-table ___push yypushback)
          (let* (($3 (vector-ref ___stack (- ___sp 1)))
                 ($2 (vector-ref ___stack (- ___sp 3)))
                 ($1 (vector-ref ___stack (- ___sp 5))))
            (___push 3 6 (cons $2 $3))))
        (lambda (___stack ___sp ___goto-table ___push yypushback) (let* () (___push 0 6 '())))))))