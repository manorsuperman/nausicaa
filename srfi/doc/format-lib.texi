\input texinfo.tex
@c %**start of header
@setfilename format-lib.info
@settitle Format library for R6RS Scheme
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@macro version{}
0.1.0
@end macro


@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@macro bsd{}
@acronym{BSD}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro ram{}
@acronym{RAM}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@c Remember that @url is already used by Texinfo.
@macro urla{}
@acronym{URL}
@end macro

@macro utf{}
@acronym{UTF}
@end macro


@c ------------------------------------------------------------
@c Software related macros.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@macro glibc{}
@gnu{} C Library
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro icmp{}
@acronym{ICMP}
@end macro

@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro https{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@macro snmp{}
@acronym{SNMP}
@end macro

@c ------------------------------------------------------------
@c Arguments macros.
@c ------------------------------------------------------------

@macro vari{ARG}
@var{\ARG\1}
@end macro

@macro varii{ARG}
@var{\ARG\2}
@end macro

@macro variii{ARG}
@var{\ARG\3}
@end macro

@macro variv{ARG}
@var{\ARG\4}
@end macro

@macro varn{ARG}
@var{\ARG\n}
@end macro

@macro vark{ARG}
@var{\ARG\k}
@end macro

@macro varj{ARG}
@var{\ARG\j}
@end macro

@c ------------------------------------------------------------

@macro meta{ARG}
<\ARG\>
@end macro

@macro metai{ARG}
@meta{\ARG\1}
@end macro

@macro metaii{ARG}
@meta{\ARG\2}
@end macro

@macro metaiii{ARG}
@meta{\ARG\3}
@end macro

@macro metaiv{ARG}
@meta{\ARG\4}
@end macro

@macro metan{ARG}
@meta{\ARG\n}
@end macro

@macro metak{ARG}
@meta{\ARG\k}
@end macro

@macro metaj{ARG}
@meta{\ARG\j}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro null{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{NAME}
@code{(\NAME\)}
@end macro

@macro module{NAME}
@code{\NAME\}
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@ignore
Separating the @srfi{}  macro from the number with a  '--' rather than a
'-' makes the expansion look ugly in menu entries under the Info reader.
IMHO this should not happen, but  it does; so we live with this, because
the main purpose of this document is to provide an Info version.
@end ignore
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@c ------------------------------------------------------------

@macro func{NAME}
@code{@sc{\NAME\}}
@end macro

@macro nil{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@macro rsixref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@end macro

@macro rfiveref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r5rs}
@end macro

@macro ikarusref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,ikarus}
@end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Format library for @rnrs{6} Scheme

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Format-lib

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           format-lib

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marcomaggi@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2008

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, ...

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://gna.org/projects/@value{PACKAGE_NICKNAME}}

@noindent
Copyright (C) 1996, 1997, 2000, 2001, 2002, 2003, 2004, 2005 Free
Software Foundation.@*
Adapted for @rnrs{6} Scheme by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying


@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* format-lib: (format-lib).     Format library for @rnrs{6} Scheme.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore


@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* format::                      Formatted Output.
* escape values::               Escape sequences for generic values.
* escape char::                 Escape sequences for characters.
* escape integers::             Escape sequences for integers.
* escape flonums::              Escape sequences for flonums.
* escape complex::              Escape sequences for complex numbers.


Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c ------------------------------------------------------------

@c page
@node overview
@chapter Overview of the package


@noindent
This package is a distribution of the @func{format} function written by
Dirk Lutzebaeck (@email{lutzeb@@cs.tu-berlin.de}), originally by Ken
Dickey and Aubrey Jaffer, included in the Guile distribution and later
adapted to @rnrs{6} Scheme by Marco Maggi.

This document is derived from the documentation of Guile, the @gnu{}
Ubiquitous Interface Language for Extensions.

The @func{format} function is a powerful way to print numbers, strings
and other objects together with literal text under the control of a
format string.  The function is exported by the @library{format-lib}
library.


@c page
@node format
@chapter Formatted Output


A format string is generally more compact and easier than using just the
standard procedures like @func{display}, @func{write} and
@func{newline}.  Parameters in the output string allow various output
styles, and parameters can be taken from the arguments for runtime
flexibility.

@func{format} is similar to the Common Lisp procedure of the same name,
but it's not identical and doesn't have quite all the features found in
Common Lisp.

C programmers will note the similarity between @func{format} and
@cfunc{printf}, though escape sequences are marked with @code{~} instead
of @code{%}, and are more powerful.


@defun format fmt
@defunx format fmt [args@dots{}]
@defunx format dest fmt
@defunx format dest fmt [args@dots{}]
Write output specified by the @var{fmt} string to @var{dest}.

@var{dest} can be an output port, @true{} for
@func{current-output-port}, a number for @func{current-error-port}, or
@false{} to return the output as a string.  If @var{dest} is not given
(that is: the first argument is a string): the output is returned as if
@false{} is used as @var{dest} argument.

@var{fmt} can contain literal text to be output, and @code{~}
escapes.  Each escape has the form:

@example
~ [param [, param@dots{}] [:] [@@] code
@end example

@code{code} is a character determining the escape sequence; the
@code{code} letters are @strong{not} case--sensitive, upper and lower
case are the same.  The @code{:} and @code{@@} characters are optional
modifiers, one or both of which change the way various codes operate.
Optional parameters are accepted by some codes too.  Parameters have the
following forms,

@table @code
@item [+/-]number
An integer, with optional @code{+} or @code{-}.

@item '
The quote.  The following character in the format string, for instance
@code{'z} for @code{z}.

@item v
The next function argument as the parameter.  @code{v} stands for
``variable'', a parameter can be calculated at runtime and included in
the arguments.  Upper case @code{V} can be used too.

@item #
The number of arguments remaining.
@end table

Parameters are separated by commas (@code{,}).  A parameter can be left
empty to keep its default value when supplying later parameters.
@end defun


@c page
@node escape values
@chapter Escape sequences for generic values


@deffn Escape ~a
@deffnx Escape ~s
Object output.  Parameters: @var{minwidth}, @var{padinc},
@var{minpad}, @var{padchar}.

@code{~a} outputs an argument like @code{display}, @code{~s}
outputs an argument like @code{write}.

@example
(format #t "~a" "foo") @print{} foo
(format #t "~s" "foo") @print{} "foo"
@end example

@code{~:a} and @code{~:s} put objects that don't have an external
representation in quotes like a string.

@example
(format #t "~:a" car) @print{} "#<primitive-procedure car>"
@end example

If the output is less than @var{minwidth} characters (default 0), it's
padded on the right with @var{padchar} (default space).  @code{~@@a}
and @code{~@@s} put the padding on the left instead.

@example
(format #f "~5a" 'abc)       @result{} "abc  "
(format #f "~5,,,'-@@a" 'abc) @result{} "--abc"
@end example

The number of padding characters, @var{padchar}, included in the output
is computed with: @math{@var{minpad} + @var{N} * @var{padinc}}, where
@var{n} is the smallest integer making the total object plus padding
greater than or equal to @var{minwidth}.  The default @var{minpad} is 0
and the default @var{padinc} is 1 (imposing no minimum or multiple).

@example
(format #f "~5,1,4a" 'abc) @result{} "abc    "
@end example
@end deffn


More examples:

@example
(check
    (format #f "ciao ~:a" display)
  => (cond-expand
      (ypsilon  "ciao \"#<subr display>\"")
      (larceny  "ciao \"#<PROCEDURE display>\"")
      (ikarus   "ciao \"#<procedure display>\""))

(check
    (list (format "~5a" 123)
          (format "~5s" 123))
  => '("123  "
       "123  "))

(check
    (list (format "~5@@a" 123)
          (format "~5@@s" 123))
  => '("  123"
       "  123"))

(check
    (list (format "~5,,,'.a" 123)
          (format "~5,,,'.s" 123))
  => '("123.."
       "123.."))

(check
    (list (format "~5,,,'.@@a" 123)
          (format "~5,,,'.@@s" 123))
  => '("..123"
       "..123"))

(check
    (list (format "~5,,4,'.@@a" 123)
          (format "~5,,4,'.@@s" 123))
  => '("....123"
       "....123"))
;;;     1234

(check
    (list (format "~10,,,'a@@a" 123)
          (format "~10,,,'a@@s" 123))
  => '("aaaaaaa123"
       "aaaaaaa123"))
;;;     1234567

(check
    (list (format "~10,3,,'u@@a" 123)
          (format "~10,3,,'u@@s" 123))
  => '("uuuuuuuuu123"
       "uuuuuuuuu123"))
;;;     123456789

(check
    (list (format "~11,2,,'u@@a" 123)
          (format "~11,2,,'u@@s" 123))
  => '("uuuuuuuu123"
       "uuuuuuuu123"))
;;;     12345678

(check
    (list (format "~8,2,,'u@@a" 1)
          (format "~8,2,,'u@@s" 1))
  => '("uuuuuuuu1"
       "uuuuuuuu1"))
;;;     12345678

@end example


@c page
@node escape char
@chapter Escape sequences for characters


@deffn Escape ~c
Character.  Parameter: @var{charnum}.

Output a character.  The default is to simply output, as per
@func{write-char}.  @code{~@@c} prints in @func{write} style.
@code{~:c} prints control characters (@ascii{} 0 to 31) in @code{^X}
form.

@example
(format #t "~c" #\z)        @print{} z
(format #t "~@@c" #\z)       @print{} #\z
(format #t "~:c" #\newline) @print{} ^J
@end example

If the @var{charnum} parameter is given then an argument is not taken
but instead the character is @code{(integer->char @var{charnum})}.  This
can be used for instance to output characters given by their ASCII code.

@example
(format #t "~65c")  @print{} A
@end example
@end deffn


@c page
@node escape integers
@chapter Escape sequences for integers


@deffn Escape ~d
@deffnx Escape ~x
@deffnx Escape ~o
@deffnx Escape ~b
Integer.  Parameters: @var{minwidth}, @var{padchar}, @var{commachar},
@var{commawidth}.

Output an integer argument as a decimal, hexadecimal, octal or binary
integer (respectively).

@example
(format #t "~d" 123) @print{} 123
@end example

If the output is less than the @var{minwidth} parameter (default no
minimum), it's padded on the left with the @var{padchar} parameter
(default space).

@example
(format #t "~5,'*d" 12)   @print{} ***12
(format #t "~5,'0d" 12)   @print{} 00012
(format #t "~3d"    1234) @print{} 1234
@end example

The @code{@@} modifier causes a @code{+} sign to be prepended to
positive numbers, zero included.

@example
(format #t "~@@b" 12) @print{} +1100
(format #t "~@@d" 0)  @print{} +0
@end example

The @code{:} modifier adds a @var{commachar} (default comma) every
@var{commawidth} digits (default 3).

@example
(format #t "~:d" 1234567)         @print{} 1,234,567
(format #t "~10,'*,'/,2:d" 12345) @print{} ***1/23/45
@end example

Hexadecimal @code{~x} output is in lower case, but the @code{~(} and
@code{~)} case conversion directives described elsewhere can be used to
get upper case.

@example
(format #t "~x"       65261) @print{} feed
(format #t "~:@@(~x~)" 65261) @print{} FEED
@end example
@end deffn


@deffn Escape ~r
Integer in words, roman numerals, or a specified radix.  Parameters:
@var{radix}, @var{minwidth}, @var{padchar}, @var{commachar},
@var{commawidth}.

With no parameters output is in words as a cardinal like ``ten'', or
@code{~:r} prints an ordinal like ``tenth''.

@example
(format #t "~r" 9)  @print{} nine        ;; cardinal
(format #t "~r" -9) @print{} minus nine  ;; cardinal
(format #t "~:r" 9) @print{} ninth       ;; ordinal
@end example

And also with no parameters, @code{~@@r} gives roman numerals and
@code{~:@@r} gives old roman numerals.  In old roman numerals
there's no ``subtraction'', so 9 is @code{VIIII} instead of
@code{IX}.  In both cases only positive numbers can be output.

@example
(format #t "~@@r" 89)  @print{} LXXXIX     ;; roman
(format #t "~:@@r" 89) @print{} LXXXVIIII  ;; old roman
@end example

When a parameter is given it means numeric output in the specified
@var{radix} (which can be any integer, @strong{not} only 2, 8, 10 or
16).  The modifiers and parameters following the radix are the same as
described for @code{~d} above.

@example
(format #f "~3r" 27)   @result{} "1000"    ;; base 3
(format #f "~3,5r" 26) @result{} "  222"   ;; base 3 width 5
@end example
@end deffn


@c page
@node escape flonums
@chapter Escape sequences for flonums


@menu
* escape flonums fixed::        Fixed point format.
* escape flonums exponent::     Exponential format.
* escape flonums general::      General format.
* escape flonums dollar::       Dollar format.
@end menu


@c page
@node escape flonums fixed
@section Fixed point format


@deffn Escape @code{~f}
Real fixed--point float.  Parameters: @var{width}, @var{decimals},
@var{scale}, @var{overflowchar}, @var{padchar}.

Output a number or number string in fixed-point format, ie.@: with a
decimal point.

@example
(format #t "~f" 5)              @print{} 5.0
(format #t "~f" 1e-1)           @print{} 0.1
(format #t "~f" "123")          @print{} 123.0
(format #t "~f" "#d123")        @print{} 123.0
(format #t "~f" "#d-1e-1")      @print{} -0.1
@end example

@code{~@@f} prints a @code{+} sign on positive numbers (including
zero).

@example
(format #t "~@@f" 0) @print{} +0.0
@end example

If the output is less than @var{width} characters (default is no limit
and no padding) it's padded on the left with @var{padchar} (space by
default).  If the output equals or exceeds @var{width} then there's no
padding and the decimals after the comma are truncated if this makes the
number fit the @var{width}.

@example
(format "~6f" -1.5)                     @result{} "  -1.5"
(format "~6,,,,'*f" 23)                 @result{} "**23.0"
(format "~6f" 1234567.0)                @result{} "1234567.0"
(format "~10,,,,'.f" 123.456789123)     @result{} "123.456789"
(format "~5,,,,'.f" 1e9)                @result{} "1000000000.0"
(format "~5,,,,'.f" 1000000000.123456)  @result{} "1000000000.123456"
@end example

@var{decimals} is how many digits to print after the decimal point,
with the value rounded or padded with zeros as necessary.  (The
default is to output as many decimals as required.)

@example
(format #t "~1,2f" 3.125) @print{} 3.13
(format #t "~1,2f" 1.5)   @print{} 1.50
@end example

@noindent
Decimals are rounded only when requested.  If not requested they are not
rounded nor truncated when the output exceeds the requested @var{width}.

@example
(format #t "~1f"   0.123) @print{} "0.123")
(format #t "~1,2f" 0.123) @print{} ".12")
@end example

@var{scale} is a power of 10 applied to the value, moving the decimal
point that many places.  A positive @var{scale} increases the value
shown, a negative decreases it.

@example
(format #t "~,,2f" 1234)  @print{} 123400.0
(format #t "~,,-2f" 1234) @print{} 12.34
@end example

If @var{overflowchar} and @var{width} are both given and if the output
would exceed @var{width}, then that many @var{overflowchar}s are
printed instead of the value.

@example
(format #t "~5,,,'xf" 12345) @print{} 12345
(format #t "~4,,,'xf" 12345) @print{} xxxx
@end example
@end deffn


@c page
@node escape flonums exponent
@section Exponential format


@deffn Escape ~e
Real exponential float.  Parameters: @var{width}, @var{decimals},
@var{expdigits}, @var{intdigits}, @var{overflowchar}, @var{padchar},
@var{expchar}.

Output a number or number string in exponential notation.

@example
(format #t "~e" 5000.25) @print{} 5.00025E+3
(format #t "~e" "123.4") @print{} 1.234E+2
(format #t "~e" "1e4")   @print{} 1.0E+4
@end example

@code{~@@e} prints a @code{+} sign on positive numbers (including
zero).  (This is for the mantissa, a @code{+} or @code{-} sign is
always shown on the exponent.)

@example
(format #t "~@@e" 5000.0) @print{} +5.0E+3
@end example

If the output is less than @var{width} characters it's padded on the
left with @var{padchar} (space by default).  The default for
@var{width} is to output with no padding.

@example
(format #f "~10e" 1234.0)       @result{} "  1.234E+3"
(format #f "~10,,,,,'*e" 0.5)   @result{} "****5.0E-1"
@end example

If the output is more than @var{width} characters: decimals in the
exponential representation are rounded to make the output fit the
@var{width}; if rounding does not make the output fit, the full output
without rounding is printed.  When @var{decimals} is specified: no
rounding is done to remove those decimals, even if the output exceeds
the @var{width}.

@example
;; here rounding succeeds in making the output fit
(format #f "~5e" 123456)        @result{} "1.E+5"

;; here rounding fails in making the output fit
(format #f "~2e" 123456)        @result{} "1.23456E+5"

;; here DECIMALS causes the output to overflow
(format "~6,3e" 123.3456)       @result{} "1.233E+2"
@end example

@var{decimals} is the number of digits shown in the mantissa after the
decimal point.  The value is rounded or trailing zeros are added as
necessary.  The default @var{decimals} is to show as much as needed by
the value.

@example
(format #f "~,3e" 11111.0) @result{} "1.111E+4"
(format #f "~,8e" 123.0)   @result{} "1.23000000E+2"
@end example

@var{expdigits} is the minimum number of digits shown for the
exponent, with leading zeros added if necessary.  The default for
@var{expdigits} is to show only as many digits as required.  At least
1 digit is always shown.

@example
(format #f "~,,1e" 1.0e99) @result{} "1.0E+99"
(format #f "~,,6e" 1.0e99) @result{} "1.0E+000099"
@end example

@var{intdigits} (default 1) is the number of digits to show before the
decimal point in the mantissa.  @var{intdigits} can be zero, in which
case the integer part is a single @code{0}, or it can be negative,
in which case leading zeros are shown after the decimal point.

@example
(format #t "~,,,3e" 12345.0)  @print{} 123.45E+2
(format #t "~,,,0e" 12345.0)  @print{} 0.12345E+5
(format #t "~,,,-3e" 12345.0) @print{} 0.00012345E+8
@end example

If @var{overflowchar} is given then @var{width} is a hard limit.  If the
output would exceed @var{width} then instead that many
@var{overflowchar}s are printed.

@example
(format #f "~6,,,,'xe" 100.0) @result{} "1.0E+2"
(format #f "~3,,,,'xe" 100.0) @result{} "xxx"
@end example

@var{expchar} is the exponent marker character (default @code{E}).

@example
(format #t "~,,,,,,'ee" 100.0) @print{} 1.0e+2
@end example
@end deffn


@c page
@node escape flonums general
@section General format


@deffn Escape @code{~g}
Real general float.  Parameters: @var{width}, @var{decimals},
@var{expdigits}, @var{intdigits}, @var{overflowchar}, @var{padchar},
@var{expchar}.

Output a number or number string in either exponential format the same
as @code{~e}, or fixed--point format like @code{~f} but aligned where
the mantissa would have been and followed by padding where the exponent
would have been.

@c  FIXME: The default DECIMALS is apparently max(needed,min(n,7)) where
@c  10^(n-1)<=abs(x)<=10^n.  But the Common Lisp spec seems to ask for
@c  "needed" to be without leading or trailing zeros, whereas format.scm
@c  seems to include trailing zeros, ending up with it using fixed
@c  format for bigger values than it should.

Fixed--point is used when the absolute value is 0.1 or more and it takes
no more space than the mantissa in exponential format, ie.@: basically
up to @var{decimals} digits.

@example
(format #t "~12,4,2g" 999.0)    @print{} "   999.0    "
(format #t "~12,4,2g" "100000") @print{} "  1.0000E+05"
@end example

The parameters are interpreted as per @code{~e} above.  When fixed-point
is used, the @var{decimals} parameter to @code{~f} is established from
@var{decimals}, so as to give a total @math{@var{decimals}+1} figures.
@end deffn

@c page
@node escape flonums dollar
@section Dollar format


@deffn Escape @code{~$}
Monetary style fixed-point float.  Parameters: @var{decimals},
@var{intdigits}, @var{width}, @var{padchar}.

@c  For reference, fmtdoc.txi from past versions of slib showed the
@c  INTDIGITS parameter as SCALE.  That looks like a typo, in the code
@c  and in the Common Lisp spec it's a minimum digits for the integer
@c  part, it isn't a power of 10 like in ~f.

Output a number or number string in fixed-point format, ie.@: with a
decimal point.  @var{decimals} is the number of decimal places to
show, default 2.

@example
(format #t "~$" 5)       @print{} 5.00
(format #t "~4$" "2.25") @print{} 2.2500
(format #t "~4$" "1e-2") @print{} 0.0100
@end example

@code{~@@$} prints a @code{+} sign on positive numbers (including
zero).

@example
(format #t "~@@$" 0) @print{} +0.00
@end example

@var{intdigits} is a minimum number of digits to show in the integer
part of the value (default 1).

@example
(format #t "~,3$" 9.5)   @print{} 009.50
(format #t "~,0$" 0.125) @print{} .13
@end example

If the output is less than @var{width} characters (default 0), it's
padded on the left with @var{padchar} (default space).  @code{~:$}
puts the padding after the sign.

@example
(format #f "~,,8$" -1.5)   @result{} "   -1.50"
(format #f "~,,8:$" -1.5)  @result{} "-   1.50"
(format #f "~,,8,'.:@@$" 3) @result{} "+...3.00"
@end example

Note that floating point for dollar amounts is generally not a good
idea, because a cent @math{0.01} cannot be represented exactly in the
binary floating point Guile uses, which leads to slowly accumulating
rounding errors.  Keeping values as cents (or fractions of a cent) in
integers then printing with the scale option in @code{~f} may be a
better approach.
@end deffn

@c  For reference, fractions don't work with ~$ (or any of the float
@c  conversions) currently.  If they did work then we could perhaps
@c  suggest keeping dollar amounts as rationals, which would of course
@c  give exact cents.  An integer as cents is probably still a better
@c  recommendation though, since it forces one to think about where
@c  and when rounding can or should occur.

@c page
@node escape complex
@chapter Escape sequences for complex numbers


@deffn Escape ~i
Complex fixed--point float.  Parameters: @var{width}, @var{decimals},
@var{scale}, @var{overflowchar}, @var{padchar}.

Output the argument as a complex number, with both real and imaginary
part shown (even if one or both are zero).

The parameters and modifiers are the same as for fixed--point @code{~f}
described above.  The real and imaginary parts are both output with the
same given parameters and modifiers, except that for the imaginary part
the @code{@@} modifier is always enabled, so as to print a @code{+} sign
between the real and imaginary parts.

@example
(format #t "~i" 1)  @print{} 1.0+0.0i
@end example

Notice that the imaginary unit character @code{i} is excluded from the
counting for width and padding.
@end deffn


@deffn Escape @code{~p}
Plural.  No parameters.

Output nothing if the argument is 1, or @samp{s} for any other
value.

@example
(format #t "enter name~p" 1) @print{} enter name
(format #t "enter name~p" 2) @print{} enter names
@end example

@code{~@@p} prints @samp{y} for 1 or @samp{ies} otherwise.

@example
(format #t "pupp~@@p" 1) @print{} puppy
(format #t "pupp~@@p" 2) @print{} puppies
@end example

@code{~:p} re-uses the preceding argument instead of taking a new
one, which can be convenient when printing some sort of count.

@example
(format #t "~d cat~:p" 9)   @print{} 9 cats
(format #t "~d pupp~:@@p" 5) @print{} 5 puppies
@end example

@code{~p} is designed for English plurals and there's no attempt to
support other languages.  @code{~[} conditionals (below) may be able to
help.  When using @code{gettext} to translate messages @code{ngettext}
is probably best though.
@end deffn


@deffn Escape @code{~y}
Pretty print.  No parameters.

Output an argument with @code{pretty-print}.
@end deffn


@deffn Escape @code{~?}
@deffnx Escape @code{~k}
Sub-format.  No parameters.

Take a format string argument and a second argument which is a list of
arguments for that string, and output the result.

@example
(format #t "~?" "~d ~d" '(1 2))    @print{} 1 2
@end example

@code{~@@?} takes arguments for the sub-format directly rather than
in a list.

@example
(format #t "~@@? ~s" "~d ~d" 1 2 "foo") @print{} 1 2 "foo"
@end example

@code{~?} and @code{~k} are the same, @code{~k} is provided for
T-Scheme compatibility.
@end deffn


@deffn Escape @code{~*}
Argument jumping.  Parameter: @var{N}.

Move forward @var{N} arguments (default 1) in the argument list.
@code{~:*} moves backwards.  (@var{N} cannot be negative.)

@example
(format #f "~d ~2*~d" 1 2 3 4) @result{} "1 4"
(format #f "~d ~:*~d" 6)       @result{} "6 6"
@end example

@code{~@@*} moves to argument number @var{N}.  The first argument is
number 0 (and that's the default for @var{N}).

@example
(format #f "~d~d again ~@@*~d~d" 1 2) @result{} "12 again 12"
(format #f "~d~d~d ~1@@*~d~d" 1 2 3)  @result{} "123 23"
@end example

A @code{#} move to the end followed by a @code{:} modifier move
back can be used for an absolute position relative to the end of the
argument list, a reverse of what the @code{@@} modifier does.

@example
(format #t "~#*~2:*~a" 'a 'b 'c 'd)   @print{} c
@end example

At the end of the format string the current argument postion doesn't
matter, any further arguments are ignored.
@end deffn


@deffn Escape @code{~t}
Advance to a column position.  Parameters: @var{colnum}, @var{colinc},
@var{padchar}.

Output @var{padchar} (space by default) to move to the given
@var{colnum} column.  The start of the line is column 0, the default
for @var{colnum} is 1.

@example
(format #f "~tX")  @result{} " X"
(format #f "~3tX") @result{} "   X"
@end example

If the current column is already past @var{colnum}, then the move is
to there plus a multiple of @var{colinc}, ie.@: column
@math{@var{colnum} + @var{N} * @var{colinc}} for the smallest @var{N}
which makes that value greater than or equal to the current column.
The default @var{colinc} is 1 (which means no further move).

@example
(format #f "abcd~2,5,'.tx") @result{} "abcd...x"
@end example

@code{~@@t} takes @var{colnum} as an offset from the current column.
@var{colnum} many pad characters are output, then further padding to
make the current column a multiple of @var{colinc}, if it isn't
already so.

@example
(format #f "a~3,5'*@@tx") @result{} "a****x"
@end example

@code{~t} is implemented using @code{port-column}, so it works even
there has been other output before @code{format}.
@end deffn


@deffn Escape @code{~~}
Tilde character.  Parameter: @var{n}.

Output a tilde character @code{~}, or @var{n} many if a parameter is
given.  Normally @code{~} introduces an escape sequence, @code{~~}
is the way to output a literal tilde.
@end deffn


@deffn Escape @code{~%}
Newline.  Parameter: @var{n}.

Output a newline character, or @var{n} many if a parameter is given.
A newline (or a few newlines) can of course be output just by
including them in the format string.
@end deffn


@deffn Escape @code{~&}
Start a new line.  Parameter: @var{n}.

Output a newline if not already at the start of a line.  With a
parameter, output that many newlines, but with the first only if not
already at the start of a line.  So for instance 3 would be a newline
if not already at the start of a line, and 2 further newlines.
@end deffn


@deffn Escape @code{~_}
Space character.  Parameter: @var{n}.

@c  For reference, in Common Lisp ~_ is a conditional newline, but
@c  slib fmtdoc.txi described it as a space, so we keep that.

Output a space character, or @var{n} many if a parameter is given.

With a variable parameter this is one way to insert runtime calculated
padding (@code{~t} or the various field widths can do similar
things).

@example
(format #f "~v_foo" 4) @result{} "    foo"
@end example
@end deffn


@deffn Escape @code{~/}
Tab character.  Parameter: @var{n}.

Output a tab character, or @var{n} many if a parameter is given.
@end deffn


@deffn Escape @code{~|}
Formfeed character.  Parameter: @var{n}.

Output a formfeed character, or @var{n} many if a parameter is given.
@end deffn


@deffn Escape @code{~!}
Force output.  No parameters.

At the end of output, call @code{force-output} to flush any buffers on
the destination.  @code{~!} can occur anywhere in the format string, but
the force is done at the end of output.

When output is to a string (destination @code{#f}), @code{~!} does
nothing.
@end deffn


@deffn Escape @code{~newline}  (ie.@: newline character)
Continuation line.  No parameters.

Skip this newline and any following whitespace in the format string,
ie.@: don't send it to the output.  This can be used to break up a
long format string for readability, but not print the extra
whitespace.

@example
(format #f "abc~
            ~d def~
            ~d" 1 2) @result{} "abc1 def2"
@end example

@code{~:newline} skips the newline but leaves any further whitespace
to be printed normally.

@code{~@@newline} prints the newline then skips following
whitespace.
@end deffn


@deffn Escape @code{~(} @code{~)}
Case conversion.  No parameters.

Between @code{~(} and @code{~)} the case of all output is changed.
The modifiers on @code{~(} control the conversion.


@itemize @code
@item ~(
Lower case.
@c
@c  FIXME: The : and @ modifiers are not yet documented because the
@c  code applies string-capitalize and string-capitalize-first to each
@c  separate format:out-str call, which has various subtly doubtful
@c  effects.  And worse they're applied to individual characters,
@c  including literal characters in the format string, which has the
@c  silly effect of being always an upcase.
@c
@c  The Common Lisp spec is apparently for the capitalization to be
@c  applied in one hit to the whole of the output between ~( and ~).
@c  (This can no doubt be implemented without accumulating all that
@c  text, just by keeping a state or the previous char to tell whether
@c  within a word.)
@c
@c  @deffn Escape
@c  @code{:} --- first letter of each word upper case, the rest lower
@c  case, as per the @code{string-capitalize} function (@pxref{Alphabetic
@c  Case Mapping}).
@c  @deffn Escape
@c  @code{@@} --- first letter of just the first word upper case, the
@c  rest lower case.
@c
@item ~:@@(
Upper case.
@end itemize

For example,

@example
(format #t "~(Hello~)")   @print{} hello
(format #t "~:@@(Hello~)") @print{} HELLO
@end example

In the future it's intended the modifiers @code{:} and @code{@@}
alone will capitalize the first letters of words, as per Common Lisp
@code{format}, but the current implementation of this is flawed and
not recommended for use.

Case conversions do not nest, currently.  This might change in the
future, but if it does then it will be to Common Lisp style where the
outermost conversion has priority, overriding inner ones (making those
fairly pointless).
@end deffn


@deffn Escape ~@{ ~@}
Iteration.  Parameter: @var{maxreps} (for @code{~@{}).

The format between @code{~@{} and @code{~@}} is iterated.  The
modifiers to @code{~@{} determine how arguments are taken.  The
default is a list argument with each iteration successively consuming
elements from it.  This is a convenient way to output a whole list.

@example
(format #t "~@{~d~@}"     '(1 2 3))       @print{} 123
(format #t "~@{~s=~d ~@}" '("x" 1 "y" 2)) @print{} "x"=1 "y"=2
@end example

@code{~:@{} takes a single argument which is a list of lists, each
of those contained lists gives the arguments for the iterated format.

@c  @print{} on a new line here to avoid overflowing page width in DVI
@example
(format #t "~:@{~dx~d ~@}" '((1 2) (3 4) (5 6)))
@print{} 1x2 3x4 5x6
@end example

@code{~@@@{} takes arguments directly, with each iteration
successively consuming arguments.

@example
(format #t "~@@@{~d~@}"     1 2 3)       @print{} 123
(format #t "~@@@{~s=~d ~@}" "x" 1 "y" 2) @print{} "x"=1 "y"=2
@end example

@code{~:@@@{} takes list arguments, one argument for each iteration,
using that list for the format.

@c  @print{} on a new line here to avoid overflowing page width in DVI
@example
(format #t "~:@@@{~dx~d ~@}" '(1 2) '(3 4) '(5 6))
@print{} 1x2 3x4 5x6
@end example

Iterating stops when there are no more arguments or when the
@var{maxreps} parameter to @code{~@{} is reached (default no
maximum).

@example
(format #t "~2@{~d~@}" '(1 2 3 4)) @print{} 12
@end example

If the format between @code{~@{} and @code{~@}} is empty, then a
format string argument is taken (before iteration argument(s)) and
used instead.  This allows a sub-format (like @code{~?} above) to be
iterated.

@example
(format #t "~@{~@}" "~d" '(1 2 3)) @print{} 123
@end example

@c  FIXME: What is the @code{:} modifier to ~} meant to do?  The
@c  Common Lisp spec says it's a minimum of 1 iteration, but the
@c  format.scm code seems to merely make it have MAXREPS default to 1.

Iterations can be nested, an inner iteration operates in the same way
as described, but of course on the arguments the outer iteration
provides it.  This can be used to work into nested list structures.
For example in the following the inner @code{~@{~d~@}x} is applied
to @code{(1 2)} then @code{(3 4 5)} etc.

@example
(format #t "~@{~@{~d~@}x~@}" '((1 2) (3 4 5))) @print{} 12x345x
@end example

See also @code{~^} below for escaping from iteration.
@end deffn


@deffn Escape @code{~[} @code{~;} @code{~]}
Conditional.  Parameter: @var{selector}.

A conditional block is delimited by @code{~[} and @code{~]}, and
@code{~;} separates clauses within the block.  @code{~[} takes an
integer argument and that number clause is used.  The first clause is
number 0.

@example
(format #f "~[peach~;banana~;mango~]" 1)  @result{} "banana"
@end example

The @var{selector} parameter can be used for the clause number,
instead of taking an argument.

@example
(format #f "~2[peach~;banana~;mango~]") @result{} "mango"
@end example

If the clause number is out of range then nothing is output.  Or the
last clause can be @code{~:;} to use that for a number out of range.

@example
(format #f "~[banana~;mango~]"         99) @result{} ""
(format #f "~[banana~;mango~:;fruit~]" 99) @result{} "fruit"
@end example

@code{~:[} treats the argument as a flag, and expects two clauses.
The first is used if the argument is @code{#f} or the second
otherwise.

@example
(format #f "~:[false~;not false~]" #f)   @result{} "false"
(format #f "~:[false~;not false~]" 'abc) @result{} "not false"

(let ((n 3))
  (format #t "~d gnu~:[s are~; is~] here" n (= 1 n)))
@print{} 3 gnus are here
@end example

@code{~@@[} also treats the argument as a flag, and expects one
clause.  If the argument is @code{#f} then no output is produced and
the argument is consumed, otherwise the clause is used and the
argument is not consumed, it's left for the clause.  This can be used
for instance to suppress output if @code{#f} means something not
available.

@example
(format #f "~@@[temperature=~d~]" 27) @result{} "temperature=27"
(format #f "~@@[temperature=~d~]" #f) @result{} ""
@end example
@end deffn


@deffn Escape @code{~^}
Escape.  Parameters: @var{val1}, @var{val2}, @var{val3}.

Stop formatting if there are no more arguments.  This can be used for
instance to have a format string adapt to a variable number of
arguments.

@example
(format #t "~d~^ ~d" 1)   @print{} 1
(format #t "~d~^ ~d" 1 2) @print{} 1 2
@end example

Within a @code{~@{} @code{~@}} iteration, @code{~^} stops the
current iteration step if there are no more arguments to that step,
but continuing with possible further steps and the rest of the format.
This can be used for instance to avoid a separator on the last
iteration, or to adapt to variable length argument lists.

@example
(format #f "~@{~d~^/~@} go"    '(1 2 3))     @result{} "1/2/3 go"
(format #f "~:@{ ~d~^~d~@} go" '((1) (2 3))) @result{} " 1 23 go"
@end example

@c  For reference, format.scm doesn't implement that Common Lisp ~:^
@c  modifier which stops the entire iterating of ~:{ or ~@:{.

@c  FIXME: Believe the Common Lisp spec is for ~^ within ~[ ~]
@c  conditional to terminate the whole format (or iteration step if in
@c  an iteration).  But format.scm seems to terminate just the
@c  conditional form.
@c
@c      (format #f "~[abc~^def~;ghi~] blah" 0)
@c      @result{} "abc blah"                    ;; looks wrong

@c  FIXME: Believe the Common Lisp spec is for ~^ within ~( ~) to end
@c  that case conversion and then also terminate the whole format (or
@c  iteration step if in an iteration).  But format.scm doesn't seem
@c  to do that quite right.
@c
@c      (format #f "~d ~^ ~d" 1)      @result{} "1 "
@c      (format #f "~(~d ~^ ~d~)" 1)  @result{} ERROR

Within a @code{~?} sub-format, @code{~^} operates just on that
sub-format.  If it terminates the sub-format then the originating
format will still continue.

@example
(format #t "~? items" "~d~^ ~d" '(1))   @print{} 1 items
(format #t "~? items" "~d~^ ~d" '(1 2)) @print{} 1 2 items
@end example

The parameters to @code{~^} (which are numbers) change the condition
used to terminate.  For a single parameter, termination is when that
value is zero (notice this makes plain @code{~^} equivalent to
@code{~#^}).  For two parameters, termination is when those two are
equal.  For three parameters, termination is when @math{@var{val1} <=
@var{val2}} and @math{@var{val2} <= @var{val3}}.
@end deffn


@c  FIXME: Good examples of these?

It's an error if there are not enough arguments for the escapes in the
format string, but any excess arguments are ignored.

Iterations @code{~@{} @code{~@}} and conditionals @code{~[}
@code{~;} @code{~]} can be nested, but must be properly nested,
meaning the inner form must be entirely within the outer form.  So
it's not possible, for instance, to try to conditionalize the endpoint
of an iteration.

@example
(format #t "~@{ ~[ ... ~] ~@}" ...)       ;; good
(format #t "~@{ ~[ ... ~@} ... ~]" ...)   ;; bad
@end example

The same applies to case conversions @code{~(} @code{~)}, they
must properly nest with respect to iterations and conditionals (though
currently a case conversion cannot nest within another case
conversion).

When a sub-format (@code{~?}) is used, that sub-format string must
be self-contained.  It cannot for instance give a @code{~@{} to
begin an iteration form and have the @code{~@}} up in the
originating format, or similar.



@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl.texiinc

@node Documentation License
@appendix GNU Free Documentation License

@include fdl.texiinc

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
