\input texinfo.tex
@c %**start of header
@setfilename nausicaa-curl.info
@settitle cURL for  Nausicaa
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@macro condition{NAME}
@code{&\NAME\}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@macro curl{}
cURL
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro https{}
@acronym{HTTPS}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro tftp{}
@acronym{TFTP}
@end macro

@macro ftps{}
@acronym{FTPS}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      cURL for Nausicaa

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/cURL

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-curl

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2009

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides bindings to the cURL library: A tool to transfer data from or
to a server, using one of the supported protocols (@http{}, @https{},
@ftp{}, @ftps{}, @tftp{}, @acronym{DICT}, @acronym{TELNET},
@acronym{LDAP} or @acronym{FILE}).

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/nausicaa/downloads}

The project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/tree/master}

@curl{} is available here:

@center @url{http://curl.haxx.se/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-curl: (nausicaa-curl).       @curl{} for Nausicaa.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* records::                     Record types.
* enumerations::                Enumerations.
* conditions::                  Condition object types.
* easy::                        Easy interface.
* misc::                        Miscellaneous functions.
* compensated::                 Compensated constructors.
* platform::                    Details on the platform library.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

@detailmenu
 --- The Detailed Node Listing ---

Record types

* records handle::              @curl{} session handlers.
* records version info::        Libraries version informations.

Condition object types

* conditions data::             Condition types for data values.
* conditions error::            Error condition types.

Condition types for data values

* conditions data handle::      @curl{} handle objects.

Error condition types

* conditions error base::       Basic error condition.

Easy interface

* easy intro::                  Introduction to the easy interface.
* easy init::                   Session handle construction.
* easy options::                Setting handle's options.
* easy callbacks::              Preparing callbacks.

Miscellaneous functions

* misc version::                Version informations about @curl{}.

@end detailmenu
@end menu

@end ifnottex

@c page
@node overview
@chapter Overview of the package


@value{PACKAGE} is a distribution of libraries for @rnrs{6} Scheme
implementations; it provides bindings to the LibcURL library: A tool to
transfer data from or to a server, using one of the supported protocols
(@http{}, @https{}, @ftp{}, @ftps{}, @tftp{}, @acronym{DICT},
@acronym{TELNET}, @acronym{LDAP} or @acronym{FILE}).

The installed libraries are:

@table @library
@item foreign net curl shared-object
Exports the single binding @code{curl-shared-object} which references
@curl{}'s shared library.

@item foreign net curl sizeof
Exports bindings for constant values and data types inspection.

@item foreign net curl platform
Exports a binding for each function in @curl{}.  It implements a
one--to--one map between foreign functions and Scheme functions; the
Scheme functions have the same name of the foreign ones, so
@cfunc{curl_global_init} is available as @func{curl_global_init}.

This library makes the original @curl{} documentation relevant for this
Scheme package; the documentation should be at (@aurl{} last verified
Mon Nov 16, 2009):

@center @url{http://curl.haxx.se/libcurl/c/}

@item foreign net curl conditions
Defines condition types used to signal @value{PACKAGE} errors.

@item foreign net curl enumerations
Defines enumeration sets of symbols.

@item foreign net curl record-types
Defines record types that match @curl{} structures.

@item foreign net curl primitives
Exports a binding for each foreign function, implementing, for some of
them, marshaling of arguments and return values; the Scheme functions
have the same name of the foreign ones, but with underscores turned into
dashes; so @cfunc{curl_global_init} is available as
@func{curl-global-init}.

@item foreign net curl
Compound library; reexports bindings from the following libraries:

@example
(foreign net curl sizeof)
(foreign net curl conditions)
(foreign net curl enumerations)
(foreign net curl record-types)
(foreign net curl primitives)
@end example

@noindent
only bindings to constant values are reexported from @library{foreign
net curl sizeof}.

@item foreign net curl compensated
Additional wrappers for constructors and destructors making use of the
@library{compensations} library; this library is built on top of
@library{foreign net curl}.  @nauref{compensations, Compensation
stacks}.
@end table

@c page
@node records
@chapter Record types


The bindings described in this chapter are exported by the
@library{foreign net curl record-types} library and, unless otherwise
specified, reexported by @library{foreign net curl}.

@menu
* records handle::              @curl{} session handlers.
* records version info::        Libraries version informations.
@end menu

@c page
@node records handle
@section @curl{} session handlers


The following bindings are @strong{not} reexported by the
@library{foreign net curl} compound library.


@deftp {Record Type Name} <curl-handle>
@deftpx {Record Type Descriptor} <curl-handle-rtd>
Record type to be used as wrapper for raw pointers to @curl{} session
handler structures.  It has the following fields:

@table @code
@item pointer
Holds a pointer object to a @curl{} session handler data structure.  It
is immutable.
@end table
@end deftp


@defun make-<curl-handle> @var{pointer}
@defunx <curl-handle>? @var{obj}
Constructor and predicate for records of type @class{curl-handle}.
@end defun


@defun <curl-handle>-pointer @var{record}
Accessor for the @code{pointer} field of records of type
@class{curl-handle}.
@end defun

@c page
@node records version info
@section Libraries version informations


@deftp {Record Type Name} <curl-version-info>
@deftpx {Record Type Descriptor} <curl-version-info-rtd>
Hold informations about the versions of @curl{} and the libraries
@curl{} uses.  It has the following immutable fields (for details see
the original @curl{} documentation); when a field's value is not
available, it is set to @false{}:

@table @code
@item age
The version number of the exported data structure of type
@code{curl_version_info_data}.

@item version
Scheme string representing @curl{}'s version.

@item version-num
Integer number representing @curl{}'s version (hexadecimal coded).

@item host
Scheme string showing host information for this build of @curl{}.

@item features
A list of Scheme symbols among the following:

@example
IPV6            KERBEROS4       SSL
LIBZ            NTLM            GSSNEGOTIATE
DEBUG           ASYNCHDNS       SPNEGO
LARGEFILE       IDN             SSPI
CONV            CURLDEBUG
@end example

@item ssl-version
Scheme string representing OpenSSL version.

@item ssl-version-num
Integer number representing OpenSSL version number.

@item libz-version
Scheme string representing Zlib version number.

@item protocols
List of Scheme symbols representing the supported protocols in this
build of @curl{}.

@item ares
Scheme string representing C-Ares version.

@item ares-num
Integer number representing C-Ares version.

@item libidn
Scheme string representing Libidn version.

@item iconv
Scheme string representing Libiconf version.

@item libssh-version
Scheme string representing Libssh version.
@end table
@end deftp


@defun make-<curl-version-info> @var{age} @var{version} @var{version-num} @var{host} @var{features} @var{ssl-version} @var{ssl-version-num} @var{libz-version} @var{protocols} @var{ares} @var{ares-num} @var{iconv} @var{libssh-version}
@defunx <curl-version-info>? @var{obj}
Constructor and predicate for records of type @class{curl-version-info}.
@end defun


@defun <curl-version-info>-age @var{record}
@defunx <curl-version-info>-version @var{record}
@defunx <curl-version-info>-version-num @var{record}
@defunx <curl-version-info>-host @var{record}
@defunx <curl-version-info>-features @var{record}
@defunx <curl-version-info>-ssl-version @var{record}
@defunx <curl-version-info>-ssl-version-num @var{record}
@defunx <curl-version-info>-libz-version @var{record}
@defunx <curl-version-info>-protocols @var{record}
@defunx <curl-version-info>-ares @var{record}
@defunx <curl-version-info>-ares-num @var{record}
@defunx <curl-version-info>-libidn @var{record}
@defunx <curl-version-info>-iconv @var{record}
@defunx <curl-version-info>-libssh-version @var{record}
Field accessors for records of type @class{curl-version-info}.
@end defun

@c page
@node enumerations
@chapter Enumerations


The bindings documented in this chapter are exported by the
@library{foreign net curl enumerations} library.

@menu
* enumerations codes::          Error codes conversion.
@end menu

@c page
@node enumerations codes
@section Error codes conversion


@defun curl-numeric-code->symbolic-code @var{numeric-code}
@defunx curl-symbolic-code->numeric-code @var{symbolic-code}
Convert to and from numeric @curl{} error codes and Scheme symbols.
Example:

@example
(curl-numeric-code->symbolic-code
    CURLE_UNSUPPORTED_PROTOCOL)
@result{} CURLE_UNSUPPORTED_PROTOCOL
@end example
@end defun

@c page
@node conditions
@chapter Condition object types


The bindings documented in this chapter are exported by the
@library{foreign net curl conditions} library and, unless otherwise
specified, reexported by the @library{foreign net curl} library.

@menu
* conditions data::             Condition types for data values.
* conditions error::            Error condition types.
@end menu

@c page
@node conditions data
@section Condition types for data values


Condition types described in this section can be used to store specific
values in compound condition objects.

@menu
* conditions data handle::      @curl{} handle objects.
* conditions data code::        @curl{} error code objects.
@end menu

@c page
@node conditions data handle
@subsection @curl{} handle objects


@deftp {Condition Type} &curl-handle
Condition type for records of type @class{curl-handle}; it is derived
from @condition{condition}.  It has the following fields:

@table @code
@item handle
Holds a record of type @class{curl-handle}.
@end table
@end deftp


@defun make-curl-handle-condition @var{handle-record}
@defunx curl-handle-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-handle}.
@end defun


@defun condition-curl-handle @var{condition}
Accessor for the @code{handle} field of condition objects of type
@condition{curl-handle}.
@end defun

@c page
@node conditions data code
@subsection @curl{} error code objects


@deftp {Condition Type} &curl-error-code
Condition type for @curl{} error codes; it is derived from
@condition{condition}.  It has the following fields:

@table @code
@item numeric-code
Holds an exact integer representing a @curl{} numeric error code.

@item symbolic-code
Holds a Scheme symbol representing a @curl{} numeric error code.
@end table
@end deftp


@defun make-curl-error-code-condition @var{numeric-error-code}
@defunx curl-error-code-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-error-code}.
@end defun


@defun condition-curl-error-numeric-code @var{condition}
@defunx condition-curl-error-symbolic-code @var{condition}
Accessors for the fields of condition objects of type
@condition{curl-error-code}.
@end defun

@c page
@node conditions error
@section Error condition types


@menu
* conditions error base::       Basic error condition.
* conditions error init::       Initialisation error condition.
@end menu

@c page
@node conditions error base
@subsection Basic error condition


@deftp {Condition Type} &curl-error
Condition type used to describe a @curl{} error; it is derived from
@condition{error}.  It has no fields.
@end deftp


@defun make-curl-error-condition
@defunx curl-error-condition? @var{obj}
Constructor and predicate for condition object of type
@condition{curl-error}.
@end defun


@defun raise-curl-easy-error @var{who} @var{code} @var{handle}
Raise a non--continuable exception with compound condition object of
types: @condition{who}, @condition{message}, @condition{curl-error},
@condition{curl-error-code}, @condition{curl-handle}.  @var{code} must
be a numeric @curl{} ``easy'' error code.  @var{handle} must be a
@curl{} session handle object.
@end defun


@defun raise-curl-multi-error @var{who} @var{code} @var{handle}
Raise a non--continuable exception with compound condition object of
types: @condition{who}, @condition{message}, @condition{curl-error},
@condition{curl-error-code}, @condition{curl-handle}.  @var{code} must
be a numeric @curl{} ``multi'' error code.  @var{handle} must be a
@curl{} session handle object.
@end defun

@c page
@node conditions error init
@subsection Initialisation error condition


@deftp {Condition Type} &curl-init-error
Condition type used to signal @curl{} session initialisation errors; it
is derived from @condition{curl-init}.  It has no fields.
@end deftp


@defun make-curl-init-error-condition @var{code}
@defunx curl-init-error-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-init-error}.
@end defun


@deffn Syntax raise-curl-init-error @var{who} @var{message} @var{code}
Raise a non--continuable exception with compound condition object of
types: @condition{who}, @condition{message},
@condition{curl-init-error}.  It is defined as follows:

@example
(define-syntax raise-curl-init-error
  (syntax-rules ()
    ((_ ?who ?message ?curl-code)
     (raise
      (condition (make-curl-init-error-condition ?curl-code)
                 (make-who-condition ?who)
                 (make-message-condition ?message))))))
@end example
@end deffn

@c page
@node easy
@chapter Easy interface


The bindings documented in this chapter are exported by @library{foreign
net curl primitives} and reexported by @library{foreign net curl}.

@menu
* easy intro::                  Introduction to the easy interface.
* easy init::                   Session handle construction.
* easy options::                Setting handle's options.
* easy callbacks::              Preparing callbacks.
@end menu

@c page
@node easy intro
@section Introduction to the easy interface


The ``easy'' @api{} provides simple one-at-a-time file transfer
features; a program that requests @file{index.html} from the @aurl{}
@url{http://localhost:8080/} looks like this:

@example
(import (rnrs)
  (only (foreign ffi pointers) pointer-null)
  (compensations)
  (foreign net curl))

(define address "http://localhost:8080/index.html")

(define document "")

(define (write-callback buffer item-size item-count)
  (let ((len (* item-size item-count)))
    (set! out (string-append out (cstring->string buffer len)))
    len))

(curl-global-init CURL_GLOBAL_ALL)

(with-compensations
  (let* ((handle (curl-easy-init/c)))
    (curl-easy-setopt handle CURLOPT_URL address)
    (curl-easy-setopt handle CURLOPT_WRITEFUNCTION
                      (curl-make-write-callback write-callback))
    (curl-easy-setopt handle CURLOPT_WRITEDATA pointer-null)
    (curl-easy-perform handle)
    ---))
@end example

@noindent
the callback @func{write-callback} may be called any number of times; if
successful it must return the number of bytes consumed from the buffer,
else it can return zero.

@c page
@node easy init
@section Session handle construction


@defun curl-easy-init
Build and return a new @curl{} session handle.  @curl{} session handle
objects are disjoint from the other Scheme object types.

If @curl{} is not able to initialise a new handle, an exception is
raised with condition object of type @condition{curl-init-error};
unfortunately there is no way to distinguish among different causes of
initialisation error.

The returned handle must be finalised with @func{curl-easy-cleanup},
else resources leakes will ensue.
@end defun


@defun curl-easy-cleanup @var{handle}
Finalise a @curl{} session handle, releasing all the associated
resources.
@end defun


@defun curl-easy-reset @var{handle}
Reset to its initial state a @curl{} session handle.
@end defun

@c page
@node easy options
@section Setting handle's options


@curl{} offers countless options to be set with
@cfunc{curl_easy_setopt}; the primitives library provides a special
interface for some of them, implementing marshaling of arguments from
Scheme to C language.  For the other options, the generic interfaces to
@cfunc{curl_easy_setopt} from @library{foreign net curl platform} must
be used.  @ref{platform, Details on the platform library}.



@defun curl-easy-setopt @var{handle} @var{option} @var{value}
Select an option's value for the session @var{handle}.  @var{option}
must be an exact integer among the @samp{CURLOPT_*} values; @var{value}
must be an appropriate value for the selected option.

@func{curl-easy-setopt} recognises the value of @var{option} and does
the appropriate marshaling of @var{value} for the underlying
@func{curl_easy_setopt} function.  Conversion is as follows:

@table @samp
@item CURLOPT_URL
@var{value} must be a Scheme string representing the @aurl{}.

@item CURLOPT_WRITEFUNCTION
@var{value} must be a C callback object, suitable to be used as callback
of type @code{curl_write_callback}.

@item CURLOPT_WRITEDATA
@var{value} must be a pointer object; it will be used as last argument
to the write callback.

@item CURLOPT_READFUNCTION
@var{value} must be a C callback object, suitable to be used as callback
of type @code{curl_read_callback}.

@item CURLOPT_READDATA
@var{value} must be a pointer object; it will be used as last argument
to the read callback.

@item CURLOPT_VERBOSE
@var{value} must be a Scheme boolean; @true{} tells @curl{} to display
informations when performing.

@item CURLOPT_HEADER
@var{value} must be a Scheme boolean; @true{} tells @curl{} to include
the protocol headers in the output.

@item CURLOPT_NOPROGRESS
@var{value} must be a Scheme boolean; @true{} tells @curl{} to shut off
the internal progress meter.

@item CURLOPT_NOSIGNAL
@var{value} must be a Scheme boolean; @true{} tells @curl{} not to
install signal handlers.
@end table
@end defun

@c da fare CURLOPT_IOCTLFUNCTION


@c page
@node easy callbacks
@section Preparing callbacks


@defun curl-make-write-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_WRITEFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-write-callback scheme-function)
  (make-c-callback
     size_t
     (lambda (buffer item-size item-count custom)
       (guard (E (else 0))
         (scheme-function buffer item-size item-count)))
     (void* size_t size_t void*)))
@end example
@end defun


@defun curl-make-read-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_READFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-read-callback scheme-function)
  (make-c-callback
     size_t
     (lambda (buffer item-size item-count custom)
       (guard (E (else 0))
         (scheme-function buffer item-size item-count)))
     (void* size_t size_t void*)))
@end example
@end defun


@c page
@node misc
@chapter Miscellaneous functions


The bindings documented in this chapter are exported by @library{foreign
net curl primitives} and reexported by @library{foreign net curl}.

@menu
* misc version::                Version informations about @curl{}.
@end menu

@c page
@node misc version
@section Version informations about @curl{}


@defun curl-version
Return a Scheme string describing general @curl{} version informations.
Example:

@smallexample
(cur-version)
@result{} "libcurl/7.19.7 OpenSSL/0.9.8i zlib/1.2.3 c-ares/1.6.0 libidn/1.12"
@end smallexample
@end defun


@defun curl-version-info
Return a record of type @class{curl-version-info} filled with version
informations on the build of @curl{}.  @ref{records version info,
Libraries version informations}.
@end defun

@c page
@node compensated
@chapter Compensated constructors


The following bindings are exported from the library @library{foreign
net curl compensated}.  The library makes use of the compensation stacks
library, @library{compensations}.  @nauref{compensations, Compensation
stacks}.


@defun curl-easy-init/c
Wrapper for @func{curl-easy-init} which registers in the current
compensation stack the appropriate call to @func{curl-easy-cleanup} to
destroy the handle.
@end defun


@c page
@node platform
@chapter Details on the platform library


Some functions from @curl{} are variadic; variadic C language functions
are unsupported by Nausicaa's @ffi{}.  For this reason the following
interface functions are exported by @library{foreign net curl platform}.

@c ------------------------------------------------------------

@subsubheading Setting options for the easy @api{}


@defun curl_easy_setopt/callback @var{void*} @var{CURLoption} @var{callback}
Wrapper for @cfunc{curl_easy_setopt} which expects a callback as last
argument.
@end defun


@defun curl_easy_setopt/void* @var{void*} @var{CURLoption} @var{void*}
Wrapper for @cfunc{curl_easy_setopt} which expects a pointer as last
argument.
@end defun


@defun curl_easy_setopt/int @var{void*} @var{CURLoption} @var{int}
Wrapper for @cfunc{curl_easy_setopt} which expects an @code{int} as last
argument.
@end defun


@defun curl_easy_setopt/long @var{void*} @var{CURLoption} @var{long}
Wrapper for @cfunc{curl_easy_setopt} which expects a @code{long} as last
argument.
@end defun


@defun curl_easy_setopt/unsigned-int @var{void*} @var{CURLoption} @var{unsigned-int}
Wrapper for @cfunc{curl_easy_setopt} which expects an @code{unsigned
int} as last argument.
@end defun


@defun curl_easy_setopt/unsigned-long @var{void*} @var{CURLoption} @var{unsigned-long}
Wrapper for @cfunc{curl_easy_setopt} which expects an @code{unsigned
long} as last argument.
@end defun


@defun curl_easy_setopt/off_t @var{void*} @var{CURLoption} @var{curl_off_t}
Wrapper for @cfunc{curl_easy_setopt} which expects a @code{curl_off_t}
as last argument.
@end defun

@c page

@include gpl-3.0.texiinc
@include fdl-1.3.texiinc

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
