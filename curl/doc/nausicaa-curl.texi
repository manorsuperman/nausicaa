\input texinfo.tex
@c %**start of header
@setfilename nausicaa-curl.info
@settitle cURL for  Nausicaa
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@macro condition{NAME}
@code{&\NAME\}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@macro curl{}
cURL
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro https{}
@acronym{HTTPS}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro tftp{}
@acronym{TFTP}
@end macro

@macro ftps{}
@acronym{FTPS}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro ssl{}
@acronym{SSL}
@end macro

@macro ssh{}
@acronym{SSH}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro tls{}
@acronym{TLS}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      cURL for Nausicaa

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/cURL

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-curl

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2009

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides bindings to the cURL library: A tool to transfer data from or
to a server, using one of the supported protocols (@http{}, @https{},
@ftp{}, @ftps{}, @tftp{}, @acronym{DICT}, @acronym{TELNET},
@acronym{LDAP} or @acronym{FILE}).

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/nausicaa/downloads}

The project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/tree/master}

@curl{} is available here:

@center @url{http://curl.haxx.se/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-curl: (nausicaa-curl).       @curl{} for Nausicaa.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* structs::                     Accessing foreign structures.
* records::                     Record types.
* enumerations::                Enumerations.
* conditions::                  Condition object types.
* easy::                        Easy interface.
* misc::                        Miscellaneous functions.
* compensated::                 Compensated constructors.
* platform::                    Details on the platform library.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

@detailmenu
 --- The Detailed Node Listing ---

Record types

* records handle::              @curl{} session handlers.
* records multi::               @curl{} multi session handlers.
* records version info::        Libraries version informations.

@curl{} session handlers

* records handle base::         Base handle type.
* records handle easy::         Easy handle type.
* records handle multi::        Multi handle type.

Enumerations

* enumerations codes::          Error codes conversion.
* enumerations pause::          Session pause mask.

Condition object types

* conditions data::             Condition types for data values.
* conditions error::            Error condition types and utilities.

Condition types for data values

* conditions data easy::        @curl{} easy handle objects.
* conditions data multi::       @curl{} multi handle objects.
* conditions data sockfd::      Socket file descriptor objects.
* conditions data code::        @curl{} error code objects.

Error condition types and utilities

* conditions error tag::        Tagging error condition objects.
* conditions error utils::      Utility functions.

Easy interface

* easy intro::                  Introduction to the easy interface.
* easy init::                   Session handle construction.
* easy perform::                Performing the transfer.
* easy options::                Setting handle's options.
* easy info::                   Getting informations.
* easy callbacks::              Preparing callbacks.
* easy forms::                  Composing forms data.
* easy misc::                   Miscellaneous functions.

Setting handle's options

* easy options behaviour::      Behaviour options.
* easy options callback::       Callback related options.
* easy options error::          Error options.
* easy options network::        Network options.
* easy options auth::           Authentication options.
* easy options http::           @http{} options.
* easy options tftp::           @tftp{} options.
* easy options ftp::            @ftp{} options.
* easy options protocol::       Protocol options.
* easy options connection::     Connection options.
* easy options security::       @ssl{} and security options.
* easy options ssh::            @ssh{} options.
* easy options telnet::         Telnet options.
* easy options other::          Other options.

Miscellaneous functions

* misc version::                Version informations about @curl{}.
* misc slist::                  @curl{} linked lists.

@end detailmenu
@end menu

@end ifnottex

@c page
@node overview
@chapter Overview of the package


@value{PACKAGE} is a distribution of libraries for @rnrs{6} Scheme
implementations; it provides bindings to the LibcURL library: A tool to
transfer data from or to a server, using one of the supported protocols
(@http{}, @https{}, @ftp{}, @ftps{}, @tftp{}, @acronym{DICT},
@acronym{TELNET}, @acronym{LDAP} or @acronym{FILE}).

The installed libraries are:

@table @library
@item foreign net curl shared-object
Exports the single binding @code{curl-shared-object} which references
@curl{}'s shared library.

@item foreign net curl sizeof
Exports bindings for constant values and data types inspection.

@item foreign net curl platform
Exports a binding for each function in @curl{}.  It implements a
one--to--one map between foreign functions and Scheme functions; the
Scheme functions have the same name of the foreign ones, so
@cfunc{curl_global_init} is available as @func{curl_global_init}.

This library makes the original @curl{} documentation relevant for this
Scheme package; the documentation should be at (@aurl{} last verified
Mon Nov 16, 2009):

@center @url{http://curl.haxx.se/libcurl/c/}

@item foreign net curl conditions
Defines condition types used to signal @value{PACKAGE} errors.

@item foreign net curl enumerations
Defines enumeration sets of symbols.

@item foreign net curl record-types
Defines record types that match @curl{} structures.

@item foreign net curl primitives
Exports a binding for each foreign function, implementing, for some of
them, marshaling of arguments and return values; the Scheme functions
have the same name of the foreign ones, but with underscores turned into
dashes; so @cfunc{curl_global_init} is available as
@func{curl-global-init}.

@item foreign net curl
Compound library; reexports bindings from the following libraries:

@example
(foreign net curl sizeof)
(foreign net curl conditions)
(foreign net curl enumerations)
(foreign net curl record-types)
(foreign net curl primitives)
@end example

@noindent
only bindings to constant values are reexported from @library{foreign
net curl sizeof}.

@item foreign net curl compensated
Additional wrappers for constructors and destructors making use of the
@library{compensations} library; this library is built on top of
@library{foreign net curl}.  @nauref{compensations, Compensation
stacks}.
@end table

@c page
@node structs
@chapter Accessing foreign structures


The bindings described in this chapter are exported by the
@library{foreign net curl sizeof} library.


@deffn Syntax struct-curl_httppost-next-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-name-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-namelength-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-contents-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-contentslength-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-buffer-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-bufferlength-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-contenttype-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-contentheader-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-more-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-flags-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-showfilename-ref @var{pointer}
@deffnx Syntax struct-curl_httppost-userp-ref @var{pointer}
Field accessors for the @code{struct curl_httppost} data type.
@end deffn


@deffn Syntax struct-curl_sockaddr-family-ref @var{pointer}
@deffnx Syntax struct-curl_sockaddr-socktype-ref @var{pointer}
@deffnx Syntax struct-curl_sockaddr-protocol-ref @var{pointer}
@deffnx Syntax struct-curl_sockaddr-addrlen-ref @var{pointer}
@deffnx Syntax struct-curl_sockaddr-addr-ref @var{pointer}
Field accessors for the @code{struct curl_sockaddr} data type.  Notice
that @func{struct-curl_sockaddr-addr-ref} returns a pointer to the first
byte of the @code{struct sockaddr addr} field.
@end deffn


@deffn Syntax struct-curl_khkey-key-ref @var{pointer}
@deffnx Syntax struct-curl_khkey-len-ref @var{pointer}
@deffnx Syntax struct-curl_khkey-keytype-ref @var{pointer}
Field accessors for the @code{struct curl_khkey} data type.
@end deffn


@deffn Syntax struct-curl_forms-option-ref @var{pointer}
@deffnx Syntax struct-curl_forms-value-ref @var{pointer}
Field accessors for the @code{struct curl_forms} data type.
@end deffn


@deffn Syntax struct-curl_slist-data-ref @var{pointer}
@deffnx Syntax struct-curl_slist-next-ref @var{pointer}
Field accessors for the @code{struct curl_slist} data type.
@end deffn


@deffn Syntax struct-curl_certinfo-num_of_certs-ref @var{pointer}
@deffnx Syntax struct-curl_certinfo-certinfo-ref @var{pointer}
Field accessors for the @code{struct curl_certinfo} data type.
@end deffn


@deffn Syntax struct-curl_version_info_data-age-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-version-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-version_num-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-host-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-features-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-ssl_version-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-ssl_version_num-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-libz_version-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-protocols-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-ares-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-ares_num-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-libidn-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-iconv_ver_num-ref @var{pointer}
@deffnx Syntax struct-curl_version_info_data-libssh_version-ref @var{pointer}
Field accessors for the @code{struct curl_version_info_data} data type.
@end deffn


@deffn Syntax struct-CURLMsg-msg-ref @var{pointer}
@deffnx Syntax struct-CURLMsg-easy_handle-ref @var{pointer}
@deffnx Syntax struct-CURLMsg-whatever-ref @var{pointer}
@deffnx Syntax struct-CURLMsg-result-ref @var{pointer}
Field accessors for the @code{struct CURLMsg} data type.
@end deffn

@c page
@node records
@chapter Record types


The bindings described in this chapter are exported by the
@library{foreign net curl record-types} library and, unless otherwise
specified, they are @strong{not} reexported by @library{foreign net
curl}; the fact that @curl{} handle objects are records is kept hidden
from the client code.

@menu
* records handle::              @curl{} session handlers.
* records multi::               @curl{} multi session handlers.
* records version info::        Libraries version informations.
@end menu

@c page
@node records handle
@section @curl{} session handlers


@menu
* records handle base::         Base handle type.
* records handle easy::         Easy handle type.
* records handle multi::        Multi handle type.
@end menu

@c page
@node records handle base
@subsection Base handle type


@deftp {Record Type Name} <curl-handle>
@deftpx {Record Type Descriptor} <curl-handle-rtd>
Record type to be used as wrapper for raw pointers to @curl{} session
handler structures.  It has the following fields:

@table @code
@item pointer
Holds a pointer object to a @curl{} session handler data structure.  It
is immutable.
@end table
@end deftp


@defun make-<curl-handle> @var{pointer}
@defunx <curl-handle>? @var{obj}
Constructor and predicate for records of type @class{curl-handle}.
@end defun


@defun <curl-handle>-pointer @var{record}
Accessor for the @code{pointer} field of records of type
@class{curl-handle}.
@end defun

@c page
@node records handle easy
@subsection Easy handle type


@deftp {Record Type Name} <curl-easy>
@deftpx {Record Type Descriptor} <curl-easy-rtd>
Record type to be used as reference for @curl{} easy session handler
structures.  It is derived from @class{curl-handle}; it has no own
fields.
@end deftp


@defun make-<curl-easy> @var{pointer}
@defunx <curl-easy>? @var{obj}
Constructor and predicate for records of type @class{curl-easy}.
@end defun

@c page
@node records handle multi
@subsection Multi handle type


@deftp {Record Type Name} <curl-multi>
@deftpx {Record Type Descriptor} <curl-multi-rtd>
Record type to be used as reference for @curl{} multi session handler
structures.  It is derived from @class{curl-handle}; it has no own
fields.
@end deftp


@defun make-<curl-multi> @var{pointer}
@defunx <curl-multi>? @var{obj}
Constructor and predicate for records of type @class{curl-multi}.
@end defun

@c page
@node records multi
@section @curl{} multi session handlers


The following bindings are @strong{not} reexported by the
@library{foreign net curl} compound library.


@deftp {Record Type Name} <curl-multi>
@deftpx {Record Type Descriptor} <curl-multi-rtd>
Record type to be used as wrapper for raw pointers to @curl{} multi
session handler structures.  It has the following fields:

@table @code
@item pointer
Holds a pointer object to a @curl{} multi session handler data
structure.  It is immutable.
@end table
@end deftp


@defun make-<curl-multi> @var{pointer}
@defunx <curl-multi>? @var{obj}
Constructor and predicate for records of type @class{curl-multi}.
@end defun


@defun <curl-multi>-pointer @var{record}
Accessor for the @code{pointer} field of records of type
@class{curl-multi}.
@end defun

@c page
@node records version info
@section Libraries version informations


The following bindings are reexported by the library @library{foreign
net curl}.


@deftp {Record Type Name} <curl-version-info>
@deftpx {Record Type Descriptor} <curl-version-info-rtd>
Hold informations about the versions of @curl{} and the libraries
@curl{} uses.  It has the following immutable fields (for details see
the original @curl{} documentation); when a field's value is not
available, it is set to @false{}:

@table @code
@item age
The version number of the exported data structure of type
@code{curl_version_info_data}.

@item version
Scheme string representing @curl{}'s version.

@item version-num
Integer number representing @curl{}'s version (hexadecimal coded).

@item host
Scheme string showing host information for this build of @curl{}.

@item features
A list of Scheme symbols among the following:

@example
IPV6            KERBEROS4       SSL
LIBZ            NTLM            GSSNEGOTIATE
DEBUG           ASYNCHDNS       SPNEGO
LARGEFILE       IDN             SSPI
CONV            CURLDEBUG
@end example

@item ssl-version
Scheme string representing OpenSSL version.

@item ssl-version-num
Integer number representing OpenSSL version number.

@item libz-version
Scheme string representing Zlib version number.

@item protocols
List of Scheme symbols representing the supported protocols in this
build of @curl{}.

@item ares
Scheme string representing C-Ares version.

@item ares-num
Integer number representing C-Ares version.

@item libidn
Scheme string representing Libidn version.

@item iconv
Scheme string representing Libiconf version.

@item libssh-version
Scheme string representing Libssh version.
@end table
@end deftp


@defun make-<curl-version-info> @var{age} @var{version} @var{version-num} @var{host} @var{features} @var{ssl-version} @var{ssl-version-num} @var{libz-version} @var{protocols} @var{ares} @var{ares-num} @var{iconv} @var{libssh-version}
@defunx <curl-version-info>? @var{obj}
Constructor and predicate for records of type @class{curl-version-info}.
@end defun


@defun <curl-version-info>-age @var{record}
@defunx <curl-version-info>-version @var{record}
@defunx <curl-version-info>-version-num @var{record}
@defunx <curl-version-info>-host @var{record}
@defunx <curl-version-info>-features @var{record}
@defunx <curl-version-info>-ssl-version @var{record}
@defunx <curl-version-info>-ssl-version-num @var{record}
@defunx <curl-version-info>-libz-version @var{record}
@defunx <curl-version-info>-protocols @var{record}
@defunx <curl-version-info>-ares @var{record}
@defunx <curl-version-info>-ares-num @var{record}
@defunx <curl-version-info>-libidn @var{record}
@defunx <curl-version-info>-iconv @var{record}
@defunx <curl-version-info>-libssh-version @var{record}
Field accessors for records of type @class{curl-version-info}.
@end defun

@c page
@node enumerations
@chapter Enumerations


The bindings documented in this chapter are exported by the
@library{foreign net curl enumerations} library.

@menu
* enumerations codes::          Error codes conversion.
* enumerations pause::          Session pause mask.
@end menu

@c page
@node enumerations codes
@section Error codes conversion


@defun curl-numeric-code->symbolic-code @var{numeric-code}
@defunx curl-symbolic-code->numeric-code @var{symbolic-code}
Convert to and from numeric @curl{} error codes and Scheme symbols.
Example:

@example
(curl-numeric-code->symbolic-code
    CURLE_UNSUPPORTED_PROTOCOL)
@result{} CURLE_UNSUPPORTED_PROTOCOL
@end example
@end defun

@c page
@node enumerations pause
@section Session pause mask


The bindings @func{curl-pause-symbol} and @func{curl-pause-mask} are
reexported by the @library{foreign net curl} library.


@deftp {Enumeration Type} curl-pause-symbol
Enumeration type for @curl{} session pause operations.  Symbols in this
enumeration are:

@example
RECV    SEND    ALL     CONT
@end example
@end deftp


@deffn Syntax curl-pause-mask @ameta{symbol} ...
Evaluate to an enumeration set holding the given symbols in the
@code{curl-pause-symbol} set.
@end deffn


@defun %curl-pause-set->bitmask
Convert an enumeration set of type @code{curl-pause-symbol} to an exact
integer by combining with inclusive bitwise OR the flags:

@example
CURLPAUSE_RECV          CURLPAUSE_SEND
CURLPAUSE_ALL           CURLPAUSE_CONT
@end example
@end defun

@c page
@node conditions
@chapter Condition object types


The bindings documented in this chapter are exported by the library
@library{foreign net curl conditions} and, unless otherwise specified,
reexported by the library @library{foreign net curl}.

@menu
* conditions data::             Condition types for data values.
* conditions error::            Error condition types and utilities.
@end menu

@c page
@node conditions data
@section Condition types for data values


Condition types described in this section can be used to store specific
values in compound condition objects.

@menu
* conditions data easy::        @curl{} easy handle objects.
* conditions data multi::       @curl{} multi handle objects.
* conditions data sockfd::      Socket file descriptor objects.
* conditions data code::        @curl{} error code objects.
@end menu

@c page
@node conditions data easy
@subsection @curl{} easy handle objects


@deftp {Condition Type} &curl-easy-handle
Condition type representing a @curl{} easy handle involved in an
exception; it is derived from @condition{condition}.  It has the
following fields:

@table @code
@item handle
Holds an easy handle object.
@end table
@end deftp


@defun make-curl-easy-handle-condition @var{handle-record}
@defunx curl-easy-handle-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-easy-handle}.
@end defun


@defun condition-curl-easy-handle @var{condition}
Accessor for the @code{handle} field of condition objects of type
@condition{curl-easy-handle}.
@end defun

@c page
@node conditions data multi
@subsection @curl{} multi handle objects


@deftp {Condition Type} &curl-multi-handle
Condition type representing a @curl{} multi handle involved in an
exception; it is derived from @condition{condition}.  It has the
following fields:

@table @code
@item handle
Holds a multi handle object.
@end table
@end deftp


@defun make-curl-multi-handle-condition @var{handle-record}
@defunx curl-multi-handle-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-multi-handle}.
@end defun


@defun condition-curl-multi-handle @var{condition}
Accessor for the @code{handle} field of condition objects of type
@condition{curl-multi-handle}.
@end defun

@c page
@node conditions data sockfd
@subsection Socket file descriptor objects


@deftp {Condition Type} &curl-sockfd
Condition type representing a socket file descriptor (embedded in a
@curl{} easy handle) involved in an exception; it is derived from
@condition{condition}.  It has the following fields:

@table @code
@item file-descriptor
Holds an exact integer representing the socket file descriptor.
@end table
@end deftp


@defun make-curl-sockfd-condition @var{handle-record}
@defunx curl-sockfd-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-sockfd}.
@end defun


@defun condition-curl-sockfd @var{condition}
Accessor for the @code{file-descriptor} field of condition objects of
type @condition{curl-sockfd}.
@end defun

@c page
@node conditions data code
@subsection @curl{} error code objects


@deftp {Condition Type} &curl-error-code
Condition type for @curl{} error codes; it is derived from
@condition{condition}.  It has the following fields:

@table @code
@item numeric-code
Holds an exact integer representing a @curl{} numeric error code.

@item symbolic-code
Holds a Scheme symbol representing a @curl{} numeric error code.
@end table
@end deftp


@defun make-curl-error-code-condition @var{numeric-error-code} @var{symbolic-error-code}
@defunx curl-error-code-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-error-code}.
@end defun


@defun condition-curl-error-numeric-code @var{condition}
@defunx condition-curl-error-symbolic-code @var{condition}
Accessors for the fields of condition objects of type
@condition{curl-error-code}.
@end defun

@c page
@node conditions error
@section Error condition types and utilities


@menu
* conditions error tag::        Tagging error condition objects.
* conditions error utils::      Utility functions.
@end menu

@c page
@node conditions error tag
@subsection Tagging error condition objects


@subsubheading Basic error condition


@deftp {Condition Type} &curl-error
Condition type used to tag condition objects as representing @curl{}
errors; it is derived from @condition{error}.  It has no fields.
@end deftp


@defun make-curl-error-condition
@defunx curl-error-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-error}.
@end defun

@c ------------------------------------------------------------

@subsubheading Initialisation error condition


@deftp {Condition Type} &curl-init-error
Condition type used to tag condition objects as representing session
initialisation errors; it is derived from @condition{curl-error}.  It
has no fields.
@end deftp


@defun make-curl-init-error-condition @var{code}
@defunx curl-init-error-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-init-error}.
@end defun

@c ------------------------------------------------------------

@subsubheading Performing error condition


@deftp {Condition Type} &curl-action-error
Condition type used to tag condition objects as representing session
action errors; it is derived from @condition{curl-error}.  It has no
fields.
@end deftp


@defun make-curl-action-error-condition @var{code}
@defunx curl-action-error-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-action-error}.
@end defun

@c ------------------------------------------------------------

@subsubheading Easy performing error condition


@deftp {Condition Type} &curl-easy-action-error
Condition type used to tag condition objects as representing easy
session action errors; it is derived from
@condition{curl-action-error}.  It has no fields.
@end deftp


@defun make-curl-easy-action-error-condition @var{code}
@defunx curl-easy-action-error-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-easy-action-error}.
@end defun

@c ------------------------------------------------------------

@subsubheading Multi performing error condition


@deftp {Condition Type} &curl-multi-action-error
Condition type used to tag condition objects as representing multi
session action errors; it is derived from
@condition{curl-action-error}.  It has no fields.
@end deftp


@defun make-curl-multi-action-error-condition @var{code}
@defunx curl-multi-action-error-condition? @var{obj}
Constructor and predicate for condition objects of type
@condition{curl-multi-action-error}.
@end defun

@c page
@node conditions error utils
@subsection Utility functions


@defun make-curl-easy-message-condition @var{easy-numeric-code}
@defunx make-curl-multi-message-condition @var{multi-numeric-code}
Build and return a condition object of type @condition{message}
representing the error message associated with the given numeric code.
The message is retrieved with @func{curl_easy_strerror} and
@func{curl_multi_strerror}.
@end defun


@c page
@node easy
@chapter Easy interface


The bindings documented in this chapter are exported by @library{foreign
net curl primitives} and reexported by @library{foreign net curl}.

@menu
* easy intro::                  Introduction to the easy interface.
* easy init::                   Session handle construction.
* easy perform::                Performing the transfer.
* easy options::                Setting handle's options.
* easy info::                   Getting informations.
* easy callbacks::              Preparing callbacks.
* easy forms::                  Composing forms data.
* easy misc::                   Miscellaneous functions.
@end menu

@c page
@node easy intro
@section Introduction to the easy interface


The ``easy'' @api{} provides simple one-at-a-time file transfer
features; a program that requests @file{index.html} from the @aurl{}
@url{http://localhost:8080/} looks like this:

@example
(import (rnrs)
  (only (foreign ffi pointers) pointer-null)
  (compensations)
  (foreign net curl))

(define address "http://localhost:8080/index.html")

(define document "")

(define (write-callback buffer item-size item-count)
  (let ((len (* item-size item-count)))
    (set! out (string-append out (cstring->string buffer len)))
    len))

(curl-global-init CURL_GLOBAL_ALL)

(with-compensations
  (let* ((handle (curl-easy-init/c)))
    (curl-easy-setopt handle CURLOPT_URL address)
    (curl-easy-setopt handle CURLOPT_WRITEFUNCTION
                      (curl-make-write-callback write-callback))
    (curl-easy-setopt handle CURLOPT_WRITEDATA pointer-null)
    (curl-easy-perform handle)
    ---))
@end example

@noindent
the callback @func{write-callback} may be called any number of times; if
successful it must return the number of bytes consumed from the buffer,
else it can return zero.

@c page
@node easy init
@section Session handle construction


@defun curl-easy-init
Build and return a new @curl{} session handle.  @curl{} session handle
objects are disjoint from the other Scheme object types.

If @curl{} is not able to initialise a new handle, an exception is
raised with condition object of type @condition{curl-init-error};
unfortunately there is no way to distinguish among different causes of
initialisation error.

The returned handle must be finalised with @func{curl-easy-cleanup},
else resources leakes will ensue.
@end defun


@defun curl-easy-duphandle @var{handle}
Duplicate @var{handle}.
@end defun


@defun curl-easy-cleanup @var{handle}
Finalise a @curl{} session handle, releasing all the associated
resources.
@end defun


@defun curl-easy-reset @var{handle}
Reset to its initial state a @curl{} session handle.
@end defun

@c page
@node easy perform
@section Performing the transfer


@defun curl-easy-perform @var{handle}
Perform the requested transfer.
@end defun


@defun curl-easy-pause @var{handle} @var{bitmask}
Pause the running connection in @var{handle}.
@end defun


@defun curl-easy-send @var{handle} @var{data}
Send @var{data} to through the connection represented by @var{handle};
@var{data} can be a Scheme string or bytevector, the string is converted
to a C string with @func{string->cstring}.  Return the number of bytes
actually sent.
@end defun


@defun curl-easy-recv/string @var{handle} @var{number-of-bytes}
@defunx curl-easy-recv/bytevector @var{handle} @var{number-of-bytes}
Read at most @var{number-of-bytes} from the connection represented by
@var{handle}; the bytes actually read are returned as Scheme string or
bytevector.  The string is built with @func{cstring->string}.
@end defun


@c page
@node easy options
@section Setting handle's options


@curl{} offers countless options to be set with
@cfunc{curl_easy_setopt}; the primitives library provides a special
interface for some of them, implementing marshaling of arguments from
Scheme to C language.


@defun curl-easy-setopt @var{handle} @var{option} @var{value}
Select an option's value for the session @var{handle}.  @var{option}
must be an exact integer among the @samp{CURLOPT_*} values; @var{value}
must be an appropriate value for the selected option.

@func{curl-easy-setopt} recognises the value of @var{option} and does
the appropriate marshaling of @var{value} for the underlying
@cfunc{curl_easy_setopt} function.

Notice that:

@itemize
@item
When this documentation states that @var{value} must be a Scheme string,
@false{} is also accepted and turned into a @cnull{} pointer.

@item
When this documentation states that @var{value} must be an exact
integer, with no further specifications, the value must fit in the range
allowed for a platform's @code{long int} data type.

@item
When this documentation states that @var{value} must be a boolean, any
value is accepted with the usual truth value of Schem values; internally
true is converted to @samp{1} and @false{} is converted to @samp{0}.
@end itemize
@end defun


@menu
* easy options behaviour::      Behaviour options.
* easy options callback::       Callback related options.
* easy options error::          Error options.
* easy options network::        Network options.
* easy options auth::           Authentication options.
* easy options http::           @http{} options.
* easy options tftp::           @tftp{} options.
* easy options ftp::            @ftp{} options.
* easy options protocol::       Protocol options.
* easy options connection::     Connection options.
* easy options security::       @ssl{} and security options.
* easy options ssh::            @ssh{} options.
* easy options telnet::         Telnet options.
* easy options other::          Other options.
@end menu

@c page
@node easy options behaviour
@subsection Behaviour options


@defvr {@curl{} Option} CURLOPT_VERBOSE
@var{value} must be a Scheme boolean; @true{} tells @curl{} to display
informations when performing.
@end defvr


@defvr {@curl{} Option} CURLOPT_HEADER
@var{value} must be a Scheme boolean; @true{} tells @curl{} to include
the protocol headers in the output.
@end defvr


@defvr {@curl{} Option} CURLOPT_NOPROGRESS
@var{value} must be a Scheme boolean; @true{} tells @curl{} to shut off
the internal progress meter.
@end defvr


@defvr {@curl{} Option} CURLOPT_NOSIGNAL
@var{value} must be a Scheme boolean; @true{} tells @curl{} not to
install signal handlers.
@end defvr

@c page
@node easy options callback
@subsection Callback related options


@defvr {@curl{} Option} CURLOPT_WRITEFUNCTION
@var{value} must be a C callback object, suitable to be used as callback
of type @code{curl_write_callback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_WRITEDATA
@var{value} must be a pointer object; it will be used as @strong{last}
argument to the write callback.
@end defvr


@defvr {@curl{} Option} CURLOPT_READFUNCTION
@var{value} must be a C callback object, suitable to be used as callback
of type @code{curl_read_callback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_READDATA
@var{value} must be a pointer object; it will be used as @strong{last}
argument to the read callback.
@end defvr


@defvr {@curl{} Option} CURLOPT_IOCTLFUNCTION
@var{value} must be a callback object, suitable to be used as callback
of type @code{curl_ioctl_callback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_IOCTLDATA
@var{value} must be a pointer object; it will be used as @strong{last}
argument to the ioctl callback.
@end defvr


@defvr {@curl{} Option} CURLOPT_SEEKFUNCTION
@var{value} must be a callback object, suitable to be used as callback
of type @code{curl_seek_callback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_SEEKDATA
@var{value} must be a pointer object; it will be used as @strong{first}
argument to the seek callback.
@end defvr


@defvr {@curl{} Option} CURLOPT_SOCKOPTFUNCTION
@var{value} must be a callback object, suitable to be used as callback
of type @code{curl_sockopt_callback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_SOCKOPTDATA
@var{value} must be a pointer object; it will be used as @strong{first}
argument to the sockopt callback.
@end defvr


@defvr {@curl{} Option} CURLOPT_OPENSOCKETFUNCTION
@var{value} must be a callback object, suitable to be used as callback
of type @code{curl_opensocket_callback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_OPENSOCKETDATA
@var{value} must be a pointer object; it will be used as @strong{first}
argument to the opensocket callback.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROGRESSFUNCTION
@var{value} must be a callback object, suitable to be used as callback
of type @code{curl_progress_callback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROGRESSDATA
@var{value} must be a pointer object; it will be used as @strong{first}
argument to the progress callback.
@end defvr


@defvr {@curl{} Option} CURLOPT_HEADERFUNCTION
@var{value} must be a callback object, suitable to be used as callback
for header data.
@end defvr


@defvr {@curl{} Option} CURLOPT_HEADERDATA
@defvrx {@curl{} Option} CURLOPT_WRITEHEADER
@var{value} must be a pointer object; it will be used as @strong{last}
argument to the header callback.
@end defvr


@defvr {@curl{} Option} CURLOPT_DEBUGFUNCTION
@var{value} must be a callback object, suitable to be used as callback
of type @code{curl_debug_callback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_DEBUGDATA
@var{value} must be a pointer object; it will be used as @strong{last}
argument to the debug callback.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSL_CTX_UNCTION
@var{value} must be a callback object, suitable to be used as callback
of type @code{curl_ssl_ctx_callback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSL_CTX_DATA
@var{value} must be a pointer object; it will be used as @strong{last}
argument to the debug callback.
@end defvr


@defvr {@curl{} Option} CURLOPT_CONV_TO_NETWORK_FUNCTION
@defvrx {@curl{} Option} CURLOPT_CONV_FROM_NETWORK_FUNCTION
@defvrx {@curl{} Option} CURLOPT_CONV_FROM_UTF8_FUNCTION
@var{value} must be a callback object, suitable to be used as callback
of type @code{curl_conv_callback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSH_KEYFUNCTION
@var{value} must be a callback pointer for a function suitable to be
used as @code{curl_sshkeycallback}.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSH_KEYDATA
@var{value} must be a pointer object; it will be used as @strong{last}
argument to the sshkey callback.
@end defvr

@c page
@node easy options error
@subsection Error options


@defvr {@curl{} Option} CURLOPT_ERRORBUFFER
@var{value} must be a pointer to a raw memory block at least
@samp{CURL_ERROR_SIZE} bytes wide, in which @curl{} can store an error
message.
@end defvr


@defvr {@curl{} Option} CURLOPT_STDERR
@var{value} must be a pointer to a @samp{FILE} structure as used by the
@file{stdio.h} standard library.  It selects a stream to which @curl{}
will send verbose messages.
@end defvr


@defvr {@curl{} Option} CURLOPT_FAILONERROR
@var{value} must be a boolean value which signals to @curl{} to fail if
the @http{} response code is equal to, or greater than, @samp{400}.
@end defvr

@c page
@node easy options network
@subsection Network options


@defvr {@curl{} Option} CURLOPT_URL
@var{value} must be a Scheme string representing the @aurl{}.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROTOCOLS
@var{value} must be an exact integer built as bitmask with values among
the @samp{CURLPROTO_*} constants.  Example:

@example
(bitwise-ior CURLPROTO_HTTP CURLPROTO_HTTPS)
@end example
@end defvr


@defvr {@curl{} Option} CURLOPT_REDIR_PROTOCOLS
@var{value} must be an exact integer built as bitmask with values among
the @samp{CURLPROTO_*} constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROXY
@var{value} must be a Scheme string representing the host name or dotted
@ip{} address of the @http{} proxy to use.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROXYPORT
@var{value} must be an exact integer representing the port number of the
@http{} proxy to use.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROXYTYPE
@var{value} must be an exact integer among @code{CURLPROXY_*} constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_NOPROXY
@var{value} must be a Scheme string representing a comma--separated list
of hosts which do not use a proxy if one was specified.
@end defvr


@defvr {@curl{} Option} CURLOPT_HTTPPROXYTUNNEL
@var{value} must be a boolean value.
@end defvr


@defvr {@curl{} Option} CURLOPT_SOCKS5_GSSAPI_SERVICE
@var{value} must be a Scheme string representing the name of the
service.
@end defvr


@defvr {@curl{} Option} CURLOPT_SOCKS5_GSSAPI_NEC
@var{value} must be a boolean value.
@end defvr


@defvr {@curl{} Option} CURLOPT_INTERFACE
@var{value} must be a Scheme string representing the network interface
to use for outgoing connections.
@end defvr


@defvr {@curl{} Option} CURLOPT_LOCALPORT
@var{value} must be an exact integer representing the local port number
to use.
@end defvr


@defvr {@curl{} Option} CURLOPT_LOCALPORTRANGE
@var{value} must be an exact integer representing the number of attempts
@curl{} must perform to find a working local port number.
@end defvr


@defvr {@curl{} Option} CURLOPT_DNS_CACHE_TIMEOUT
@var{value} must be an exact integer representing the timeout in
seconds.
@end defvr


@defvr {@curl{} Option} CURLOPT_DNS_USE_GLOBAL_CACHE
@var{value} must be a boolean VALUE.
@end defvr


@defvr {@curl{} Option} CURLOPT_BUFFERSIZE
@var{value} must be an exact integer representing the size in bytes of
the receive buffer used by @curl{}.
@end defvr


@defvr {@curl{} Option} CURLOPT_PORT
@var{value} must be an exact integer representing the remote port to
connect to.
@end defvr


@defvr {@curl{} Option} CURLOPT_TCP_NODELAY
@var{value} must be a boolean value.
@end defvr


@defvr {@curl{} Option} CURLOPT_ADDRESS_SCOPE
@var{value} must be an exact integer.
@end defvr

@c page
@node easy options auth
@subsection Authentication options


@defvr {@curl{} Option} CURLOPT_NETRC
@var{value} must be an exact integer among the @samp{CURL_NETRC_*}
constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_NETRC_FILE
@var{value} must be a Scheme string representing the pathname to the
netrc file to use.
@end defvr


@defvr {@curl{} Option} CURLOPT_USERPWD
@var{value} must be a Scheme string representing a @samp{user:password}
specification.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROXYUSERPWD
@var{value} must be a Scheme string representing a @samp{user:password}
specification.
@end defvr


@defvr {@curl{} Option} CURLOPT_USERNAME
@var{value} must be a Scheme string representing a user name
specification.
@end defvr


@defvr {@curl{} Option} CURLOPT_PASSWORD
@var{value} must be a Scheme string representing a user password
specification.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROXYUSERNAME
@var{value} must be a Scheme string representing a user name
specification.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROXYPASSWORD
@var{value} must be a Scheme string representing a user password
specification.
@end defvr


@defvr {@curl{} Option} CURLOPT_HTTPAUTH
@var{value} must be an exact integer representing a bitmask built with
the @samp{CURLAUTH_*} constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROXYAUTH
@var{value} must be an exact integer representing a bitmask built with
the @samp{CURLAUTH_*} constants.
@end defvr

@c page
@node easy options http
@subsection @http{} options


@defvr {@curl{} Option} CURLOPT_AUTOREFERER
@var{value} must be a boolean value.
@end defvr


@defvr {@curl{} Option} CURLOPT_ENCODING
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_FOLLOWLOCATION
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_UNRESTRICTED_AUTH
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_MAXREDIRS
@var{value} must be an exact integer representing the redirection limit.
@end defvr


@defvr {@curl{} Option} CURLOPT_POSTREDIR
@var{value} must be an exact integer representing a bitmaks of
@samp{CURL_REDIR_*} constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_PUT
@var{value} must be a boolean value.
@end defvr


@defvr {@curl{} Option} CURLOPT_POST
@var{value} must be a boolean value.
@end defvr


@defvr {@curl{} Option} CURLOPT_POSTFIELDS
@var{value} must be a pointer to a raw block of memory.
@end defvr


@defvr {@curl{} Option} CURLOPT_POSTFIELDSIZE
@var{value} must be an exact integer representing the number of bytes in
the block of memory selected with the @samp{CURLOPT_POSTFIELDS} option.
The number must fit in a @code{long int} platform type.
@end defvr


@defvr {@curl{} Option} CURLOPT_POSTFIELDSIZE_LARGE
@var{value} must be an exact integer representing the number of bytes in
the block of memory selected with the @samp{CURLOPT_POSTFIELDS} option.
The number must fit in a @code{curl_off_t} platform type.
@end defvr


@defvr {@curl{} Option} CURLOPT_COPYPOSTFIELDS
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_HTTPPOST
@var{value} must be a pointer to a linked list of @code{struct
curl_httppost} structures.
@end defvr


@defvr {@curl{} Option} CURLOPT_REFERER
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_USERAGENT
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_HTTPHEADER
@var{value} must be a pointer to a @code{struct curl_slist} linked list.
@end defvr


@defvr {@curl{} Option} CURLOPT_HTTP200ALIASES
@var{value} must be a pointer to a @code{struct curl_slist} linked list.
@end defvr


@defvr {@curl{} Option} CURLOPT_COOKIE
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_COOKIEFILE
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_COOKIEJAR
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_COOKIESESSION
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_COOKIELIST
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_HTTPGET
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_HTTP_VERSION
@var{value} must be an exact integer among the
@samp{CURL_HTTP_VERSION_*} constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_IGNORE_CONTENT_LENGTH
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_HTTP_CONTENT_DECODING
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_HTTP_TRANSFER_DECODING
@var{value} must be a boolean.
@end defvr

@c page
@node easy options tftp
@subsection @tftp{} options


@defvr {@curl{} Option} CURLOPT_TFTP_BLKSIZE
@var{value} must be an exact integer in the range @math{8...65464}.
@end defvr

@c page
@node easy options ftp
@subsection @ftp{} options


@defvr {@curl{} Option} CURLOPT_FTPPORT
@var{value} must be an exact integer.
@end defvr


@defvr {@curl{} Option} CURLOPT_QUOTE
@defvrx {@curl{} Option} CURLOPT_POSTQUOTE
@defvrx {@curl{} Option} CURLOPT_PREQUOTE
@var{value} must be a pointer to a linked list of @code{struct
curl_slist} structures.
@end defvr


@defvr {@curl{} Option} CURLOPT_DIRLISTONLY
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_APPEND
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_FTP_USE_EPRT
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_FTP_USE_EPSV
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_FTP_CREATE_MISSING_DIRS
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_FTP_RESPONSE_TIMEOUT
@var{value} must be an exact integer representing the timeout in
seconds.
@end defvr


@defvr {@curl{} Option} CURLOPT_FTP_ALTERNATIVE_TO_USER
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_FTP_SKIP_PASV_IP
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_USE_SSL
@var{value} must be an exact integer among the @samp{CURLUSESSL_*}
constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_FTPSSLAUTH
@var{value} must be an exact integer among the @samp{CURLFTPAUTH_*}
constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_FTP_SSL_CCC
@var{value} must be an exact integer among the @samp{CURLFTPSSL_*}
constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_FTP_ACCOUNT
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_FTP_FILEMETHOD
@var{value} must be an exact integer among the @samp{CURLFTPMETHOD_*}
constants.
@end defvr

@c page
@node easy options protocol
@subsection Protocol options


@defvr {@curl{} Option} CURLOPT_TRANSFERTEXT
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_PROXY_TRANSFER_MODE
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_CRLF
@var{value} must be a boolean; if @true{} Unix newlines are converted to
@samp{<CR><LF>} sequences.
@end defvr


@defvr {@curl{} Option} CURLOPT_RANGE
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_RESUME_FROM
@var{value} must be an exact integer in the range allowed by a
platform's @code{long int} type.
@end defvr


@defvr {@curl{} Option} CURLOPT_RESUME_FROM_LARGE
@var{value} must be an exact integer in the range allowed by a
platform's @code{curl_off_t} type.
@end defvr


@defvr {@curl{} Option} CURLOPT_CUSTOMREQUEST
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_FILETIME
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_NOBODY
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_INFILESIZE
@var{value} must be an exact integer in the range allowed by a
platform's @code{long int} type.
@end defvr


@defvr {@curl{} Option} CURLOPT_INFILESIZE_LARGE
@var{value} must be an exact integer in the range allowed by a
platform's @code{curl_off_t} type.
@end defvr


@defvr {@curl{} Option} CURLOPT_UPLOAD
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_MAXFILESIZE
@var{value} must be an exact integer in the range allowed by a
platform's @code{long int} type.
@end defvr


@defvr {@curl{} Option} CURLOPT_MAXFILESIZE_LARGE
@var{value} must be an exact integer in the range allowed by a
platform's @code{curl_off_t} type.
@end defvr


@defvr {@curl{} Option} CURLOPT_TIMECONDITION
@var{value} must be an exact integer among the @samp{CURL_TIMECOND_*}
constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_TIMEVALUE
@var{value} must be an exact integer representing  a time in seconds
since the Epoch (Jan 1, 1970).
@end defvr

@c page
@node easy options connection
@subsection Connection options


@defvr {@curl{} Option} CURLOPT_TIMEOUT
@var{value} must be an exact integer.
@end defvr


@defvr {@curl{} Option} CURLOPT_TIMEOUT_MS
@var{value} must be an exact integer.
@end defvr


@defvr {@curl{} Option} CURLOPT_LOW_SPEED_LIMIT
@var{value} must be an exact integer.
@end defvr


@defvr {@curl{} Option} CURLOPT_LOW_SPEED_TIME
@var{value} must be an exact integer.
@end defvr


@defvr {@curl{} Option} CURLOPT_MAX_SEND_SPEED_LARGE
@var{value} must be an exact integer in the range allowed for a
platform's @code{curl_off_t} data type.
@end defvr


@defvr {@curl{} Option} CURLOPT_MAX_RECV_SPEED_LARGE
@var{value} must be an exact integer in the range allowed for a
platform's @code{curl_off_t} data type.
@end defvr


@defvr {@curl{} Option} CURLOPT_MAXCONNECTS
@var{value} must be an exact integer.
@end defvr


@defvr {@curl{} Option} CURLOPT_FRESH_CONNECT
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_FORBID_REUSE
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_CONNECTTIMEOUT
@var{value} must be an exact integer.
@end defvr


@defvr {@curl{} Option} CURLOPT_CONNECTTIMEOUT_MS
@var{value} must be an exact integer.
@end defvr


@defvr {@curl{} Option} CURLOPT_IPRESOLVE
@var{value} must be must be an exact integer among the
@samp{CURL_IPRESOLVE_*} constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_CONNECT_ONLY
@var{value} must be a boolean; if true tells @curl{} to perform all the
required proxy authentication and connection setup, but no data
transfer.
@end defvr

@c page
@node easy options security
@subsection @ssl{} and security options


@defvr {@curl{} Option} CURLOPT_SSLCERT
@var{value} must be a Scheme string representing the pathname of the
certificate file.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSLCERTTYPE
@var{value} must be a Scheme string representing the format of the
certificate file; supported values are @samp{PEM} and @samp{DER}.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSLKEY
@var{value} must be a Scheme string representing the pathname of the
private key file.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSLKEYTYPE
@var{value} must be a Scheme string representing the format of the
certificate file; supported values are @samp{PEM}, @samp{DER} and
@samp{ENG}.
@end defvr


@defvr {@curl{} Option} CURLOPT_KEYPASSWD
@var{value} must be a Scheme string representing the password for
accessing the key files.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSLENGINE
@var{value} must be a Scheme string; it is used as identifier for the
crypto engine we want to use for the private key.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSLENGINE_DEFAULT
@var{value} is ignored, but it should be a true boolean; the current
crypto engine is selected as default.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSLVERSION
@var{value} must be an exact integer among the @samp{CURL_SSLVERSION_*}
constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSL_VERIFYPEER
@var{value} must be a boolean; if true @curl{} verifies the authenticity
of the peer's certificate; the default is true.
@end defvr


@defvr {@curl{} Option} CURLOPT_CAINFO
@var{value} must be a Scheme string representing the pathname to a file
holding certificates to verify the peer with.
@end defvr


@defvr {@curl{} Option} CURLOPT_ISSUERCERT
@var{value} must be a Scheme string representing the pathname to a file
holding a single certificate in @samp{PEM} format to verify the peer
with.
@end defvr


@defvr {@curl{} Option} CURLOPT_CAPATH
@var{value} must be a Scheme string representing the pathname of a
directory holding multiple CA certificates to verify the peer with.
@end defvr


@defvr {@curl{} Option} CURLOPT_CRLFILE
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_CERTINFO
@var{value} must be a boolean; if true instructs @curl{} to extract
informations about the peer's certificate and make it available with
@func{curl-easy-getinfo}.
@end defvr


@defvr {@curl{} Option} CURLOPT_RANDOM_FILE
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_EGDSOCKET
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSL_VERIFYHOST
@var{value} must be an exact integer among @samp{0}, @samp{1} and
@samp{2}.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSL_CIPHER_LIST
@var{value} must be a Scheme string.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSL_SESSIONID_CACHE
@var{value} must be a boolean.
@end defvr


@defvr {@curl{} Option} CURLOPT_KRBLEVEL
@var{value} must be a Scheme string.
@end defvr

@c page
@node easy options ssh
@subsection @ssh{} options


@defvr {@curl{} Option} CURLOPT_SSH_AUTH_TYPES
@var{value} must be an exact integer built as bitmask using the
@samp{CURLSSH_AUTH_*} constants.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSH_HOST_PUBLIC_KEY_MD5
@var{value} must be a Scheme string holding @math{32} hexadecimal
digits.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSH_PUBLIC_KEYFILE
@var{value} must be a Scheme string representing the pathname of the
public key file.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSH_PRIVATE_KEYFILE
@var{value} must be a Scheme string representing the pathname of the
private key file.
@end defvr


@defvr {@curl{} Option} CURLOPT_SSH_KNOWNHOSTS
@var{value} must be a Scheme string representing the pathname of the
file holding the list of known hosts.
@end defvr

@c page
@node easy options telnet
@subsection Telnet options


@defvr {@curl{} Option} CURLOPT_TELNETOPTIONS
@var{value} must be a pointer referencing a @code{struct curl_slist}
linked list.
@end defvr

@c page
@node easy options other
@subsection Other options


@defvr {@curl{} Option} CURLOPT_PRIVATE
@var{value} must be a pointer object.
@end defvr


@defvr {@curl{} Option} CURLOPT_SHARE
@var{value} must be a pointer object, referencing a share handle.
@end defvr


@defvr {@curl{} Option} CURLOPT_NEW_FILE_PERMS
@var{value} must be an exact integer.
@end defvr


@defvr {@curl{} Option} CURLOPT_NEW_DIRECTORY_PERMS
@var{value} must be an exact integer.
@end defvr

@c page
@node easy info
@section Getting informations


@defun curl-easy-getinfo @var{handle} @var{option}
Exctract informations on the state of @var{handle}; @var{option} must be
an exact integer among the ones to the @code{CURLINFO_*} constants.

The returned value depends upon the selected option, see the original
@curl{} documentation.  It can be:

@itemize
@item
An exact integer.

@item
A flonum.

@item
A Scheme string.

@item
A list of Scheme strings when the result of the query is a @code{struct
curl_slist}.

@item
A list of lists of Scheme strings when the result of the query is a
@code{struct curl_certinfo}; each sublist holds informations on a
certificate; the length of the list is the number of certificates.
@end itemize
@end defun

@c page
@node easy callbacks
@section Preparing callbacks


For details on the expected behaviour of the callback functions see the
original @curl{} documentation.


@defun curl-make-write-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_WRITEFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-write-callback scheme-function)
  (make-c-callback
     size_t
     (lambda (buffer item-size item-count custom)
       (guard (E (else 0))
         (scheme-function buffer item-size item-count)))
     (void* size_t size_t void*)))
@end example
@end defun


@defun curl-make-read-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_READFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-read-callback scheme-function)
  (make-c-callback
     size_t
     (lambda (buffer item-size item-count custom)
       (guard (E (else 0))
         (scheme-function buffer item-size item-count)))
     (void* size_t size_t void*)))
@end example
@end defun


@defun curl-make-ioctl-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_IOCTLFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-ioctl-callback scheme-function)
  (make-c-callback
     curlioerr
     (lambda (handle action custom-data)
       (guard (E (else -1))
         (scheme-function handle size custom-data)))
     (void* int void*)))
@end example

The first argument to @var{scheme-function} is the @curl{} session
handle; the second argument is one of the @samp{CURLIOCMD_*} constants;
the third argument is the pointer previously set with the
@samp{CURLOPT_IOCTLDATA} option.

At present (@curl{} version 7.19.7), the only meaningful requested
action is @samp{CURLIOCMD_RESTARTREAD}; when @var{scheme-function}
receives this value as second argument, it should rewind to the start
the read stream of the data to be sent.  When successful, the callback
must return zero; else it must return non--zero.
@end defun


@defun curl-make-seek-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_SEEKFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-seek-callback scheme-function)
  (make-c-callback
    curlioerr
    (lambda (instream offset whence)
      (guard (E (else CURL_SEEKFUNC_FAIL))
        (scheme-function intream offset whence)))
    (void* curl_off_t int)))
@end example

@var{scheme-function} should seek @var{instream} as described by
@var{offset} and @var{whence}; notice that @samp{SEEK_CUR},
@samp{SEEK_SET} and @samp{SEEK_END} are provided as constants by
@library{foreign net curl sizeof}.
@end defun


@defun curl-make-sockopt-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_SOCKOPTFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-sockopt-callback scheme-function)
  (make-c-callback
    curlioerr
    (lambda (instream offset whence)
      (guard (E (else 1))
        (scheme-function instream offset whence)))
    (void* curl_socket_t curlsocktype)))
@end example
@end defun


@defun curl-make-opensocket-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_OPENSOCKETFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-opensocket-callback scheme-function)
  (make-c-callback
    curl_socket_t
    (lambda (custom-pointer purpose address)
      (guard (E (else CURL_SOCKET_BAD))
        (scheme-function custom-pointer purpost)))
    (void* curlsocktype void*)))
@end example
@end defun


@defun curl-make-progress-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_PROGRESSFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-progress-callback scheme-function)
  (make-c-callback
    curl_socket_t
    (lambda (custom-pointer dltotal dlnow ultotal ulnow)
      (guard (E (else 1))
        (scheme-function custom-pointer dltotal dlnow ultotal ulnow)))
    (void* double double double double)))
@end example
@end defun


@defun curl-make-header-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_HEADERFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-header-callback scheme-function)
  (make-c-callback
    size_t
    (lambda (custom-pointer item-size item-count stream)
      (guard (E (else -1))
        (scheme-function custom-pointer item-size item-count stream)))
    (void* size_t size_t void*)))
@end example
@end defun


@defun curl-make-debug-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_DEBUGFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-debug-callback scheme-function)
  (make-c-callback
    int
    (lambda (handle type data size custom-pointer)
      (guard (E (else 0))
        (scheme-function handle type data size custom-pointer)))
    (void* curl_infotype char* size_t void*)))
@end example
@end defun


@defun curl-make-ssl-ctx-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_SSL_CTXFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-ssl-ctx-callback scheme-function)
  (make-c-callback
    int
    (lambda (handle ssl_ctx custom-pointer)
      (guard (E (else 0))
        (scheme-function handle ssl_ctx custom-pointer)))
    (void* void* void*)))
@end example
@end defun


@defun curl-make-conv-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_CONV_TO_NETWORK_FUNCTION},
@samp{CURLOPT_CONV_FROM_NETWORK_FUNCTION} and
@samp{CURLOPT_CONV_FROM_UTF8_FUNCTION} options.  It is defined as
follows:

@example
(define (curl-make-conv-callback scheme-function)
  (make-c-callback
    CURLcode
    (lambda (buffer len)
      (guard (E (else CURLE_ABORTED_BY_CALLBACK))
        (scheme-function buffer len)))
    (char* size_t)))
@end example
@end defun


@defun curl-make-sshkey-callback @var{scheme-function}
Prepare a callback C function to be used as value for the
@samp{CURLOPT_SSH_KEYFUNCTION} option.  It is defined as follows:

@example
(define (curl-make-sshkey-callback scheme-function)
  (make-c-callback
    int
    (lambda (handle knownkey foundkey status custom-pointer)
      (guard (E (else CURLKHSTAT_REJECT))
        (scheme-function handle knownkey foundkey
                         status custom-pointer)))
    (void* void* void* curl_khmatch void*)))
@end example
@end defun

@c page
@node easy forms
@section Composing forms data


The @samp{CURLOPT_HTTPPOST} option to @func{curl-easy-setopt} allows us
to compose data to be posted with @http{}.


@defun curl-formadd @var{alist}
@defunx curl-formadd @var{alist} @var{first*} @var{last*}
Transform the @var{alist} into a linked list of @code{struct
curl_httppost} structures to compose a section of multipart/formdata
@http{} @samp{POST}.  Return two values: a pointer to the first
@code{struct curl_httppost} in the list, a pointer to the last
@code{struct curl_httppost} in the list.

@var{alist} must be a Scheme alist with @code{CURLFORM_*} constants as
alist keys and the appropriate option values as alist values.
Internally this function makes use of the @samp{CURLFORM_ARRAY} option.

Example:

@example
(curl-formadd
  `((,CURLFORM_COPYNAME     . "htmlcode")
    (,CURLFORM_COPYCONTENTS . "<HTML></HTML>")
    (,CURLFORM_CONTENTTYPE  . "text/html")))
@end example

@noindent
there is @strong{no} need to terminate the alist with the
@samp{CURLFORM_ARRAY}; also if the value is a Scheme string, it is
automatically, internally, converted to a C string with
@func{string->cstring} from @library{foreign cstrings}.
@end defun




@c page
@node easy misc
@section Miscellaneous functions


@defun curl-easy-escape @var{handle} @var{url}
Convert the Scheme string @var{url} to an @aurl{} encoded Scheme string;
return the new string.
@end defun


@defun curl-easy-unescape @var{handle} @var{url}
Convert an @aurl{} encoded Scheme string @var{url} to an ordinary Scheme
string; return the new string.
@end defun


@c page
@node misc
@chapter Miscellaneous functions


The bindings documented in this chapter are exported by @library{foreign
net curl primitives} and reexported by @library{foreign net curl}.

@menu
* misc version::                Version informations about @curl{}.
* misc slist::                  @curl{} linked lists.
@end menu

@c page
@node misc version
@section Version informations about @curl{}


@defun curl-version
Return a Scheme string describing general @curl{} version informations.
Example:

@smallexample
(cur-version)
@result{} "libcurl/7.19.7 OpenSSL/0.9.8i zlib/1.2.3 c-ares/1.6.0 libidn/1.12"
@end smallexample
@end defun


@defun curl-version-info
Return a record of type @class{curl-version-info} filled with version
informations on the build of @curl{}.  @ref{records version info,
Libraries version informations}.
@end defun

@c page
@node misc slist
@section @curl{} linked lists


@defun strings->curl-slist @var{strings}
Convert a list of Scheme strings into a linked list of @code{struct
curl_slist} structures; return a pointer object to the first node of the
list.  The strings are converted to C strings using
@func{string->cstring}, and memory is allocated with
@func{primitive-malloc} from @library{foreign memory alloc}.
@end defun


@c page
@node compensated
@chapter Compensated constructors


The following bindings are exported from the library @library{foreign
net curl compensated}.  The library makes use of the compensation stacks
library, @library{compensations}.  @nauref{compensations, Compensation
stacks}.


@defun curl-easy-init/c
Wrapper for @func{curl-easy-init} which registers in the current
compensation stack the appropriate call to @func{curl-easy-cleanup} to
destroy the handle.
@end defun


@c page
@node platform
@chapter Details on the platform library


Some functions from @curl{} are variadic; variadic C language functions
are unsupported by Nausicaa's @ffi{}.  For this reason the following
interface functions are exported by @library{foreign net curl platform}.

@c ------------------------------------------------------------

@subsubheading Setting options for the easy @api{}


@defun curl_easy_setopt/callback @var{void*} @var{CURLoption} @var{callback}
Wrapper for @cfunc{curl_easy_setopt} which expects a callback as last
argument.
@end defun


@defun curl_easy_setopt/void* @var{void*} @var{CURLoption} @var{void*}
Wrapper for @cfunc{curl_easy_setopt} which expects a pointer as last
argument.
@end defun


@defun curl_easy_setopt/long @var{void*} @var{CURLoption} @var{long}
Wrapper for @cfunc{curl_easy_setopt} which expects a @code{long} as last
argument.
@end defun


@defun curl_easy_setopt/off_t @var{void*} @var{CURLoption} @var{curl_off_t}
Wrapper for @cfunc{curl_easy_setopt} which expects a @code{curl_off_t}
as last argument.
@end defun

@c page

@include gpl-3.0.texiinc
@include fdl-1.3.texiinc

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
