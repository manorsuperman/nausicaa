;;;
;;;Part of: Nausicaa/OSSP/sa interface for R6RS Scheme
;;;Contents: size of libraries' C language types
;;;Date: Sat Dec 13, 2008
;;;Time-stamp: <2008-12-15 16:12:41 marco>
;;;
;;;Abstract
;;;
;;;
;;;
;;;Copyright (c) 2008 Marco Maggi <marcomaggi@gna.org>
;;;
;;;This program is free software:  you can redistribute it and/or modify
;;;it under the terms of the  GNU General Public License as published by
;;;the Free Software Foundation, either version 3 of the License, or (at
;;;your option) any later version.
;;;
;;;This program is  distributed in the hope that it  will be useful, but
;;;WITHOUT  ANY   WARRANTY;  without   even  the  implied   warranty  of
;;;MERCHANTABILITY  or FITNESS FOR  A PARTICULAR  PURPOSE.  See  the GNU
;;;General Public License for more details.
;;;
;;;You should  have received  a copy of  the GNU General  Public License
;;;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;;

(library (ossp-sa sizeof)
  (export

    ;; type aliases
    sa_addr_t*
    sa_addr_t**
    sa_buffer_t
    sa_option_t
    sa_rc_t
    sa_syscall_t
    sa_t*
    sa_t**
    sa_timeout_t
    sa_type_t

    ;; size of types
    sizeof-sa_buffer_t
    sizeof-sa_option_t
    sizeof-sa_rc_t
    sizeof-sa_syscall_t
    sizeof-sa_timeout_t
    sizeof-sa_type_t

    ;; Constants.
    SA_OK		SA_ERR_ARG	SA_ERR_USE
    SA_ERR_MEM		SA_ERR_MTC	SA_ERR_EOF
    SA_ERR_TMT		SA_ERR_SYS	SA_ERR_NET
    SA_ERR_FMT		SA_ERR_IMP	SA_ERR_INT

    SA_TYPE_STREAM	SA_TYPE_DATAGRAM

    SA_TIMEOUT_ALL	SA_TIMEOUT_ACCEPT
    SA_TIMEOUT_CONNECT	SA_TIMEOUT_READ
    SA_TIMEOUT_WRITE

    SA_BUFFER_READ	SA_BUFFER_WRITE

    SA_OPTION_NAGLE	SA_OPTION_LINGER
    SA_OPTION_REUSEADDR	SA_OPTION_REUSEPORT
    SA_OPTION_NONBLOCK

    ;; accessors
    pointer-set-c-sa_buffer_t!		pointer-ref-c-sa_buffer_t
    pointer-set-c-sa_option_t!		pointer-ref-c-sa_option_t
    pointer-set-c-sa_rc_t!		pointer-ref-c-sa_rc_t
    pointer-set-c-sa_syscall_t!		pointer-ref-c-sa_syscall_t
    pointer-set-c-sa_timeout_t!		pointer-ref-c-sa_timeout_t
    pointer-set-c-sa_type_t!		pointer-ref-c-sa_type_t

    ;; value->symbol mappers
    sa-return-value->symbol		sa-socket-type->symbol
    sa-socket-option->symbol		sa-buffer-option->symbol
    sa-timeout-option->symbol)
  (import (rnrs)
    (uriel ffi)
    (uriel ffi sizeof))

  (define sa_rc_t			(quote @TYPEOF_SA_RC_T@))
  (define sizeof-sa_rc_t		@SIZEOF_SA_RC_T@)
  (define pointer-set-c-sa_rc_t!	@SETTEROF_SA_RC_T@)
  (define pointer-ref-c-sa_rc_t		@GETTEROF_SA_RC_T@)

  (define sa_type_t			(quote @TYPEOF_SA_TYPE_T@))
  (define sizeof-sa_type_t		@SIZEOF_SA_TYPE_T@)
  (define pointer-set-c-sa_type_t!	@SETTEROF_SA_TYPE_T@)
  (define pointer-ref-c-sa_type_t	@GETTEROF_SA_TYPE_T@)

  (define sa_timeout_t			(quote @TYPEOF_SA_TIMEOUT_T@))
  (define sizeof-sa_timeout_t		@SIZEOF_SA_TIMEOUT_T@)
  (define pointer-set-c-sa_timeout_t!	@SETTEROF_SA_TIMEOUT_T@)
  (define pointer-ref-c-sa_timeout_t	@GETTEROF_SA_TIMEOUT_T@)

  (define sa_buffer_t			(quote @TYPEOF_SA_BUFFER_T@))
  (define sizeof-sa_buffer_t		@SIZEOF_SA_BUFFER_T@)
  (define pointer-set-c-sa_buffer_t!	@SETTEROF_SA_BUFFER_T@)
  (define pointer-ref-c-sa_buffer_t	@GETTEROF_SA_BUFFER_T@)

  (define sa_option_t			(quote @TYPEOF_SA_OPTION_T@))
  (define sizeof-sa_option_t		@SIZEOF_SA_OPTION_T@)
  (define pointer-set-c-sa_option_t!	@SETTEROF_SA_OPTION_T@)
  (define pointer-ref-c-sa_option_t	@GETTEROF_SA_OPTION_T@)

  (define sa_syscall_t			(quote @TYPEOF_SA_SYSCALL_T@))
  (define sizeof-sa_syscall_t		@SIZEOF_SA_SYSCALL_T@)
  (define pointer-set-c-sa_syscall_t!	@SETTEROF_SA_SYSCALL_T@)
  (define pointer-ref-c-sa_syscall_t	@GETTEROF_SA_SYSCALL_T@)

  (define sa_addr_t*			'pointer)
  (define sa_addr_t**			'pointer)
  (define sa_t*				'pointer)
  (define sa_t**			'pointer)

  (define SA_OK				@VALUEOF_SA_OK@)
  (define SA_ERR_ARG			@VALUEOF_SA_ERR_ARG@)
  (define SA_ERR_USE			@VALUEOF_SA_ERR_USE@)
  (define SA_ERR_MEM			@VALUEOF_SA_ERR_MEM@)
  (define SA_ERR_MTC			@VALUEOF_SA_ERR_MTC@)
  (define SA_ERR_EOF			@VALUEOF_SA_ERR_EOF@)
  (define SA_ERR_TMT			@VALUEOF_SA_ERR_TMT@)
  (define SA_ERR_SYS			@VALUEOF_SA_ERR_SYS@)
  (define SA_ERR_NET			@VALUEOF_SA_ERR_NET@)
  (define SA_ERR_FMT			@VALUEOF_SA_ERR_FMT@)
  (define SA_ERR_IMP			@VALUEOF_SA_ERR_IMP@)
  (define SA_ERR_INT			@VALUEOF_SA_ERR_INT@)

  (define SA_TYPE_STREAM		@VALUEOF_SA_TYPE_STREAM@)
  (define SA_TYPE_DATAGRAM		@VALUEOF_SA_TYPE_DATAGRAM@)

  (define SA_TIMEOUT_ALL		@VALUEOF_SA_TIMEOUT_ALL@)
  (define SA_TIMEOUT_ACCEPT		@VALUEOF_SA_TIMEOUT_ACCEPT@)
  (define SA_TIMEOUT_CONNECT		@VALUEOF_SA_TIMEOUT_CONNECT@)
  (define SA_TIMEOUT_READ		@VALUEOF_SA_TIMEOUT_READ@)
  (define SA_TIMEOUT_WRITE		@VALUEOF_SA_TIMEOUT_WRITE@)

  (define SA_BUFFER_READ		@VALUEOF_SA_BUFFER_READ@)
  (define SA_BUFFER_WRITE		@VALUEOF_SA_BUFFER_WRITE@)

  (define SA_OPTION_NAGLE		@VALUEOF_SA_OPTION_NAGLE@)
  (define SA_OPTION_LINGER		@VALUEOF_SA_OPTION_LINGER@)
  (define SA_OPTION_REUSEADDR		@VALUEOF_SA_OPTION_REUSEADDR@)
  (define SA_OPTION_REUSEPORT		@VALUEOF_SA_OPTION_REUSEPORT@)
  (define SA_OPTION_NONBLOCK		@VALUEOF_SA_OPTION_NONBLOCK@)

  (define sa-return-values-alist
    `((,SA_OK . SA_OK)
      (,SA_ERR_ARG . SA_ERR_ARG)
      (,SA_ERR_USE . SA_ERR_USE)
      (,SA_ERR_MEM . SA_ERR_MEM)
      (,SA_ERR_MTC . SA_ERR_MTC)
      (,SA_ERR_EOF . SA_ERR_EOF)
      (,SA_ERR_TMT . SA_ERR_TMT)
      (,SA_ERR_SYS . SA_ERR_SYS)
      (,SA_ERR_IMP . SA_ERR_IMP)
      (,SA_ERR_INT . SA_ERR_INT)))

  (define sa-socket-types-alist
    `((,SA_TYPE_STREAM . SA_TYPE_STREAM)
      (,SA_TYPE_DATAGRAM . SA_TYPE_DATAGRAM)))

  (define sa-socket-options-alist
    `((,SA_OPTION_NAGLE SA_OPTION_NAGLE)
      (,SA_OPTION_LINGER SA_OPTION_LINGER)
      (,SA_OPTION_REUSEADDR SA_OPTION_REUSEADDR)
      (,SA_OPTION_REUSEPORT SA_OPTION_REUSEPORT)
      (,SA_OPTION_NONBLOCK SA_OPTION_NONBLOCK)))

  (define sa-buffer-options-alist
    `((,SA_BUFFER_READ SA_BUFFER_READ)
      (,SA_BUFFER_WRITE SA_BUFFER_WRITE)))

  (define sa-timeout-options-alist
    `((,SA_TIMEOUT_ALL . SA_TIMEOUT_ALL)
      (,SA_TIMEOUT_ACCEPT . SA_TIMEOUT_ACCEPT)
      (,SA_TIMEOUT_CONNECT . SA_TIMEOUT_CONNECT)
      (,SA_TIMEOUT_READ . SA_TIMEOUT_READ)
      (,SA_TIMEOUT_WRITE . SA_TIMEOUT_WRITE)))

  (define (sa-return-value->symbol retval)
    (let ((pair (assq retval sa-return-values-alist)))
      (if pair
	  (cdr pair)
	(assertion-violation 'sa-return-value->symbol
	  "unknown SA return value" retval))))

  (define (sa-socket-type->symbol value)
    (let ((pair (assq value sa-socket-types-alist)))
      (if pair
	  (cdr pair)
	(assertion-violation 'sa-socket-type->symbol
	  "unknown SA socket type" value))))

  (define (sa-socket-option->symbol value)
    (let ((pair (assq value sa-socket-options-alist)))
      (if pair
	  (cdr pair)
	(assertion-violation 'sa-socket-option->symbol
	  "unknown SA socket option type" value))))

  (define (sa-timeout-option->symbol value)
    (let ((pair (assq value sa-timeout-options-alist)))
      (if pair
	  (cdr pair)
	(assertion-violation 'sa-timeout-option->symbol
	  "unknown SA socket timeout option type" value))))

  (define (sa-buffer-option->symbol value)
    (let ((pair (assq value sa-buffer-options-alist)))
      (if pair
	  (cdr pair)
	(assertion-violation 'sa-buffer-option->symbol
	  "unknown SA socket buffer option type" value)))))


;;; end of file
