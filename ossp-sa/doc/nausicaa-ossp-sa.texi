\input texinfo.tex
@c %**start of header
@setfilename nausicaa-ossp-sa.info
@settitle Nausicaa/OSSP/sa
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@macro ossp{}
@acronym{OSSP}
@end macro

@macro sa{}
@acronym{SA}
@end macro


@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@macro bsd{}
@acronym{BSD}
@end macro



@c page
@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro ram{}
@acronym{RAM}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@c Remember that @url is already used by Texinfo.
@macro urla{}
@acronym{URL}
@end macro

@macro utf{}
@acronym{UTF}
@end macro


@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Software related macros.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@macro glibc{}
@gnu{} C Library
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro icmp{}
@acronym{ICMP}
@end macro

@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro https{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@macro snmp{}
@acronym{SNMP}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Arguments macros.
@c ------------------------------------------------------------

@macro vari{ARG}
@var{\ARG\1}
@end macro

@macro varii{ARG}
@var{\ARG\2}
@end macro

@macro variii{ARG}
@var{\ARG\3}
@end macro

@macro variv{ARG}
@var{\ARG\4}
@end macro

@macro varn{ARG}
@var{\ARG\n}
@end macro

@macro vark{ARG}
@var{\ARG\k}
@end macro

@macro varj{ARG}
@var{\ARG\j}
@end macro

@c ------------------------------------------------------------

@macro meta{ARG}
<\ARG\>
@end macro

@macro metai{ARG}
@meta{\ARG\1}
@end macro

@macro metaii{ARG}
@meta{\ARG\2}
@end macro

@macro metaiii{ARG}
@meta{\ARG\3}
@end macro

@macro metaiv{ARG}
@meta{\ARG\4}
@end macro

@macro metan{ARG}
@meta{\ARG\n}
@end macro

@macro metak{ARG}
@meta{\ARG\k}
@end macro

@macro metaj{ARG}
@meta{\ARG\j}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro null{}
@code{NULL}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{NAME}
@code{(\NAME\)}
@end macro

@macro module{NAME}
@code{\NAME\}
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@ignore
Separating the @srfi{}  macro from the number with a  '--' rather than a
'-' makes the expansion look ugly in menu entries under the Info reader.
IMHO this should not happen, but  it does; so we live with this, because
the main purpose of this document is to provide an Info version.
@end ignore
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@c ------------------------------------------------------------

@macro func{NAME}
@code{@sc{\NAME\}}
@end macro

@macro nil{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@macro rsixref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@end macro

@macro rfiveref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r5rs}
@end macro

@macro ikarusref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,ikarus}
@end macro

@macro urielref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa-uriel}
@end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro


@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Nausicaa/OSSP/sa

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/OSSP/sa

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-ossp-sa

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marcomaggi@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2008

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, an
interface to OSSP/sa: an abstraction library for the Unix socket
application programming interface, featuring stream and datagram
oriented communication over Unix Domain and Internet Domain (@tcp{} and
@udp{}) sockets.  It provides the following key features: address
abstraction (local, IPv4, and IPv6), type abstraction, I/O timeouts, I/O
stream buffering and convenience I/O functions.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://sites.google.com/site/mrcmgg/nausicaa}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c ------------------------------------------------------------

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-ossp-sa: (nausicaa-ossp-sa). OSSP/sa for @rnrs{6} Scheme.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c ------------------------------------------------------------

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* conditions::                  Condition types.
* address::                     Handling addresses.
* socket::                      Handling sockets.
* misc::                        Miscellaneous bindings.

Appendices

* sa::                          OSSP/sa original documentation.
* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c ------------------------------------------------------------

@c page
@node overview
@chapter Overview of the package


This is a Scheme library implementing an interface to @ossp{} @sa{}: an
abstraction library for the Unix socket application programming
interface, featuring stream and datagram oriented communication over
Unix Domain and Internet Domain (@tcp{} and @udp{}) sockets.  It
provides the following key features: address abstraction (local, IPv4,
and IPv6), type abstraction, I/O timeouts, I/O stream buffering and
convenience I/O functions.

Almost all the functions exported by @ossp{} @sa{} have been interfaced,
with the exclusion of the variadic ones, @cfunc{sa_writef} and
@cfunc{sa_sendf}.  The interface has 2 levels:

@enumerate
@item
The low level provides the primitive @sa{} functions as Scheme
functions.  The names of the Scheme functions are equal to the names of
the corresponding foreign functions.  The original documentation of
@sa{} is relevant to the usage of these functions.  @ref{sa} the
original documentation.

@item
The high level provides wrappers to allow: compensated allocation of
resources; automatic raising of exceptions in case of errors; automatic
conversion between Scheme strings and zero terminated C strings.  The
high level functions have different semantics and are described by this
document.
@end enumerate

The low level library is @library{ossp-sa foreign}, the high level is
@library{ossp-sa} and auxiliary bindings are exported from
@library{ossp-sa sizeof}.  To use @ossp{} @sa{} it is usually enough to
do:

@example
(import (r6rs)
  (uriel lang)
  (uriel ffi)
  (ossp-sa))
@end example

@noindent
the auxiliary bindings are needed only when using the low level library.
@library{uriel lang} is needed to make use of the compensation stacks,
and @library{uriel ffi} to handle low level memory allocation.


@c page
@node conditions
@chapter Condition types


Usually we do not have to use the bindings described here.  All the
exceptions raised by the high level functions are non--continuable.


@deftp Condition &sa-error
Condition type raised by the high level functions.
@end deftp


@defun sa-error @var{retval}
Convert a return value from a @sa{} foreign function into a message as
Scheme string.
@end defun


@defun raise-sa-error @var{who} @var{retval}
If @var{retval} equals @code{SA_ERR_MEM} raise an @code{&out-of-memory}
condition.  @urielref{ffi conditions nomem,&out-of-memory}

Else raise a condition with components of the following types:

@table @code
@item &who
with value @var{who};

@item &sa-error
the symbolic (human readable) representation of @var{retval}, which must
be a return value from the @sa{} foreign functions;

@item &message
describing @var{retval} with the string returned by @func{sa_error};

@item &irritants
a single value or list of values that caused the exception.
@end table
@end defun


@c page
@node address
@chapter Handling addresses


@menu
* address init::                Construction and destruction.
* address access::              Setter and getter.
@end menu


@c page
@node address init
@section Construction and destruction


@defun make-sa-address
@defunx make-sa-address @var{address-spec}
@defunx make-sa-address/compensated
@defunx make-sa-address/compensated @var{address-spec}
@defunx destroy-sa-address @var{address}
@func{make-sa-address} allocates and returns a new address object.  The
object has to be finalised with @func{destroy-sa-address}.

@func{make-sa-address/compensated} is like @func{make-sa-address} but
registers an appropriate compensation closure in the dynamic environment
of the current compensation stack.

If the @var{address-spec} is given, it is used to initialise the address
as described for @func{sa-address-set!}.

Example:

@example
(let ((address #f))
  (dynamic-wind
    (lambda () (set! address (make-sa-address)))
    (lambda () ---)
    (lambda () (destroy-sa-address address))))
@end example

@noindent
and with compensations:

@example
(with-compensations
  (let ((address (make-sa-address/compensated)))
    ---))
@end example
@end defun


@c page
@node address access
@section Setter and getter


@defun sa-address-set! @var{address} @var{specification}
Register the @var{specification} into the @var{address}.
@var{specification} must be a Scheme string or symbol, see
@cfunc{sa_addr_u2a} for details.
@end defun


@defun sa-address-ref @var{address}
Extract from @var{address} the specification and return it as Scheme
string.  It is an error to attempt specification extraction from an
uninitialised @var{address} object.
@end defun


@c page
@node socket
@chapter Handling sockets


@menu
* socket init::                 Constructor and destructor.
@end menu


@c page
@node socket init
@section Constructor and destructor


@defun make-sa-socket
@defunx make-sa-socket/compensated
@defunx destroy-sa-socket @var{socket}
@func{make-sa-socket} allocates and returns a new socket object.  The
object has to be finalised with @func{destroy-sa-socket}.

@func{make-sa-socket/compensated} is like @func{make-sa-socket} but
registers an appropriate compensation closure in the dynamic environment
of the current compensation stack.

Example:

@example
(let ((socket #f))
  (dynamic-wind
    (lambda () (set! socket (make-sa-socket)))
    (lambda () ---)
    (lambda () (destroy-sa-socket socket))))
@end example

@noindent
and with compensations:

@example
(with-compensations
  (let ((socket (make-sa-socket/compensated)))
    ---))
@end example
@end defun


@c page
@node misc
@chapter Miscellaneous bindings


@menu
* misc constants::              Constants.
* misc symbols::                Mapping values to symbols.
@end menu


@c page
@node misc constants
@section Constants


The following bindings are exported by @library{ossp-sa sizeof}.


@defvar SA_OK
@defvarx SA_ERR_ARG
@defvarx SA_ERR_USE
@defvarx SA_ERR_MEM
@defvarx SA_ERR_MTC
@defvarx SA_ERR_EOF
@defvarx SA_ERR_TMT
@defvarx SA_ERR_SYS
@defvarx SA_ERR_IMP
@defvarx SA_ERR_INT
Possible return values from the @sa{} foreign functions.
@end defvar


@defvar SA_TYPE_STREAM
@defvarx SA_TYPE_DATAGRAM
Socket types.
@end defvar


@defvar SA_OPTION_NAGLE
@defvarx SA_OPTION_LINGER
@defvarx SA_OPTION_REUSEADDR
@defvarx SA_OPTION_REUSEPORT
@defvarx SA_OPTION_NONBLOCK
Socket options.
@end defvar


@defvar SA_BUFFER_READ
@defvarx SA_BUFFER_WRITE
Socket buffer options.
@end defvar



@c page
@node misc symbols
@section Mapping values to symbols


The following bindings are exported by @library{ossp-sa sizeof}.


@defun sa-return-value->symbol @var{retval}
Convert a numeric @sa{} return value into its symbolic representation.
@end defun


@defun sa-socket-type->symbol @var{value}
Convert a numeric @sa{} socket type value its symbolic representation.
@end defun


@defun sa-socket-option->symbol @var{value}
Convert a numeric @sa{} socket option value its symbolic representation.
@end defun


@defun sa-buffer-option->symbol @var{value}
Convert a numeric @sa{} socket buffer option value its symbolic
representation.
@end defun


@c page
@node sa
@appendix @acronym{OSSP} Socket Abstraction


@menu
* sa intro::                    Introduction.
* sa license::                  License.
* sa data types::               Data types.
* sa functions::                Functions.
* sa references::               References.
@end menu


@c page
@node sa intro
@appendixsec Introduction


@noindent
@ossp{} @sa{} is an abstraction library for the Unix Socket networking
application programming interface (@api{}), featuring stream and
datagram oriented communication over Unix Domain and Internet Domain
(@tcp{} and @udp{}) sockets.

It provides the following key features:

@table @strong
@item Stand--Alone, Self--Contained, Embeddable
Although there are various Open Source libraries available which provide
a similar abstraction approach, they all either lack important features
or unfortunately depend on other companion libraries.  @ossp{} @sa{}
fills this gap by providing all important features (see following
points) as a stand--alone and fully self--contained library.  This way
@ossp{} @sa{} can be trivially embedded as a sub--library into other
libraries.  It especially provides additional support for
namespace--safe embedding of its @api{} in order to avoid symbol
conflicts (see @code{SA_PREFIX} in @file{sa.h}).

@item Address Abstraction
Most of the ugliness in the Unix Socket @api{} is the necessity to have
to deal with the various address structures (@code{struct sockaddr_xx})
which exist because of both the different communication types and
addressing schemes.  @ossp{} @sa{} fully hides this by providing an
abstract and opaque address type (@code{sa_addr_t}) together with
utility functions which allow one to convert from the traditional
@code{struct sockaddr} or @acronym{URI} specification to the
@code{sa_addr_t} and vice versa without having to deal with special
cases related to the underlying particular @code{struct sockaddr_xx}.
@ossp{} @sa{} support Unix Domain and both IPv4 and IPv6 Internet Domain
addressing.

@item Type Abstraction
Some other subtle details in the Unix Socket @api{} make the life hard
in practice: @code{socklen_t} and @code{ssize_t}.  These two types
originally were (and on some platforms still are) plain integers or
unsigned integers while @acronym{POSIX} later introduced own types for
them (and even revised these types after some time again).  This is
nasty, because for 100% type--correct @api{} usage (especially important
on 64--bit machines where pointers to different integer types make
trouble), every application has to check whether the newer types exists,
and if not provide own definitions which map to the still actually used
integer type on the underlying platform.  @ossp{} @sa{} hides most of
this in its @api{} and for @code{socklen_t} provides a
backward--compatibility definition.  Instead of @code{ssize_t} it can
use @code{size_t} because @ossp{} @sa{} does not use traditional Unix
return code semantics.

@item I/O Timeouts
Each I/O function in @ossp{} @sa{} is aware of timeouts (set by
@code{sa_timeout(3)}, i.e., all I/O operations return @code{SA_ERR_TMT}
if the timeout expired before the I/O operation was able to succeed.
This allows one to easily program less-blocking network services.
@ossp{} @sa{} internally implements these timeouts either through the
@code{SO_@{SND,RCV@}TIMEO} feature on more modern Socket implementations
or through traditional @code{select(2)}.  This way high performance is
achieved on modern platforms while the full functionality still is
available on older platforms.

@item I/O Stream Buffering
If @ossp{} @sa{} is used for stream communication, internally all I/O
operations can be performed through input and/or output buffers (set by
@code{sa_buffer()}) for achieving higher I/O performance by doing I/O
operations on larger aggregated messages and with less required system
calls.  Additionally if @ossp{} @sa{} is used for stream communication,
for convenience reasons line--oriented reading (@code{sa_readln()}) and
formatted writing (see @code{sa_writef()}) is provided, modelled after
@code{STDIO}'s @code{fgets(3)} and @code{fprintf(3)}.  Both features
fully leverage from the I/O buffering.
@end table


@subsubheading History

@ossp{} @sa{} was invented in August 2001 by Ralf S. Engelschall
@email{rse@@engelschall.com} under contract with Cable & Wireless
@url{http://www.cw.com/} for use inside the @ossp{} project.

Its creation was prompted by the requirement to implement an
@acronym{SMTP} logging channel for the @ossp{} @strong{l2} library.  Its
initial code was derived from a predecessor sub--library originally
written for socket address abstraction inside the @ossp{}
@strong{lmtp2nntp} tool.


@subsubheading Author

Ralf S. Engelschall@*
@email{rse@@engelschall.com}@*
@url{www.engelschall.com}

@c page
@node sa license
@appendixsec License


@noindent
Copyright @copyright{} 2001-2005 Ralf S. Engelschall @email{rse@@engelschall.com}@*
Copyright @copyright{} 2001-2005 The OSSP Project @url{http://www.ossp.org/}@*
Copyright @copyright{} 2001-2005 Cable & Wireless @url{http://www.cw.com/}


@noindent
Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.


@c page
@node sa data types
@appendixsec Data types


@cindex @code{SA_OK}
@cindex @code{SA_ERR_ARG}
@cindex @code{SA_ERR_USE}
@cindex @code{SA_ERR_MEM}
@cindex @code{SA_ERR_MTC}
@cindex @code{SA_ERR_EOF}
@cindex @code{SA_ERR_TMT}
@cindex @code{SA_ERR_SYS}
@cindex @code{SA_ERR_IMP}
@cindex @code{SA_ERR_INT}


@noindent
@ossp{} @sa{} uses three data types in its @api{}.


@deftp {Return Code Type} sa_rc_t
This is an exported enumerated integer type with the following possible
values:

@table @code
@item SA_OK
Everything Ok
@item SA_ERR_ARG
Invalid Argument
@item SA_ERR_USE
Invalid Use Or Context
@item SA_ERR_MEM
Not Enough Memory
@item SA_ERR_MTC
Matching Failed
@item SA_ERR_EOF
End Of Communication
@item SA_ERR_TMT
Communication Timeout
@item SA_ERR_SYS
Operating System Error (see errno)
@item SA_ERR_IMP
Implementation Not Available
@item SA_ERR_INT
Internal Error
@end table
@end deftp


@deftp {Socket Address Abstraction Type} sa_addr_t
This is an opaque data type representing a socket address.  Only
pointers to this abstract data type are used in the @api{}.
@end deftp


@deftp {Socket Abstraction Type} sa_t
This is an opaque data type representing a socket.  Only pointers to
this abstract data type are used in the @api{}.
@end deftp


@c page
@node sa functions
@appendixsec Functions


@menu
* sa address object::           Address object operations.
* sa address operations::       Address operations.
* sa socket object::            Socket object operations.
* sa socket parameter::         Socket parameter operations.
* sa socket connection::        Socket connection operations.
* sa socket stream::            Socket stream communication
* sa socket datagram::          Socket datagram communication.
* sa error::                    Error handling.
@end menu


@noindent
@ossp{} @sa{} provides a bunch of @api{} functions, all modelled
after the same prototype:

@example
sa_rc_t sa_name(sa_[addr_]_t * ...)
@end example

This means, every function returns @code{sa_rc_t} to indicate its
success (@code{SA_OK}) or failure (@code{SA_ERR_XXX}) by returning a
return code (the corresponding describing text can be determined by
passing this return code to @code{sa_error()}).  Each function name
starts with the common prefix @code{sa_} and receives a @code{sa_t} (or
@code{sa_addr_t}) object handle on which it operates as its first
argument.


@c ------------------------------------------------------------

@c page
@node sa address object
@appendixsubsec Address object operations


@noindent
This @api{} part provides operations for the creation and
destruction of address abstraction @code{sa_addr_t}.


@deftypefun sa_rc_t sa_addr_create (sa_addr_t ** @var{saa})
Create a socket address abstraction object.  The object is stored in
@var{saa} on success.

Example: @code{sa_addr_t *saa; sa_addr_create(&saa);}
@end deftypefun


@deftypefun sa_rc_t sa_addr_destroy (sa_addr_t * @var{saa})
Destroy a socket address abstraction object.  The object @var{saa} is
invalid after this call succeeded.

Example: @code{sa_addr_destroy(saa);}
@end deftypefun


@c ------------------------------------------------------------

@c page
@node sa address operations
@appendixsubsec Address operations


@noindent
This @api{} part provides operations for working with the address
abstraction @code{sa_addr_t}.


@deftypefun sa_rc_t sa_addr_u2a (sa_addr_t * @var{saa}, const char * @var{uri}, ...)
Import an address by converting from an @acronym{URI} specification to
the corresponding address abstraction.

The supported syntax for @var{uri} is: @code{unix:@var{path}} for Unix
Domain addresses and
@code{inet://@var{addr}:@var{port}[#@var{protocol}]} for Internet Domain
addresses.  Examples:

@example
sa_addr_u2a(saa,"inet://192.168.0.1:smtp");
sa_addr_u2a(saa,"unix:/var/www/index.html");
@end example

@var{path} can be an absolute or relative filesystem path to an existing
or not--existing file.

@var{addr} can be:

@itemize
@item
an IPv4 address in dotted decimal notation (@code{127.0.0.1});

@item
an IPv6 address in colon--separated (optionally abbreviated) hexadecimal
notation (@code{::1});

@item
a to--be--resolved hostname (@code{localhost.example.com}).
@end itemize

@var{port} has to be either a decimal port in the range 1...65535 or a
port name (@code{smtp}).  If @code{port} is specified as a name, it is
resolved as a @tcp{} port by default.

To force resolving a @var{port} name via a particular protocol,
@var{protocol} can be specified as either @code{tcp} or @code{udp}.

The result is stored in @var{saa} on success.
@end deftypefun


@deftypefun sa_rc_t sa_addr_s2a (sa_addr_t * @var{saa}, const struct sockaddr * @var{sabuf}, socklen_t @var{salen})
Import an address by converting from a traditional @code{struct
sockaddr} object to the corresponding address abstraction.

The accepted addresses for @var{sabuf} are: @code{struct sockaddr_un}
(@code{AF_LOCAL}), @code{struct sockaddr_in} (@code{AF_INET}) and
@code{struct sockaddr_in6} (@code{AF_INET6}).

The @var{salen} is the corresponding @code{sizeof(...)} of the
particular underyling structure.

The result is stored in @var{saa} on success.

Example:

@example
sockaddr_in in;
sa_addr_s2a(saa, (struct sockaddr *)&in, (socklen_t)sizeof(in));
@end example
@end deftypefun


@deftypefun sa_rc_t sa_addr_a2u (sa_addr_t * @var{saa}, char ** @var{uri})
Export an address by converting from the address abstraction to the
corresponding @acronym{URI} specification.

The result is a string of the form @code{unix:@var{path}} for Unix
Domain addresses and @code{inet://@var{addr}:@var{port}} for Internet
Domain addresses.  Notice that @var{addr} and @var{port} are returned in
numerical (unresolved) way.  Additionally, because usually one cannot map
bidirectionally between @tcp{} or @udp{} port names and the numerical
value, there is no distinction between @tcp{} and @udp{} here.

The result is stored in @var{uri} on success.  The caller has to
@code{free()} the @var{uri} buffer later.

Example: @code{char *uri; sa_addr_a2u(saa, &uri);}
@end deftypefun


@deftypefun sa_rc_t sa_addr_a2s (sa_addr_t * @var{saa}, struct sockaddr ** @var{sabuf}, socklen_t * @var{salen})
Export an address by converting from the address abstraction to the
corresponding traditional @code{struct sockaddr} object.

The result is one of the following particular underlying address
structures: @code{struct sockaddr_un} (@code{AF_LOCAL}), @code{struct
sockaddr_in} (@code{AF_INET}) and @code{struct sockaddr_in6}
(@code{AF_INET6}).

The result is stored in @var{sabuf} and @var{salen} on success.  The
caller has to @code{free()} the @var{sabuf} buffer later.

Example:

@example
struct sockaddr sabuf;
socklen_t salen;
sa_addr_a2s(saa, &sa, &salen);
@end example
@end deftypefun


@deftypefun sa_rc_t sa_addr_match (sa_addr_t * @var{saa1}, sa_addr_t * @var{saa2}, size_t @var{prefixlen})
Match two address abstractions up to a specified prefix.

This compares the addresses @var{saa1} and @var{saa2} by only taking the
prefix part of length @var{prefixlen} into account.  @var{prefixlen} is
number of filesystem path characters for Unix Domain addresses and
number of bits for Internet Domain addresses.

In case of Internet Domain addresses, the addresses are matched in
network byte order and the port (counting as an additional bit/item of
length 1) is virtually appended to the address for matching.

Specifying @var{prefixlen} as @code{-1} means matching the whole address
(but without the virtually appended port) without having to know how
long the underlying address representation (length of path for Unix
Domain addresses, 32+1 [IPv4] or 128+1 [IPv6] for Internet Domain
addresses) is.

Specifying @var{prefixlen} as @code{-2} is equal to @code{-1} but
additionally the port is matched, too.

This especially can be used to implement Access Control Lists
(@acronym{ACL}) without having to fiddle around with the underlying
representation.  For this, make @var{saa1} the to be checked address and
@code{saa2} plus @var{prefixlen} the @acronym{ACL} pattern as shown in
the following example.

@example
sa_addr_t *srv_sa;
sa_addr_t *clt_saa;
sa_t      *clt_sa;
sa_addr_t *acl_saa;
char      *acl_addr = "192.168.0.0";
int        acl_len  = 24;
...
sa_addr_u2a(&acl_saa, "inet://%s:0", acl_addr);
...
while (sa_accept(srv_sa, &clt_saa, &clt_sa) == SA_OK) @{
  if (sa_addr_match(clt_saa, acl_saa, acl_len) != SA_OK) @{
    /* connection refused */
    ...
    sa_addr_destroy(clt_saa);
    sa_destroy(clt_sa);
    continue;
  @}
  ...
@}
...
@end example
@end deftypefun


@c ------------------------------------------------------------

@c page
@node sa socket object
@appendixsubsec Socket object operations


@noindent
This @api{} part provides operations for the creation and
destruction of socket abstraction @code{sa_t}.


@deftypefun sa_rc_t sa_create (sa_t ** @var{sa})
Create a socket abstraction object.  The object is stored in @var{sa} on
success.

Example: @code{sa_t *sa; sa_create(&sa);}
@end deftypefun


@deftypefun sa_rc_t sa_destroy (sa_t * @var{sa})
Destroy a socket abstraction object.  The object @var{sa} is invalid
after this call succeeded.

Example: @code{sa_destroy(sa);}
@end deftypefun


@c ------------------------------------------------------------

@c page
@node sa socket parameter
@appendixsubsec Socket parameter operations


@noindent
This @api{} part provides operations for parameterizing the
socket abstraction @code{sa_t}.


@deftypefun sa_rc_t sa_type (sa_t * @var{sa}, sa_type_t @var{type})
Assign a particular communication protocol type to the socket
abstraction object.

A socket can only be assigned a single protocol type at any time.
Nevertheless one can switch the type of a socket abstraction object at
any time in order to reuse it for a different communication.  Just keep
in mind that switching the type will stop a still ongoing communication
by closing the underlying socket.

Possible values for @var{type} are @code{SA_TYPE_STREAM} (stream
communication) and @code{SA_TYPE_DATAGRAM} (datagram communication).  The
default communication protocol type is @code{SA_TYPE_STREAM}.

Example: @code{sa_type(sa, SA_TYPE_STREAM);}
@end deftypefun


@deftypefun sa_rc_t sa_timeout (sa_t * @var{sa}, sa_timeout_t @var{id}, long @var{sec}, long @var{usec})
Assign one or more communication timeouts to the socket abstraction
object.

Possible values for @var{id} are:

@table @code
@item SA_TIMEOUT_ACCEPT
affecting @code{sa_accept()},
@item SA_TIMEOUT_CONNECT
affecting @code{sa_connect()},
@item SA_TIMEOUT_READ
affecting @code{sa_read()}, @code{sa_readln()} and @code{sa_recv()}
@item SA_TIMEOUT_WRITE
affecting @code{sa_write()}, @code{sa_writef()}, @code{sa_send()}, and
@code{sa_sendf()}.
@end table

Additionally you can set all four timeouts at once by using
@code{SA_TIMEOUT_ALL}.  The default is that no communication timeouts are
used which is equal to @code{@var{sec}=0} @code{@var{usec}=0}.

Example: @code{sa_timeout(sa, SA_TIMEOUT_ALL, 30, 0);}
@end deftypefun


@deftypefun sa_rc_t sa_buffer (sa_t * @var{sa}, sa_buffer_t @var{id}, size_t @var{size})
Assign I/O communication buffers to the socket abstraction object.

Possible values for @var{id} are:

@table @code
@item SA_BUFFER_READ
affecting @code{sa_read()} and @code{sa_readln()},
@item SA_BUFFER_WRITE
affecting @code{sa_write()} and @code{sa_writef()}.
@end table

The default is that no communication buffers are used which is equal to
@code{@var{size}=0}.

Example: @code{sa_buffer(sa, SA_BUFFER_READ, 16384);}
@end deftypefun


@deftypefun sa_rc_t sa_option (sa_t * @var{sa}, sa_option_t @var{id}, ...)
Adjust various options of the socket abstraction object.

The adjusted option is controlled by @var{id}.  The number and type of
the expected following argument(s) are dependent on the particular
option.  Currently the following options are implemented (option
arguments in parenthesis):

@table @code
@item SA_OPTION_NAGLE (int @var{yesno})
for enabling (@var{yesno}=1) or disabling (@var{yesno} == 0) Nagle's
Algorithm (see RFC898 and @code{TCP_NODELAY} of setsockopt(2)).

@item SA_OPTION_LINGER (int @var{amount})
for enabling (@var{amount} == @var{seconds} != 0) or disabling
(@var{amount} == 0) lingering on close (see @code{SO_LINGER} of
@code{setsockopt()}).

@quotation
Notice: using @var{seconds} > 0 results in a regular (maximum of
@var{seconds} lasting) lingering on close while using @var{seconds} < 0
results in the special case of a @tcp{} @acronym{RST} based connection
termination on close.
@end quotation

@item SA_OPTION_REUSEADDR (int @var{yesno})
for enabling (@var{yesno} == 1) or disabling (@var{yesno} == 0) the
reusability of the address on binding via @code{sa_bind()} (see
@code{SO_REUSEADDR} of @code{setsockopt()}).

@item SA_OPTION_REUSEPORT (int @var{yesno})
for enabling (@var{yesno} == 1) or disabling (@var{yesno} == 0) the
reusability of the port on binding via @code{sa_bind()} (see
@code{SO_REUSEPORT} of @code{setsockopt()}).

@item SA_OPTION_NONBLOCK (int @var{yesno})
for enabling (@var{yesno} == 1) or disabling (@var{yesno} == 0)
non--blocking I/O mode (see @code{O_NONBLOCK} of @code{fcntl()}).
@end table

Example: @code{sa_option(sa, SA_OPTION_NONBLOCK, 1);}
@end deftypefun


@deftypefun sa_rc_t sa_syscall (sa_t * @var{sa}, sa_syscall_t @var{id}, void * @var{fptr})(), void * @var{fctx})
Divert I/O communication related system calls to user supplied callback
functions.

This allows you to override mostly all I/O related system calls @ossp{}
@sa{} internally performs while communicating.  This can be used to adapt
@ossp{} @sa{} to different run--time environments and requirements
without having to change the source code.  Usually this is used to divert
the system calls to the variants of a user--land multithreading facility
like @acronym{GNU} Pth.

The function supplied as @var{fptr} is required to fulfill the
@api{} of the replaced system call, i.e., it has to have the same
prototype (if @var{fctx} is @code{NULL}).  If @var{fctx} is not
@code{NULL}, this prototype has to be extended to accept an additional
first argument of type @code{void *} which receives the value of
@var{fctx}.  It is up to the callback function whether to pass the call
through to the replaced actual system call or not.

Possible values for @var{id} are (expected prototypes behind @var{fptr}
are given in parenthesis):

@table @code
@item SA_SYSCALL_CONNECT
@code{int (*)([void *,] int, const struct sockaddr *, socklen_t)}, see
@code{connect()}.

@item SA_SYSCALL_ACCEPT
@code{int (*)([void *,] int, struct sockaddr *, socklen_t *)}, see
@code{accept()}.

@item SA_SYSCALL_SELECT
@code{int (*)([void *,] int, fd_set *, fd_set *, fd_set *, struct
timeval *)}, see @code{select()}.

@item SA_SYSCALL_READ
@code{ssize_t (*)([void *,] int, void *, size_t)}, see @code{read()}.

@item SA_SYSCALL_WRITE
@code{ssize_t (*)([void *,] int, const void *, size_t)}, see
@code{write()}.

@item SA_SYSCALL_RECVFROM
@code{ssize_t (*)([void *,] int, void *, size_t, int, struct sockaddr *,
socklen_t *)}, see @code{recvfrom()}.

@item SA_SYSCALL_SENDTO
@code{ssize_t (*)([void *,] int, const void *, size_t, int, const struct
sockaddr *, socklen_t)}, see @code{sendto()}.
@end table

Example:

@example
ssize_t
trace_read(void *ctx, int fd, void *buf, size_t len)
@{
  FILE *fp = (FILE *)ctx;
  ssize_t rv;
  int errno_saved;

  rv = read(fd, buf, len);
  errno_saved = errno;
  fprintf(fp, "read(%d, %lx, %d) = %d\n", fd, (long)buf, len, rv);
  errno = errno_saved;
  return rv;
@}

...
FILE *trace_fp = ...;
sa_syscall(sa, SA_SC_READ, trace_read, trace_fp);
...
@end example
@end deftypefun


@c ------------------------------------------------------------

@c page
@node sa socket connection
@appendixsubsec Socket connection operations


@noindent
This @api{} part provides connection operations for
stream--oriented data communication through the socket abstraction
@code{sa_t}.


@deftypefun sa_rc_t sa_bind (sa_t * @var{sa}, sa_addr_t * @var{laddr})
Bind socket abstraction object to a local protocol address.

This assigns the local protocol address @var{laddr}.  When a socket is
created, it exists in an address family space but has no protocol
address assigned.  This call requests that @var{laddr} be used as the
local address.  For servers this is the address they later listen on (see
@code{sa_listen()}) for incoming connections, for clients this is the
address used for outgoing connections (see
@code{sa_connect()}).  Internally this directly maps to @code{bind()}.

Example: @code{sa_bind(sa, laddr);}
@end deftypefun


@deftypefun sa_rc_t sa_connect (sa_t * @var{sa}, sa_addr_t * @var{raddr})
Initiate an outgoing connection on a socket abstraction object.   This
performs a connect to the remote address @var{raddr}.

If the socket is of type @code{SA_TYPE_DATAGRAM}, this call specifies
the peer with which the socket is to be associated; this address is that
to which datagrams are to be sent, and the only address from which
datagrams are to be received.

If the socket is of type @code{SA_TYPE_STREAM}, this call attempts to
make a connection to the remote socket.  Internally this directly maps to
connect(2).

Example: @code{sa_connect(sa, raddr);}
@end deftypefun


@deftypefun sa_rc_t sa_listen (sa_t * @var{sa}, int @var{backlog})
Listen for incoming connections on a socket abstraction object.

A willingness to accept incoming connections and a queue limit for
incoming connections are specified by this call.  The @var{backlog}
argument defines the maximum length the queue of pending connections may
grow to.   Internally this directly maps to @code{listen()}.

Example: @code{sa_listen(sa, 128);}
@end deftypefun


@deftypefun sa_rc_t sa_accept (sa_t * @var{sa}, sa_addr_t ** @var{caddr}, sa_t ** @var{csa})
Accept incoming connection on a socket abstraction object.

This accepts an incoming connection by extracting the first connection
request on the queue of pending connections.  It creates a new socket
abstraction object (returned in @var{csa}) and a new socket address
abstraction object (returned in @var{caddr}) describing the
connection.  The caller has to destroy these objects later.  If no pending
connections are present on the queue, it blocks the caller until a
connection is present.

Example:

@example
sa_addr_t *clt_saa;
sa_t      *clt_sa;
...
while (sa_accept(srv_sa, &clt_saa, &clt_sa) == SA_OK) @{
    ...
@}
@end example
@end deftypefun


@deftypefun sa_rc_t sa_getremote (sa_t * @var{sa}, sa_addr_t ** @var{raddr})
Get address abstraction of remote side of communication.

This determines the address of the communication peer and creates a new
socket address abstraction object (returned in @var{raddr}) describing
the peer address.  The application has to destroy @var{raddr} later with
@code{sa_addr_destroy()}.  Internally this maps to @code{getpeername()}.

Example: @code{sa_addr_t *raddr; sa_getremote(sa, &raddr);}
@end deftypefun


@deftypefun sa_rc_t sa_getlocal (sa_t * @var{sa}, sa_addr_t ** @var{laddr})
Get address abstraction of local side of communication.

This determines the address of the local communication side and creates
a new socket address abstraction object (returned in @var{laddr})
describing the local address.  The application has to destroy @var{laddr}
later with @code{sa_addr_destroy()}.  Internally this maps to
@code{getsockname()}.

Example: @code{sa_addr_t *laddr; sa_getlocal(sa, &laddr);}
@end deftypefun


@deftypefun sa_rc_t sa_shutdown (sa_t * @var{sa}, char * @var{flags})
Shut down part of the full--duplex connection.

This performs a shut down of the connection described in @var{sa}.  The
flags string can be either:

@table @code
@item "r"
indicating the read channel of the communication is shut down only,
@item "w"
indicating the write channel of the communication is shut down only,
@item "rw"
indicating both the read and write channels of the communication are
shut down.
@end table

Internally this directly maps to @code{shutdown()}.

Example: @code{sa_shutdown(sa, "w");}
@end deftypefun


@c ------------------------------------------------------------

@c page
@node sa socket stream
@appendixsubsec Socket input/output operations (stream communication)


@noindent
This @api{} part provides I/O operations for stream--oriented
data communication through the socket abstraction @code{sa_t}.


@deftypefun sa_rc_t sa_getfd (sa_t * @var{sa}, int * @var{fd})
Get underlying socket filedescriptor.

This peeks into the underlying socket filedescriptor @ossp{} @sa{}
allocated internally for the communication.  This can be used for
adjusting the socket communication (via @code{fcntl()},
@code{setsockopt()}, etc) directly.

Think twice before using this, then think once more.  After all that,
think again.  With enough thought, the need for directly manipulating the
underlying socket can often be eliminated.  At least remember that all
your direct socket operations fully by--pass @ossp{} @sa{} and this way
can lead to nasty side--effects.

Example: @code{int fd; sa_getfd(sa, &fd);}
@end deftypefun


@deftypefun sa_rc_t sa_read (sa_t * @var{sa}, char * @var{buf}, size_t @var{buflen}, size_t * @var{bufdone})
Read a chunk of data from socket into own buffer.

This reads from the socket (optionally through the internal read buffer)
up to a maximum of @var{buflen} bytes into buffer @var{buf}.  The actual
number of read bytes is stored in @var{bufdone}.  This internally maps to
@code{read()}.

Example:

@example
char buf[1024];
size_t n;
sa_read(sa, buf, sizeof(buf), &n);
@end example
@end deftypefun


@deftypefun sa_rc_t sa_readln (sa_t * @var{sa}, char * @var{buf}, size_t @var{buflen}, size_t * @var{bufdone})
Read a line of data from socket into own buffer.

This reads from the socket (optionally through the internal read buffer)
up to a maximum of @var{buflen} bytes into buffer @var{buf}, but only as
long as no line terminating newline character (0x0a) was found.  The line
terminating newline character is stored in the buffer plus a (not
counted) terminating @code{NUL} character (@code{\0}), too.  The actual
number of read bytes is stored in @var{bufdone}.  This internally maps to
@code{sa_read()}.

Keep in mind that for efficiency reasons, line-oriented I/O usually
always should be performed with read buffer (see @code{sa_option()} and
@code{SA_BUFFER_READ}).  Without such a read buffer, the performance is
cruel, because single character @code{read()} operations would be
performed on the underlying socket.

Example:

@example
char buf[1024];
size_t n;
sa_readln(sa, buf, sizeof(buf), &n);
@end example
@end deftypefun


@deftypefun sa_rc_t sa_write (sa_t * @var{sa}, const char * @var{buf}, size_t @var{buflen}, size_t * @var{bufdone})
Write a chunk of data to socket from own buffer.

This writes to the socket (optionally through the internal write buffer)
@var{buflen} bytes from buffer @var{buf}.  In case of a partial write,
the actual number of written bytes is stored in @var{bufdone}.  This
internally maps to @code{write()}.

Example: @code{sa_write(sa, cp, strlen(cp), NULL);}
@end deftypefun


@deftypefun sa_rc_t sa_writef (sa_t * @var{sa}, const char * @var{fmt}, ...)
Write formatted data data to socket.

This formats a string according to the @code{printf()} style format
specification @var{fmt} and sends the result to the socket (optionally
through the internal write buffer).  In case of a partial socket write,
the not written data of the formatted string is internally
discarded.  Hence using a write buffer is strongly recommended here (see
@code{sa_option()} and @code{SA_BUFFER_WRITE}).  This internally maps to
@code{sa_write()}.

The underlying string formatting engine is just a minimal one and for
security and independence reasons intentionally not directly based on
@code{s[n]printf()}.  It understands only the following format
specifications: @code{%%}, @code{%c} (@code{char}), @code{%s}
(@code{char *}) and @code{%d} (@code{int}) without any precision and
padding possibilities.  It is intended for minimal formatting only.  If
you need more sophisticated formatting, you have to format first into an
own buffer via @code{s[n]printf()} and then write this to the socket via
@code{sa_write()} instead.

Example: @code{sa_writef(sa, "%s=%d\n", cp, i);}
@end deftypefun


@deftypefun sa_rc_t sa_flush (sa_t * @var{sa})
Flush still pending outgoing data to socket.

This writes all still pending outgoing data for the internal write
buffer (see @code{sa_option()} and @code{SA_BUFFER_WRITE}) to the
socket.  This internally maps to @code{write()}.

Example: @code{sa_flush(sa);}
@end deftypefun


@c ------------------------------------------------------------

@c page
@node sa socket datagram
@appendixsubsec Socket input/output operations (datagram communication)


@noindent
This @api{} part provides I/O operations for datagram--oriented
data communication through the socket abstraction @code{sa_t}.


@deftypefun sa_rc_t sa_recv (sa_t * @var{sa}, sa_addr_t ** @var{raddr}, char * @var{buf}, size_t @var{buflen}, size_t * @var{bufdone})
Receive a chunk of data from remote address via socket into own buffer.

This receives from the remote address specified in @var{raddr} via the
socket up to a maximum of @var{buflen} bytes into buffer @var{buf}.  The
actual number of received bytes is stored in @var{bufdone}.  This
internally maps to @code{recvfrom()}.

Example:

@example
char buf[1024];
size_t n;
sa_recv(sa, buf, sizeof(buf), &n, saa);
@end example
@end deftypefun


@deftypefun sa_rc_t sa_send (sa_t * @var{sa}, sa_addr_t * @var{raddr}, const char * @var{buf}, size_t @var{buflen}, size_t * @var{bufdone})
Send a chunk of data to remote address via socket from own buffer.

This sends to the remote address specified in @var{raddr} via the socket
@var{buflen} bytes from buffer @var{buf}.  The actual number of sent
bytes is stored in @var{bufdone}.  This internally maps to sendto(2).

Example: @code{sa_send(sa, buf, strlen(buf), NULL, saa);}
@end deftypefun


@deftypefun sa_rc_t sa_sendf (sa_t * @var{sa}, sa_addr_t * @var{raddr}, const char * @var{fmt}, ...)
Send formatted data data to remote address via socket.

This formats a string according to the @code{printf()} style format
specification @var{fmt} and sends the result to the socket as a single
piece of data chunk.  In case of a partial socket write, the not written
data of the formatted string is internally discarded.

The underlying string formatting engine is just a minimal one and for
security and independence reasons intentionally not directly based on
@code{s[n]printf()}.  It understands only the following format
specifications: @code{%%}, @code{%c} (@code{char}), @code{%s}
(@code{char *}) and @code{%d} (@code{int}) without any precision and
padding possibilities.

It is intended for minimal formatting only.  If you need more
sophisticated formatting, you have to format first into an own buffer
via @code{s[n]printf()} and then send this to the remote address via
@code{sa_send()} instead.

Example: @code{sa_sendf(sa, saa, "%s=%d\n", cp, i);}
@end deftypefun


@c ------------------------------------------------------------

@c page
@node sa error
@appendixsubsec Socket error handling


@noindent
This @api{} part provides error handling operations only.


@deftypefun {char *} sa_error (sa_rc_t @var{rv})
Return the string representation corresponding to the return code value
@var{rv}.  The returned string has to be treated read--only by the
application and is not required to be deallocated.
@end deftypefun


@c ------------------------------------------------------------

@c page
@node sa references
@section References


@subsubheading Standards


@noindent
R. Gilligan, S. Thomson, J. Bound, W. Stevens:@*
@emph{Basic Socket Interface Extensions for IPv6},@*
@strong{RFC 2553}, March 1999.

@noindent
W. Stevens:@*
@emph{Advanced Sockets API for IPv6},@*
@strong{RFC 2292}, February 1998.

@noindent
R. Fielding, L. Masinter, T. Berners-Lee:@*
@emph{Uniform Resource Identifiers: Generic Syntax},
@strong{RFC 2396}, August 1998.

@noindent
R. Hinden, S. Deering:@*
@emph{IP Version 6 Addressing Architecture},@*
@strong{RFC 2373}, July 1998.

@noindent
R. Hinden, B. Carpenter, L. Masinter:@*
@emph{Format for Literal IPv6 Addresses in URL's},@*
@strong{RFC 2732}, December 1999.


@subsubheading Papers

@noindent
Stuart Sechrest:@*
@emph{An Introductory 4.4BSD Interprocess Communication Tutorial},@*
FreeBSD 4.4 (@file{/usr/share/doc/psd/20.ipctut/}).

@noindent
Samuel J. Leffler, Robert S. Fabry, William N. Joy, Phil Lapsley:@*
@emph{An Advanced 4.4BSD Interprocess Communication Tutorial},@*
FreeBSD 4.4 (@file{/usr/share/doc/psd/21.ipc/}).

@noindent
Craig Metz:@*
@emph{Protocol Independence Using the Sockets API},@*
@url{http://www.usenix.org/publications/library/proceedings/usenix2000/freenix/metzprotocol.html},@*
USENIX Annual Technical Conference, June 2000.


@c page
@node Package License
@appendix @gnu{} General Public License

@c The GNU General Public License.
@center Version 3, 29 June 2007

@c This file is intended to be included within another document,
@c hence no sectioning command or @node.

@display
Copyright @copyright{} 2007 Free Software Foundation, Inc. @url{http://fsf.org/}

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.
@end display

@heading Preamble

The GNU General Public License is a free, copyleft license for
software and other kinds of works.

The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom
to share and change all versions of a program---to make sure it remains
free software for all its users.  We, the Free Software Foundation,
use the GNU General Public License for most of our software; it
applies also to any other work released this way by its authors.  You
can apply it to your programs, too.

When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you
have certain responsibilities if you distribute copies of the
software, or if you modify it: responsibilities to respect the freedom
of others.

For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too,
receive or can get the source code.  And you must show them these
terms so they know their rights.

Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the
manufacturer can do so.  This is fundamentally incompatible with the
aim of protecting users' freedom to change the software.  The
systematic pattern of such abuse occurs in the area of products for
individuals to use, which is precisely where it is most unacceptable.
Therefore, we have designed this version of the GPL to prohibit the
practice for those products.  If such problems arise substantially in
other domains, we stand ready to extend this provision to those
domains in future versions of the GPL, as needed to protect the
freedom of users.

Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish
to avoid the special danger that patents applied to a free program
could make it effectively proprietary.  To prevent this, the GPL
assures that patents cannot be used to render the program non-free.

The precise terms and conditions for copying, distribution and
modification follow.

@heading TERMS AND CONDITIONS

@enumerate 0
@item Definitions.

``This License'' refers to version 3 of the GNU General Public License.

``Copyright'' also means copyright-like laws that apply to other kinds
of works, such as semiconductor masks.

``The Program'' refers to any copyrightable work licensed under this
License.  Each licensee is addressed as ``you''.  ``Licensees'' and
``recipients'' may be individuals or organizations.

To ``modify'' a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of
an exact copy.  The resulting work is called a ``modified version'' of
the earlier work or a work ``based on'' the earlier work.

A ``covered work'' means either the unmodified Program or a work based
on the Program.

To ``propagate'' a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

To ``convey'' a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user
through a computer network, with no transfer of a copy, is not
conveying.

An interactive user interface displays ``Appropriate Legal Notices'' to
the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

@item Source Code.

The ``source code'' for a work means the preferred form of the work for
making modifications to it.  ``Object code'' means any non-source form
of a work.

A ``Standard Interface'' means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

The ``System Libraries'' of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
``Major Component'', in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

The ``Corresponding Source'' for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

The Corresponding Source need not include anything that users can
regenerate automatically from other parts of the Corresponding Source.

The Corresponding Source for a work in source code form is that same
work.

@item Basic Permissions.

All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

You may make, run and propagate covered works that you do not convey,
without conditions so long as your license otherwise remains in force.
You may convey covered works to others for the sole purpose of having
them make modifications exclusively for you, or provide you with
facilities for running those works, provided that you comply with the
terms of this License in conveying all material for which you do not
control copyright.  Those thus making or running the covered works for
you must do so exclusively on your behalf, under your direction and
control, on terms that prohibit them from making any copies of your
copyrighted material outside their relationship with you.

Conveying under any other circumstances is permitted solely under the
conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

@item Protecting Users' Legal Rights From Anti-Circumvention Law.

No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such
circumvention is effected by exercising rights under this License with
respect to the covered work, and you disclaim any intention to limit
operation or modification of the work as a means of enforcing, against
the work's users, your or third parties' legal rights to forbid
circumvention of technological measures.

@item Conveying Verbatim Copies.

You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

@item Conveying Modified Source Versions.

You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these
conditions:

@enumerate a
@item
The work must carry prominent notices stating that you modified it,
and giving a relevant date.

@item
The work must carry prominent notices stating that it is released
under this License and any conditions added under section 7.  This
requirement modifies the requirement in section 4 to ``keep intact all
notices''.

@item
You must license the entire work, as a whole, under this License to
anyone who comes into possession of a copy.  This License will
therefore apply, along with any applicable section 7 additional terms,
to the whole of the work, and all its parts, regardless of how they
are packaged.  This License gives no permission to license the work in
any other way, but it does not invalidate such permission if you have
separately received it.

@item
If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your work
need not make them do so.
@end enumerate

A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
``aggregate'' if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

@item  Conveying Non-Source Forms.

You may convey a covered work in object code form under the terms of
sections 4 and 5, provided that you also convey the machine-readable
Corresponding Source under the terms of this License, in one of these
ways:

@enumerate a
@item
Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium customarily
used for software interchange.

@item
Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a written
offer, valid for at least three years and valid for as long as you
offer spare parts or customer support for that product model, to give
anyone who possesses the object code either (1) a copy of the
Corresponding Source for all the software in the product that is
covered by this License, on a durable physical medium customarily used
for software interchange, for a price no more than your reasonable
cost of physically performing this conveying of source, or (2) access
to copy the Corresponding Source from a network server at no charge.

@item
Convey individual copies of the object code with a copy of the written
offer to provide the Corresponding Source.  This alternative is
allowed only occasionally and noncommercially, and only if you
received the object code with such an offer, in accord with subsection
6b.

@item
Convey the object code by offering access from a designated place
(gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge.  You need not require recipients to copy the
Corresponding Source along with the object code.  If the place to copy
the object code is a network server, the Corresponding Source may be
on a different server (operated by you or a third party) that supports
equivalent copying facilities, provided you maintain clear directions
next to the object code saying where to find the Corresponding Source.
Regardless of what server hosts the Corresponding Source, you remain
obligated to ensure that it is available for as long as needed to
satisfy these requirements.

@item
Convey the object code using peer-to-peer transmission, provided you
inform other peers where the object code and Corresponding Source of
the work are being offered to the general public at no charge under
subsection 6d.

@end enumerate

A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

A ``User Product'' is either (1) a ``consumer product'', which means any
tangible personal property which is normally used for personal,
family, or household purposes, or (2) anything designed or sold for
incorporation into a dwelling.  In determining whether a product is a
consumer product, doubtful cases shall be resolved in favor of
coverage.  For a particular product received by a particular user,
``normally used'' refers to a typical or common use of that class of
product, regardless of the status of the particular user or of the way
in which the particular user actually uses, or expects or is expected
to use, the product.  A product is a consumer product regardless of
whether the product has substantial commercial, industrial or
non-consumer uses, unless such uses represent the only significant
mode of use of the product.

``Installation Information'' for a User Product means any methods,
procedures, authorization keys, or other information required to
install and execute modified versions of a covered work in that User
Product from a modified version of its Corresponding Source.  The
information must suffice to ensure that the continued functioning of
the modified object code is in no case prevented or interfered with
solely because modification has been made.

If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or
updates for a work that has been modified or installed by the
recipient, or for the User Product in which it has been modified or
installed.  Access to a network may be denied when the modification
itself materially and adversely affects the operation of the network
or violates the rules and protocols for communication across the
network.

Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

@item Additional Terms.

``Additional permissions'' are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders
of that material) supplement the terms of this License with terms:

@enumerate a
@item
Disclaiming warranty or limiting liability differently from the terms
of sections 15 and 16 of this License; or

@item
Requiring preservation of specified reasonable legal notices or author
attributions in that material or in the Appropriate Legal Notices
displayed by works containing it; or

@item
Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or

@item
Limiting the use for publicity purposes of names of licensors or
authors of the material; or

@item
Declining to grant rights under trademark law for use of some trade
names, trademarks, or service marks; or

@item
Requiring indemnification of licensors and authors of that material by
anyone who conveys the material (or modified versions of it) with
contractual assumptions of liability to the recipient, for any
liability that these contractual assumptions directly impose on those
licensors and authors.
@end enumerate

All other non-permissive additional terms are considered ``further
restrictions'' within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions; the
above requirements apply either way.

@item Termination.

You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

@item Acceptance Not Required for Having Copies.

You are not required to accept this License in order to receive or run
a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

@item Automatic Licensing of Downstream Recipients.

Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

An ``entity transaction'' is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

@item Patents.

A ``contributor'' is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's ``contributor version''.

A contributor's ``essential patent claims'' are all patent claims owned
or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, ``control'' includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

In the following three paragraphs, a ``patent license'' is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To ``grant'' such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  ``Knowingly relying'' means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

A patent license is ``discriminatory'' if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on
the non-exercise of one or more of the rights that are specifically
granted under this License.  You may not convey a covered work if you
are a party to an arrangement with a third party that is in the
business of distributing software, under which you make payment to the
third party based on the extent of your activity of conveying the
work, and under which the third party grants, to any of the parties
who would receive the covered work from you, a discriminatory patent
license (a) in connection with copies of the covered work conveyed by
you (or copies made from those copies), or (b) primarily for and in
connection with specific products or compilations that contain the
covered work, unless you entered into that arrangement, or that patent
license was granted, prior to 28 March 2007.

Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

@item No Surrender of Others' Freedom.

If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey
a covered work so as to satisfy simultaneously your obligations under
this License and any other pertinent obligations, then as a
consequence you may not convey it at all.  For example, if you agree
to terms that obligate you to collect a royalty for further conveying
from those to whom you convey the Program, the only way you could
satisfy both those terms and this License would be to refrain entirely
from conveying the Program.

@item Use with the GNU Affero General Public License.

Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

@item Revised Versions of this License.

The Free Software Foundation may publish revised and/or new versions
of the GNU General Public License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies that a certain numbered version of the GNU General Public
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that numbered version or
of any later version published by the Free Software Foundation.  If
the Program does not specify a version number of the GNU General
Public License, you may choose any version ever published by the Free
Software Foundation.

If the Program specifies that a proxy can decide which future versions
of the GNU General Public License can be used, that proxy's public
statement of acceptance of a version permanently authorizes you to
choose that version for the Program.

Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

@item Disclaimer of Warranty.

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ``AS IS'' WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND
PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE
DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR
CORRECTION.

@item Limitation of Liability.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR
LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER
PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

@item Interpretation of Sections 15 and 16.

If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

@end enumerate

@heading END OF TERMS AND CONDITIONS

@heading How to Apply These Terms to Your New Programs

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the ``copyright'' line and a pointer to where the full notice is found.

@smallexample
@var{one line to give the program's name and a brief idea of what it does.}
Copyright (C) @var{year} @var{name of author}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see @url{http://www.gnu.org/licenses/}.
@end smallexample

Also add information on how to contact you by electronic and paper mail.

If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

@smallexample
@var{program} Copyright (C) @var{year} @var{name of author}
This program comes with ABSOLUTELY NO WARRANTY; for details type @samp{show w}.
This is free software, and you are welcome to redistribute it
under certain conditions; type @samp{show c} for details.
@end smallexample

The hypothetical commands @samp{show w} and @samp{show c} should show
the appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an ``about box''.

You should also get your employer (if you work as a programmer) or school,
if any, to sign a ``copyright disclaimer'' for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
@url{http://www.gnu.org/licenses/}.

The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use
the GNU Lesser General Public License instead of this License.  But
first, please read @url{http://www.gnu.org/philosophy/why-not-lgpl.html}.


@c page
@node Documentation License
@appendix GNU Free Documentation License

@cindex FDL, GNU Free Documentation License
@center Version 1.1, March 2000

@display
Copyright @copyright{} 2000 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@enumerate 0
@item
PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document @dfn{free} in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

@item
APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The ``Document'', below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as ``you''.

A ``Modified Version'' of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A ``Secondary Section'' is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The ``Invariant Sections'' are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The ``Cover Texts'' are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A ``Transparent'' copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not ``Transparent'' is called ``Opaque''.

Examples of suitable formats for Transparent copies include plain
@sc{ascii} without markup, Texinfo input format, La@TeX{} input format,
@acronym{SGML} or @acronym{XML} using a publicly available
@acronym{DTD}, and standard-conforming simple @acronym{HTML} designed
for human modification.  Opaque formats include PostScript,
@acronym{PDF}, proprietary formats that can be read and edited only by
proprietary word processors, @acronym{SGML} or @acronym{XML} for which
the @acronym{DTD} and/or processing tools are not generally available,
and the machine-generated @acronym{HTML} produced by some word
processors for output purposes only.

The ``Title Page'' means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

@item
VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

@item
COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.

@item
MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

@enumerate A
@item
Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

@item
List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).

@item
State on the Title page the name of the publisher of the
Modified Version, as the publisher.

@item
Preserve all the copyright notices of the Document.

@item
Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

@item
Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

@item
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.

@item
Include an unaltered copy of this License.

@item
Preserve the section entitled ``History'', and its title, and add to
it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section entitled ``History'' in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

@item
Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the ``History'' section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

@item
In any section entitled ``Acknowledgments'' or ``Dedications'',
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgments
and/or dedications given therein.

@item
Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

@item
Delete any section entitled ``Endorsements''.  Such a section
may not be included in the Modified Version.

@item
Do not retitle any existing section as ``Endorsements''
or to conflict in title with any Invariant Section.
@end enumerate

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties---for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

@item
COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled ``History''
in the various original documents, forming one section entitled
``History''; likewise combine any sections entitled ``Acknowledgments'',
and any sections entitled ``Dedications''.  You must delete all sections
entitled ``Endorsements.''

@item
COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.

@item
AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an ``aggregate'', and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.

@item
TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.

@item
TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
@uref{http://www.gnu.org/copyleft/}.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
@end enumerate

@page
@appendixsubsec ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@smallexample
@group
  Copyright (C)  @var{year}  @var{your name}.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.1
  or any later version published by the Free Software Foundation;
  with the Invariant Sections being @var{list their titles}, with the
  Front-Cover Texts being @var{list}, and with the Back-Cover Texts being @var{list}.
  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
@end group
@end smallexample

If you have no Invariant Sections, write ``with no Invariant Sections''
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write ``no Front-Cover Texts'' instead of
``Front-Cover Texts being @var{list}''; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.


@c ------------------------------------------------------------



@c page
@node references
@appendix Bibliography and references



@c ------------------------------------------------------------

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
