This is nausicaa.info, produced by makeinfo version 4.8 from
nausicaa.texi.

This document describes version nausicaa-devel-0.1-patch-2 of Nausicaa,
a distribution of Scheme language libraries for Ikarus Scheme.

Copyright (C) 2008 by Marco Maggi <marcomaggi@gna.org>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with Invariant Sections being "GNU Free Documentation
     License" and "GNU General Public License, no Front-Cover Texts,
     and no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

INFO-DIR-SECTION Development
START-INFO-DIR-ENTRY
* nausicaa: (nausicaa).         A distribution of libraries
                                for Ikarus Scheme.
END-INFO-DIR-ENTRY


File: nausicaa.info,  Node: Top,  Next: overview,  Up: (dir)

Nausicaa
********

This document describes version nausicaa-devel-0.1-patch-2 of Nausicaa,
a distribution of Scheme language libraries for Ikarus Scheme.

Copyright (C) 2008 by Marco Maggi <marcomaggi@gna.org>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with Invariant Sections being "GNU Free Documentation
     License" and "GNU General Public License, no Front-Cover Texts,
     and no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".

* Menu:

* overview::                    Overview of the package.
* config::                      Configuration.
* vars::                        Variables.
* rules::                       Rules.
* package::                     Building packages.

Appendices

* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.


File: nausicaa.info,  Node: overview,  Next: config,  Prev: Top,  Up: Top

1 Overview of the package
*************************

Nausicaa is a distribution of Scheme language libraries for Ikarus
Scheme.  This document describes the project building and installation
infrastructure, use by almost all the projects in the distribution.

   Only pure Scheme projects are accepted into Nausicaa; no C language
code is compiled or used.  Access to foreign shared library is written
with the Foreign Function Interface provided by Ikarus.

* Menu:

* overview conventions::        Conventions.


File: nausicaa.info,  Node: overview conventions,  Up: overview

1.1 Conventions
===============

This guide tries to stick to the following naming conventions:

_file name_
_directory name_
     it is the last component of the file or directory identifier; the
     name of the file in `/bin/bash' is `bash', while the name of the
     directory in `/usr/local' is `local';

_file pathname_
_directory pathname_
     it is a file or directory identifier that includes a name and a
     directory part; `/bin/bash' is a file pathname and `/usr/local' is
     a directory pathname;

_file basename_
_directory basename_
     it is a file or directory name with the extension stripped
     (including the dot); the basename of the file in `/etc/lilo.conf'
     is `lilo', while the basename of the directory in `/etc/rc.d' is
     `rc';

_file rootname_
_directory rootname_
     it is a file or directory pathname with the extension stripped
     (including the dot); the rootname of the file in `/etc/lilo.conf'
     is `/etc/lilo', while the rootname of the directory in `/etc/rc.d'
     is `/etc/rc';

_path_
     it is a list of directory pathnames to look into when searching
     for a file or directory name.


File: nausicaa.info,  Node: config,  Next: vars,  Prev: overview,  Up: Top

2 Configuration
***************

The configuration of a project for building, installing and binary
package creation is managed with GNU Autoconf.  Each project
subdirectory has a `configure' script that must be run to initialise
the infrastructure.

   Let's take the `scmobj' project as example; we should do this:

     $ tar --extract --bzip2 \
        --file=nausicaa--devel--0.1--patch-1-src.tar.bz2

     $ cd nausicaa--devel--0.1--patch-1
     $ cd scmobj
     $ mkdir "=build"
     $ cd "=build"
     $ ../configure

then we are ready to apply the `make' program to the `Makefile'.

* Menu:

* config options::              Options for `configure'.


File: nausicaa.info,  Node: config options,  Up: config

2.1 Options for `configure'
===========================

For the full list of available configuration options, we should try the
command:

     $ ../configure --help

what follows is a list of common options.

`--prefix=VALUE'
     Select the directory to be used as installation prefix; all the
     files installed by a project will end under this directory; it
     defaults to `/usr/local'.

`--enable-fasl'
`--disable-fasl'
     Enable or disable the compilation and installation of FASL files;
     these are the precompiled version of the installed libraries.  It
     defaults to: yes, build and install the compiled files.

     At present (Thu Nov 13, 2008) only libraries can be compiled by
     Ikarus.

`--enable-sls'
`--disable-sls'
     Enable or disable the installation of source files.  It defaults
     to: yes, install the source files.

`--enable-doc'
`--disable-doc'
     Enable or disable the compilation and installation of documentation
     files.  It defaults to: yes, build and install the documentation.

`--enable-doc-info'
`--disable-doc-info'
     Enable or disable the compilation and installation of Info
     documentation files.  It defaults to: yes, build and install the
     Info documentation.

`--enable-doc-html'
`--disable-doc-html'
     Enable or disable the compilation and installation of HTML
     documentation files.  It defaults to: no, *do not* build and
     install the HTML documentation.


File: nausicaa.info,  Node: vars,  Next: rules,  Prev: config,  Up: Top

3 Variables
***********

This chapter documents the variables in the `Makefile' infrastructure.

* Menu:

* vars config::                 Configuration variables.
* vars project::                Project related variables.
* vars package::                Binary package variables.
* vars directories::            Directory variables.
* vars misc::                   Miscellaneous variables.


File: nausicaa.info,  Node: vars config,  Next: vars project,  Up: vars

3.1 Configuration variables
===========================

 -- Variable: nausicaa_ENABLE_SLS
     Enable or disable the installation of source files; valid values
     are `yes' and `no'.  The default is `yes'.

     It is set by the `configure' options `--enable-sls' and
     `--disable-sls'.

 -- Variable: nausicaa_ENABLE_FASL
     Enable or disable compilation and installation of FASL files; valid
     values are `yes' and `no'.  The default is `yes'.

     It is set by the `configure' options `--enable-fasl' and
     `--disable-fasl'.

 -- Variable: nausicaa_ENABLE_DOC
     Enable or disable compilation and installation of documentation
     files; valid values are `yes' and `no'.  The default is `yes'.

     It is set by the `configure' options `--enable-doc' and
     `--disable-doc'.

 -- Variable: nausicaa_ENABLE_INFO_DOC
     Enable or disable compilation and installation of Info
     documentation files; valid values are `yes' and `no'.  The default
     is `yes'.

     It is set by the `configure' options `--enable-doc-info' and
     `--disable-doc-info'.

 -- Variable: nausicaa_ENABLE_HTML_DOC
     Enable or disable compilation and installation of HTML
     documentation files; valid values are `yes' and `no'.  The default
     is `no'.

     It is set by the `configure' options `--enable-doc-html' and
     `--disable-doc-html'.

 -- Variable: nausicaa_COMPRESSOR
     Select the compressor to be used when creating a tarball; it is
     used by the binary distribution rules.

     Supported values:

    `bzip2'
          selects the Bzip2 compressor;

    `gzip'
          selects the Gzip compressor;

     if a different value is set, the compressor will default to
     `gzip'.  The default value is `gzip'.


File: nausicaa.info,  Node: vars project,  Next: vars package,  Prev: vars config,  Up: vars

3.2 Project related variables
=============================

 -- Variable: PACKAGE_NAME
     The name of the project; it is used to compose the name of binary
     distribution packages.

     It is set by the `configure' script.

 -- Variable: PACKAGE_VERSION
     The version specification of the project; it is used to compose
     the name of binary distribution packages.

     It is set by the `configure' script.

 -- Variable: PKG_ID
     An identifier composed using the package name and version.

     It is set by the `configure' script, and its value should be:

          $(PACKAGE_NAME)-$(PACKAGE_VERSION)


File: nausicaa.info,  Node: vars package,  Next: vars directories,  Prev: vars project,  Up: vars

3.3 Binary package variables
============================

 -- Customisable Variable: package_BUILD_VERSION
     A special version specification to tag binary distribution
     packages.  It should be used to give a version to the package file.

     It defaults to `1nau', which means "Nausicaa build version 1".

 -- Customisable Variable: package_ARCH
     Architecture specification to be used to tag binary distribution
     packages.  It should be used to identify the architecture for
     which a package file was built.

     It must be set to a meaningful value, like `i486' or `i686'.  The
     default value is computed with the following GNU Make expression:

          $(firstword $(subst -, ,$(shell ../../infrastructure/config.guess)))

     if it expands to the empty strings, it falls back to `noarch',
     which means that the package holds only architecture independent
     files (like source and documentation files).

 -- Variable: package_NAME
 -- Variable: package_VERSION
     These are aliases for `PACKAGE_NAME' and `PACKAGE_VERSION', and
     are used to compose the name of binary distribution files.

 -- Variable: package_PREFIX
     The file name of binary distribution packages, without extension.
     It is set to:

          $(package_NAME)-$(package_VERSION)-$(package_ARCH)-$(package_BUILD_VERSION)

     As a usage example, Slackware packages have name:

          $(package_PREFIX).tgz


File: nausicaa.info,  Node: vars directories,  Next: vars misc,  Prev: vars package,  Up: vars

3.4 Directory variables
=======================

 -- Variable: srcdir
     The pathname of the top source directory of a Nausicaa project.

     The rules of the `Makefile' will assume that this is a relative
     directory pathname, and the full pathname can be built with:
     `$(PWD)/$(srcdir)'.

     It is set by the `configure' script.

 -- Variable: builddir
     The pathname of the top build directory of a Nausicaa project.  It
     is meant to be the directory from which we have invoked the
     `configure' script.

     The rules of the `Makefile' will assume that this is a relative
     directory pathname, and the full pathname can be built with:
     `$(PWD)/$(builddir)'.

     It is set by the `configure' script.

* Menu:

* vars directories common::    Common installation directories.
* vars directories custom::    Custom installation directories.


File: nausicaa.info,  Node: vars directories common,  Next: vars directories custom,  Up: vars directories

3.4.1 Common installation directories
-------------------------------------

These are the standard GNU Autoconf variables used to install files on
the system.  All of them are set by the `configure' script.

 -- Variable: prefix
     The root of the installation directories.

 -- Variable: exec_prefix
     The installation prefix for architecture-dependent files.

 -- Variable: bindir
     The directories for installing executables that users run.

 -- Variable: datarootdir
     The root of the directory tree for read-only
     architecture-independent data files.

 -- Variable: datadir
     The directory for installing idiosyncratic read-only
     architecture-independent data.

 -- Variable: docdir
     The directory for installing documentation files (other than Info
     and man).

 -- Variable: includedir
     The directory for installing C header files.

 -- Variable: infodir
     The directory for installing documentation in Info format.

 -- Variable: libdir
     The directory for installing object code libraries.

 -- Variable: libexecdir
     The directory for installing executables that other programs run.

 -- Variable: localstatedir
     The directory for installing locale-dependent but
     architecture-independent data, such as message catalogs.  This
     directory usually has a subdirectory per locale.

 -- Variable: mandir
     The top-level directory for installing documentation in man format.

 -- Variable: sbindir
     The directory for installing executables that system
     administrators run.

 -- Variable: sharedstatedir
     The directory for installing modifiable architecture-independent
     data.

 -- Variable: sysconfdir
     The directory for installing read-only single-machine data.


File: nausicaa.info,  Node: vars directories custom,  Prev: vars directories common,  Up: vars directories

3.4.2 Custom installation directories
-------------------------------------

These are the custom variables used to install files on the system.
With the exception of `ikarus_PKGLIBDIR', all of them are set by the
`configure' script.

 -- Variable: PKG_DIR
     A project specific directory name that is used to compose other
     directory pathnames.  It is set to:

          $(PACKAGE_NAME)/$(PACKAGE_VERSION)

 -- Variable: pkgdatadir
     Project specific directory for data files.

 -- Variable: pkgdocdir
     Project specific directory for documentation files.

 -- Variable: pkgexampledir
     Project specific directory for example files.

 -- Variable: pkginfodir
     Project specific directory for documentation files in Info format.

 -- Variable: pkghtmldir
     Project specific directory for documentation files in HTML format.

 -- Variable: pkgincludedir
     Project specific directory for C language header files.

 -- Variable: pkglibdir
     Project specific directory for library files.

 -- Variable: pkglibexecdir
     Project specific directory for executable files.

 -- Variable: pkgsysconfdir
     Project specific directory for system configuration files.

 -- Variable: ikarus_PKGLIBDIR
     This should be the system directory in which Ikarus libraries are
     installed.  It is set to:

          $(libdir)/ikarus


File: nausicaa.info,  Node: vars misc,  Prev: vars directories,  Up: vars

3.5 Miscellaneous variables
===========================

 -- Variable: TMPDIR
     System environment variable that selects the root directory for
     temporary fils.  It is used to build binary distribution packages.
     If not set or set to the empty string: it defaults to `/tmp'.

 -- Variable: DESTDIR
     A directory to be prepended to all the installation pathnames.  It
     allows installation into a temporary location.  Example:

          $ make install DESTDIR=/tmp/marco/nausicaa-scmobj

     install all the directories and files under the directory
     `/tmp/marco/nausicaa-scmobj'.


File: nausicaa.info,  Node: rules,  Next: package,  Prev: vars,  Up: Top

4 Rules
*******

* Menu:

* rules main::                  Main rules.
* rules doc::                   Documentation related rules.
* rules sls::                   Handling source files.
* rules fasl::                  Handling precompiled files.
* rules texinfo::               Documentation in Texinfo format.
* rules test::                  Testing libraries.
* rules inspect::               Inspecting variables.


File: nausicaa.info,  Node: rules main,  Next: rules doc,  Up: rules

4.1 Main rules
==============

Making
......

 -- Makefile Rule: all
     Build everything that the project was configured to build.  To be
     invoked as:

          $ make all

     This is the first rule in the `Makefile', so it can be invoked also
     by running `make' without rule arguments.

Cleaning
........

 -- Makefile Rule: clean
     Remove all the files that were built with the `all' rule.  To be
     invoked as:

          $ make clean

 -- Makefile Rule: realclean
     Remove all the files that were built with the `all' rule.  To be
     invoked as:

          $ make realclean

 -- Makefile Rule: clean-builddir
     Remove everything in the build directory and its subdirectories:
     *use with care!!!*  To be invoked in a safe place as:

          $ make clean-builddir

Installation
............

For all the following rules: root privileges may be needed to install
and uninstall files on the system; so we may want to use a tool like
`sudo' to run `make'.  In the following we will assume that this is the
case.

 -- Makefile Rule: install
     Install on the system all the files that the project was
     configured to install.  To be invoked as:

          $ sudo make install

 -- Makefile Rule: uninstall
     Uninstall from the system all the files that the project was
     configured to install.  To be invoked as:

          $ sudo make uninstall


File: nausicaa.info,  Node: rules doc,  Next: rules sls,  Prev: rules main,  Up: rules

4.2 Documentation related rules
===============================

Compilation, installation and uninstallation are enabled or disabled
with configuration options and variables; see the relevant sections.

Making and cleaning
...................

 -- Makefile Rule: doc
     Build all the documentation that the project was configured to
     build.  To be invoked as:

          $ make doc

     This rule is invoked by `all'.

 -- Makefile Rule: doc-clean
     Remove all the files that were built by the `doc' rule.  To be
     invoked as:

          $ make doc-clean

     This rule is invoked by `clean'.

Installation
............

For all the following rules: root privileges may be needed to install
and uninstall files on the system; so we may want to use a tool like
`sudo' to run `make'.  In the following we will assume that this is the
case.

 -- Makefile Rule: doc-install
     Install all the documentation that the project was configured to
     build.  To be invoked as:

          $ sudo make doc-install

     This rule is invoked by `install'.

 -- Makefile Rule: doc-uninstall
     Uninstall all the documentation that the project was configured to
     build.  To be invoked as:

          $ sudo make doc-uninstall

     This rule is invoked by `uninstall'.


File: nausicaa.info,  Node: rules sls,  Next: rules fasl,  Prev: rules doc,  Up: rules

4.3 Handling source files
=========================

Installation
............

For all the following rules:

   * installation and uninstallation are enabled or disabled with
     configuration options and variables; see the relevant sections;

   * root privileges may be needed to install and uninstall files on the
     system; so we may want to use a tool like `sudo' to run `make'; in
     the following we will assume that this is the case.

 -- Makefile Rule: sls-install
     Install the Scheme source files.  All the files with extension
     `.sls' in the `libraries' subdirectory of the project are
     installed on the system.  To be invoked as:

          $ sudo make sls-install

     This rule is invoked by `install'.

 -- Makefile Rule: sls-uninstall
     Uninstall the Scheme source files.  To be invoked as:

          $ sudo make sls-uninstall

     This rule is invoked by `uninstall'.


File: nausicaa.info,  Node: rules fasl,  Next: rules texinfo,  Prev: rules sls,  Up: rules

4.4 Handling precompiled files
==============================

Compilation, installation and uninstallation are enabled or disabled
with configuration options and variables; see the relevant sections.

   Producing precompiled library files is a multistep process:

  1. the library files are built by running the command:

          ikarus --compile-dependencies compile-all.sps

     with a system environment that allows Ikarus to find the relevant
     libraries; this way the FASL files are created in the source
     directory of the project;

  2. the FASL files are moved from the source directory into a
     subdirectory of the build directory, preserving the directory
     structure.

Making and cleaning
...................

 -- Makefile Rule: fasl
 -- Makefile Rule: compile
     Compile the library files.  To be invoked as:

          $ make fasl

     This rule is invoked by `all'.

 -- Makefile Rule: fasl-clean
 -- Makefile Rule: compile-clean
     Remove all the compiled files.  To be invoked as:

          $ make fasl-clean

     This rule is invoked by `clean'.

 -- Makefile Rule: fasl-clean-fasl-in-srcdir
     Remove all the compiled files that, for some reason, may have been
     left in the source directory.  To be invoked as:

          $ make fasl-clean-fasl-in-srcdir

     This rule is invoked by `fasl-clean'.

Installation
............

For all the following rules: root privileges may be needed to install
and uninstall files on the system; so we may want to use a tool like
`sudo' to run `make'; in the following we will assume that this is the
case.

 -- Makefile Rule: fasl-install
     Install the precompiled library files.  To be invoked as:

          $ sudo make fasl-install

     This rule is invoked by `install'.

 -- Makefile Rule: fasl-uninstall
     Uninstall the precompiled files.  To be invoked as:

          $ sudo make fasl-uninstall

     This rule is invoked by `uninstall'.


File: nausicaa.info,  Node: rules texinfo,  Next: rules test,  Prev: rules fasl,  Up: rules

4.5 Documentation in Texinfo format
===================================

Texinfo is the standard documentation format for Nausicaa projects.  By
default only the Info documentation is built and installed.
Compilation, installation and uninstallation are enabled or disabled
with configuration options and variables; see the relevant sections.

Making and cleaning
...................

 -- Makefile Rule: doc-texinfo
 -- Makefile Rule: doc-texinfo-info
 -- Makefile Rule: doc-texinfo-html
     `doc-texinfo' builds the Texinfo documentation that the project was
     configured to build.  `doc-texinfo-info' and `doc-texinfo-html'
     build Info and HTML documentation, according to the configuration.
     To be invoked as:

          $ make doc-texinfo
          $ make doc-texinfo-info
          $ make doc-texinfo-html

     `doc-texinfo' is invoked by `doc'.  `doc-texinfo-info' and
     `doc-texinfo-html' are invoked by `doc-texinfo'.

 -- Makefile Rule: doc-texinfo-clean
     Remove all the files that were built by the `doc-texinfo' rule.  To
     be invoked as:

          $ make doc-texinfo-clean

     This rule is invoked by `doc-clean'.

 -- Makefile Rule: doc-texinfo-builddir
     If the build directory for Texinfo documentation does not exist:
     create it.  To be invoked as:

          $ make doc-texinfo-builddir

Installation
............

For all the following rules: root privileges may be needed to install
and uninstall files on the system; so we may want to use a tool like
`sudo' to run `make'.  In the following we will assume that this is the
case.

 -- Makefile Rule: doc-texinfo-install
 -- Makefile Rule: doc-texinfo-info-install
 -- Makefile Rule: doc-texinfo-html-install
     Install all the Texinfo documentation that the project was
     configured to build.  To be invoked as:

          $ sudo make doc-texinfo-install
          $ sudo make doc-texinfo-info-install
          $ sudo make doc-texinfo-html-install

     `doc-texinfo-install' is invoked by `doc-install'.
     `doc-texinfo-info-install' and `doc-texinfo-html-install' are
     invoked by `doc-texinfo-install'.

 -- Makefile Rule: doc-texinfo-uninstall
 -- Makefile Rule: doc-texinfo-info-uninstall
 -- Makefile Rule: doc-texinfo-html-uninstall
     Uninstall all the documentation that the project was configured to
     build.  To be invoked as:

          $ sudo make doc-texinfo-uninstall
          $ sudo make doc-texinfo-info-uinstall
          $ sudo make doc-texinfo-html-uinstall

     `doc-texinfo-uinstall' is invoked by `doc-uinstall'.
     `doc-texinfo-info-uinstall' and `doc-texinfo-html-uinstall' are
     invoked by `doc-texinfo-uinstall'.

Variables
.........

 -- Variable: doc_texinfo_SRCDIR
     The pathname of the source directory for Texinfo files.

 -- Variable: doc_texinfo_BUILDDIR
     The pathname of the build directory for Texinfo documentation.

 -- Variable: doc_texinfo_SOURCES
     The list of Texinfo source files.

 -- Variable: doc_texinfo_TARGETS
 -- Variable: doc_texinfo_info_TARGETS
 -- Variable: doc_texinfo_html_TARGETS
     The list of Texinfo target files.  These are the files that will be
     built by the `doc-texinfo' rule.

 -- Variable: doc_texinfo_CLEANFILES
     The list of Texinfo files that will be remove by the
     `doc-texinfo-clean' rule.

 -- Variable: doc_texinfo_info_INSTLST
 -- Variable: doc_texinfo_html_INSTLST
     The lists of files that will be installed on the system by the
     `doc-texinfo-install' rule.

 -- Variable: doc_texinfo_info_INSTDIR
 -- Variable: doc_texinfo_html_INSTDIR
     The target directories for installation of Info and HTML files.


File: nausicaa.info,  Node: rules test,  Next: rules inspect,  Prev: rules texinfo,  Up: rules

4.6 Testing libraries
=====================

Test files are supposet to be top-level programs under the `tests'
subdirectory of each project.

   There should be one test file for each library, and its name must be
`test-<library>.sls' where `<library>' is the library file basename.
So the library with pathname `library/uriel/begin0.sls' must have a
test file with pathname `tests/test-begin0.sls'.

 -- Makefile Rule: test
 -- Makefile Rule: tests
 -- Makefile Rule: check
     Run all the test files using `scheme-script' as Ikarus interface
     and setting the Ikarus library path to:

          IKARUS_LIBRARY_PATH=$(srcdir)/libraries:$(srcdir)/tests

     notice that this will pick up libraries source files but not the
     associated FASL files.

 -- Makefile Rule: test-file
     Like `test' but runs a single test file.  To select a test file we
     set the `FILE' variable on the command line of `make' to the
     library file basename.

     Example: to run the test with pathname `tests/test-begin0.sls' we
     do:

          $ make test-file FILE=begin0

     If no test file matches the selection: nothing happens.


File: nausicaa.info,  Node: rules inspect,  Prev: rules test,  Up: rules

4.7 Inspecting variables
========================

The value of `Makefile' variables can be inspected from the command
line with the following rules.

 -- Makefile Rule: echo-variable
     Echo a variable to stdout.  Example:

          $ make echo-variable VARIABLE=slack_PACKAGE_NAME

 -- Makefile Rule:
     Echo a variable to stdout, interpreting it as list of strings.
     Each string is echoed on its own line.  Example:

          $ make echo-list-variable VARIABLE=sls_INSTLST


File: nausicaa.info,  Node: package,  Next: Documentation License,  Prev: rules,  Up: Top

5 Building packages
*******************

Nausicaa has limited support for building binary packages.  All the
Nausicaa projects that declare, in their `README' file, to support the
Nausicaa infrastructure, support building packages as described in this
chapter.

   The idea is to install the files in a temporary location, and then to
use the native packaging tools to build a binary package.  The binary
package file is moved to (or directly created into) a subdirectory of
the project build directory.

     *It is of paramount importance that we set the `TMPDIR'
     environment variable to a good value, before attempting to use the
     rules described in this chapter.  If TMPDIR is set to an empty
     string, the `Makefile' will set it to `/tmp'.*

* Menu:

* bindist::                     Building plain binary packages.
* slackware::                   Building Slackware packages.
* redhat::                      Building RedHat packages.


File: nausicaa.info,  Node: bindist,  Next: slackware,  Up: package

5.1 Building plain binary packages
==================================

Let's take the `nausicaa-scmobj' project as example; let's imagine that
inspecting the package variables yields this:

     $ cd scmobj
     $ make echo-variable VARIABLE=PACKAGE_NAME
     nausicaa-scmobj

     $ make echo-variable VARIABLE=PACKAGE_VERSION
     0.1d0

     $ make echo-variable VARIABLE=package_BUILD_VERSION
     1mm

     $ make echo-variable VARIABLE=package_ARCH
     i686

     $ make echo-variable VARIABLE=TMPDIR
     /tmp/marco

Makefile variables
..................

 -- Variable: bindist_PACKAGE_NAME
     This is the file name of the binary distribution tarball.  Notice
     that there is no directory part.

     Example:

          $ make echo-variable VARIABLE=bindist_PACKAGE_NAME
          nausicaa-scmobj-0.1d0-i686-1mm.tar.bz2

 -- Variable: bindist_PACKAGE_TOP_BUILDDIR
     This is the root directory for temporary installation of files.

     Example:

          $ make echo-variable VARIABLE=bindist_PACKAGE_TOP_BUILDDIR
          /tmp/marco/nausicaa-scmobj-0.1d0

 -- Variable: bindist_BUILDDIR
     This is where the produced tarball will be finally stored.

     Example (from the build directory of the author):

          $ make echo-variable VARIABLE=bindist_PACKAGE_TOP_BUILDDIR
          /home/marco/src/devel/ikarus/nausicaa/scmobj/=build/./bindist.d

 -- Variable: bindist_TARBALL_PATHNAME
     This is the full pathname of the tarball.

     Example:

          $ make echo-variable VARIABLE=bindist_TARBALL_PATHNAME
          /home/marco/src/devel/ikarus/nausicaa/scmobj/=build/./bindist.d/nausicaa-scmobj-0.1d0-i686-1mm.tar.bz2

Makefile rules
..............

 -- Makefile Rule: bindist
     Build the binary distribution tarball and place it in the build
     directory.  To be invoked as:

          $ make bindist

 -- Makefile Rule: bindist-builddir
     If the `$(bindist_BUILDDIR)' directory does not exist: create it.
     To be invoked as:

          $ make bindist-builddir

 -- Makefile Rule: bindist-top-builddir
     If the `$(bindist_PACKAGE_TOP_BUILDDIR)' directory does not exist:
     create it.  To be invoked as:

          $ make bindist-top-builddir

 -- Makefile Rule: bindist-clean
     Equivalent to invoke both the `bindist-clean-top-builddir' and
     `bindist-clean-builddir' rules.  To be invoked as:

          $ make bindist-clean

 -- Makefile Rule: bindist-clean-top-builddir
     Remove the `$(bindist_PACKAGE_TOP_BUILDDIR)' directory and all its
     contents.  To be invoked as:

          $ make bindist-clean-top-builddir

 -- Makefile Rule: bindist-clean-builddir
     Remove the `$(bindist_BUILDDIR)' directory and all its contents.
     To be invoked as:

          $ make bindist-clean-builddir

Example layout
..............

     ./usr/
     ./usr/local/
     ./usr/local/lib/
     ./usr/local/lib/ikarus/
     ./usr/local/lib/ikarus/scmobj/
     ./usr/local/lib/ikarus/scmobj/main.sls.ikarus-fasl
     ./usr/local/lib/ikarus/scmobj/main.sls
     ./usr/local/share/
     ./usr/local/share/doc/
     ./usr/local/share/doc/nausicaa-scmobj/
     ./usr/local/share/doc/nausicaa-scmobj/0.1d0/
     ./usr/local/share/doc/nausicaa-scmobj/0.1d0/info/
     ./usr/local/share/doc/nausicaa-scmobj/0.1d0/info/nausicaa-scmobj.info


File: nausicaa.info,  Node: slackware,  Next: redhat,  Prev: bindist,  Up: package

5.2 Building Slackware packages
===============================

Support for Slackware packages allows the construction of both standard
and "local" packages.  Let's take the `nausicaa-scmobj' project as
example; let's imagine that inspecting the package variables yields
this:

     $ cd scmobj
     $ make echo-variable VARIABLE=PACKAGE_NAME
     nausicaa-scmobj

     $ make echo-variable VARIABLE=PACKAGE_VERSION
     0.1d0

     $ make echo-variable VARIABLE=package_BUILD_VERSION
     1mm

     $ make echo-variable VARIABLE=package_ARCH
     i686

     $ make echo-variable VARIABLE=TMPDIR
     /tmp/marco

* Menu:

* slackware common::            Common variables and rules.
* slackware standard::          Building standard Slackware packages.
* slackware local::             Building local Slackware packages.


File: nausicaa.info,  Node: slackware common,  Next: slackware standard,  Up: slackware

5.2.1 Common variables and rules
--------------------------------

This section documents variables and rules that can are used both when
building standard packages and local packages.

Makefile variables
..................

 -- Variable: slack_PACKAGE_NAME
     This is the file name of the Slackware package.  Notice that there
     is no directory part.

     Example:

          $ make echo-variable VARIABLE=slack_PACKAGE_NAME
          nausicaa-scmobj-0.1d0-i686-1mm.tgz

 -- Variable: slack_PACKAGE_PREFIX
     This is the package prefix, it is used to remove the package.

     Example:

          $ make echo-variable VARIABLE=slack_PACKAGE_PREFIX
          nausicaa-scmobj-0.1d0-i686-1mm

 -- Variable: slack_PACKAGE_TOP_BUILDDIR
     This is the root directory for temporary installation of files.

     Example:

          $ make echo-variable VARIABLE=slack_PACKAGE_TOP_BUILDDIR
          /tmp/marco/nausicaa-scmobj-0.1d0

 -- Variable: slack_PACKAGE_BUILDDIR
     This is the root directory for building packages.  The rules for
     standard packages will set it to:

          $(slack_PACKAGE_TOP_BUILDDIR)

     the rules for local packages will set it to:

          $(slack_PACKAGE_TOP_BUILDDIR)/$(prefix)

     It is set to the empty string, and it will be set by the rules by
     invoking `$(MAKE)' recursively.

 -- Variable: slack_BUILDDIR
     This is where the produced package will be finally stored.

     Example (from the build directory of the author):

          $ make echo-variable VARIABLE=slack_BUILDDIR
          /home/marco/src/devel/ikarus/nausicaa/scmobj/=build/./slackware.d

 -- Variable: slack_REGISTRY
 -- Variable: slack_REGISTRY_DIR
     These are used to select the pathname of the Slackware packages
     registry.  The standard package rules will set SLACK_REGISTRY to:

          $(slack_REGISTRY_DIR)

     while the local package rules will set it to:

          $(prefix)$(slack_REGISTRY_DIR)

     Example:

          $ make echo-variable VARIABLE=slack_REGISTRY_DIR
          /var/log/packages

 -- Variable: slack_INSTALLED_PACKAGE
     The definition of this variable tries to read from the system the
     name of an already installed package.  It is used to upgrade.

     This variable Example (after having installed the package):

          $ make echo-variable VARIABLE=slack_INSTALLED_PACKAGE
          nausicaa-scmobj-0.1d0-i686-1mm

Makefile rules
..............

 -- Makefile Rule: slackware-builddir
     If the directory `$(slack_BUILDDIR)' does not exist: create it.  To
     be invoked as:

          $ make slackware-builddir

 -- Makefile Rule: slackware-top-builddir
     If the directory `$(slack_PACKAGE_TOP_BUILDDIR)' does not exist:
     create it.  To be invoked as:

          $ make slackware-top-builddir

 -- Makefile Rule: slackware-aux
     This is for auxiliary stuff: it is freely available to the user.
     It will be invoked after having installed the files in the
     temporary location, and just before running `makepkg' (see the
     `slackware' and `local-slackware' rules).

     It is not meant to be invoked explicitly.

 -- Makefile Rule: slackware-clean
     Equivalent to invoke both the `slackware-clean-top-builddir' and
     `slackware-clean-builddir' rules.  To be invoked as:

          $ make slackware-clean

 -- Makefile Rule: slackware-clean-top-builddir
     Remove the `$(slack_PACKAGE_TOP_BUILDDIR)' directory and all its
     contents.  To be invoked as:

          $ make slackware-clean-top-builddir

 -- Makefile Rule: slackware-clean-builddir
     Remove the `$(slack_BUILDDIR)' directory and all its contents.  To
     be invoked as:

          $ make slackware-clean-builddir


File: nausicaa.info,  Node: slackware standard,  Next: slackware local,  Prev: slackware common,  Up: slackware

5.2.2 Building standard Slackware packages
------------------------------------------

A standard Slackware package is a normal Slackware package: a tarball
with `.tgz' extension; with the pathnames relative to the root
directory; registered in the `/var/log/packages' registry.

Makefile variables
..................

 -- Variable: slackware_STANDARD_ENV
     The system environment with which the Slackware package management
     scripts will be run.

     Example:

          $ make echo-list-variable VARIABLE=slackware_STANDARD_ENV
          PATH=/sbin:...
          slack_PACKAGE_BUILDDIR=/tmp/marco/nausicaa-scmobj-0.1d0
          slack_REGISTRY=/var/log/packages

     we see that `/sbin' has been added to the `PATH' variable: this is
     because the Slackware management scripts need to find each other.

Makefile rules
..............

For all the following rules: root privileges are needed to build a
standard package; so we may want to use a tool like `sudo' to run
`make'.  In the following we will assume that this is the case.

   Always remember that the `-n' option of GNU Make allows us to see
the commands that a rule will execute, without actually executing them.
Example:

     $ make local-slackware-upgrade -n

 -- Makefile Rule: slackware
     Build the package and place it into the build directory.  To be
     invoked as:

          $ sudo make slackware

 -- Makefile Rule: slackware-install
     Install the previously built package.  To be invoked as:

          $ sudo make slackware-install

 -- Makefile Rule: slackware-remove
     Try to upgrade an already installed package with the previously
     built package.  To be invoked as:

          $ sudo make slackware-remove

     See the `slack_INSTALLED_PACKAGE' variable for the name of the
     package that will be removed.

 -- Makefile Rule: slackware-upgrade
     Try to upgrade an already installed package with the previously
     built package.  To be invoked as:

          $ sudo make slackware-upgrade

     See the `slack_INSTALLED_PACKAGE' variable for the name of the
     package that will be removed.


File: nausicaa.info,  Node: slackware local,  Prev: slackware standard,  Up: slackware

5.2.3 Building local Slackware packages
---------------------------------------

A local Slackware package is: a tarball with `.tgz' extension; with the
pathnames relative to the selected installation prefix (for example
`/usr/local'); registered in the `$(prefix)/var/log/packages' registry,
where `$(prefix)' is the selected installation prefix.

Makefile variables
..................

 -- Variable: slackware_LOCAL_ENV
     The system environment with which the Slackware package management
     scripts will be run.

     Example:

          $ make echo-list-variable VARIABLE=slackware_LOCAL_ENV
          PATH=/sbin:...
          slack_PACKAGE_BUILDDIR=/tmp/marco/nausicaa-scmobj-0.1d0//usr/local
          slack_REGISTRY=/usr/local/var/log/packages
          slack_ENV=ROOT=/usr/local

     we see that `/sbin' has been added to the `PATH' variable: this is
     because the Slackware management scripts need to find each other.

Makefile rules
..............

For all the following rules: root privileges may be needed to build a
local package; so we may want to use a tool like `sudo' to run `make'.
In the following we will assume that this is the case.

   Always remember that the `-n' option of GNU Make allows us to see
the commands that a rule will execute, without actually executing them.
Example:

     $ make local-slackware-upgrade -n

 -- Makefile Rule: local-slackware
     Build the package and place it into the build directory.  To be
     invoked as:

          $ sudo make local-slackware

 -- Makefile Rule: local-slackware-install
     Install the previously built package.  To be invoked as:

          $ sudo make local-slackware-install

 -- Makefile Rule: local-slackware-remove
     Try to upgrade an already installed package with the previously
     built package.  To be invoked as:

          $ sudo make local-slackware-remove

     See the `slack_INSTALLED_PACKAGE' variable for the name of the
     package that will be removed.

 -- Makefile Rule: local-slackware-upgrade
     Try to upgrade an already installed package with the previously
     built package.  To be invoked as:

          $ sudo make local-slackware-upgrade

     See the `slack_INSTALLED_PACKAGE' variable for the name of the
     package that will be removed.


File: nausicaa.info,  Node: redhat,  Prev: slackware,  Up: package

5.3 Building RedHat packages
============================

Remember that to obtain a list of the files in a package file (that is:
an uninstalled package) we have to do:

     $ rpm --query --list --package nausicaa-scmobj-0.1d0-1nau.rpm

Makefile rules
..............

 -- Makefile Rule: redhat
     Build a package.  To be invoked as:

          $ make redhat

          _Note:_ It seems that `rpmbuild' insists in putting the
          created package file under the `/usr/src/rpm/RPMS' directory;
          there is no way to persuade it to do otherwise.  So we may
          need superuser privileges to invoke the `redhat' rule.
          Furthermore, if we have mounted the `/usr' file system with
          ready-only permissions (shame on us!!!) we will have to
          remount it read-write before invoking the rule.

 -- Makefile Rule: redhat-clean
     Remove the `$(redhat_PACKAGE_TOP_BUILDDIR)' and all its contents.
     To be invoked as:

          $ make redhat-clean


File: nausicaa.info,  Node: Documentation License,  Next: references,  Prev: package,  Up: Top

Appendix A GNU Free Documentation License
*****************************************

                        Version 1.1, March 2000

     Copyright (C) 2000 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     written document "free" in the sense of freedom: to assure everyone
     the effective freedom to copy and redistribute it, with or without
     modifying it, either commercially or noncommercially.  Secondarily,
     this License preserves for the author and publisher a way to get
     credit for their work, while not being considered responsible for
     modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work that contains a
     notice placed by the copyright holder saying it can be distributed
     under the terms of this License.  The "Document", below, refers to
     any such manual or work.  Any member of the public is a licensee,
     and is addressed as "you".

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter
     section of the Document that deals exclusively with the
     relationship of the publishers or authors of the Document to the
     Document's overall subject (or to related matters) and contains
     nothing that could fall directly within that overall subject.
     (For example, if the Document is in part a textbook of
     mathematics, a Secondary Section may not explain any mathematics.)
     The relationship could be a matter of historical connection with
     the subject or with related matters, or of legal, commercial,
     philosophical, ethical or political position regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, whose contents can be viewed and edited directly
     and straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup has been designed
     to thwart or discourage subsequent modification by readers is not
     Transparent.  A copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML designed for human modification.
     Opaque formats include PostScript, PDF, proprietary formats that
     can be read and edited only by proprietary word processors, SGML
     or XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies of the Document numbering more than
     100, and the Document's license notice requires Cover Texts, you
     must enclose the copies in covers that carry, clearly and legibly,
     all these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a publicly-accessible
     computer-network location containing a complete Transparent copy
     of the Document, free of added material, which the general
     network-using public has access to download anonymously at no
     charge using public-standard network protocols.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has less than five).

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section entitled "History", and its title, and
          add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. In any section entitled "Acknowledgments" or "Dedications",
          preserve the section's title, and preserve in the section all
          the substance and tone of each of the contributor
          acknowledgments and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section as "Endorsements" or to
          conflict in title with any Invariant Section.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections entitled
     "History" in the various original documents, forming one section
     entitled "History"; likewise combine any sections entitled
     "Acknowledgments", and any sections entitled "Dedications".  You
     must delete all sections entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, does not as a whole count as a
     Modified Version of the Document, provided no compilation
     copyright is claimed for the compilation.  Such a compilation is
     called an "aggregate", and this License does not apply to the
     other self-contained works thus compiled with the Document, on
     account of their being thus compiled, if they are not themselves
     derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one
     quarter of the entire aggregate, the Document's Cover Texts may be
     placed on covers that surround only the Document within the
     aggregate.  Otherwise they must appear on covers around the whole
     aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License provided that you also include the
     original English version of this License.  In case of a
     disagreement between the translation and the original English
     version of this License, the original English version will prevail.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

A.0.1 ADDENDUM: How to use this License for your documents
----------------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.1
       or any later version published by the Free Software Foundation;
       with the Invariant Sections being LIST THEIR TITLES, with the
       Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
       A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no Front-Cover
Texts, write "no Front-Cover Texts" instead of "Front-Cover Texts being
LIST"; likewise for Back-Cover Texts.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: nausicaa.info,  Node: references,  Next: concept index,  Prev: Documentation License,  Up: Top

Appendix B Bibliography and references
**************************************


File: nausicaa.info,  Node: concept index,  Next: function index,  Prev: references,  Up: Top

Appendix C An entry for each concept
************************************

 [index ]
* Menu:

* FDL, GNU Free Documentation License:   Documentation License. (line 6)


File: nausicaa.info,  Node: function index,  Next: variable index,  Prev: concept index,  Up: Top

Appendix D An entry for each function.
**************************************

 [index ]
* Menu:

* :                                      rules inspect.       (line  15)
* all:                                   rules main.          (line  10)
* bindist:                               bindist.             (line  65)
* bindist-builddir:                      bindist.             (line  71)
* bindist-clean:                         bindist.             (line  83)
* bindist-clean-builddir:                bindist.             (line  95)
* bindist-clean-top-builddir:            bindist.             (line  89)
* bindist-top-builddir:                  bindist.             (line  77)
* check:                                 rules test.          (line  17)
* clean:                                 rules main.          (line  22)
* clean-builddir:                        rules main.          (line  34)
* compile:                               rules fasl.          (line  28)
* compile-clean:                         rules fasl.          (line  36)
* doc:                                   rules doc.           (line  13)
* doc-clean:                             rules doc.           (line  21)
* doc-install:                           rules doc.           (line  37)
* doc-texinfo:                           rules texinfo.       (line  15)
* doc-texinfo-builddir:                  rules texinfo.       (line  38)
* doc-texinfo-clean:                     rules texinfo.       (line  30)
* doc-texinfo-html:                      rules texinfo.       (line  17)
* doc-texinfo-html-install:              rules texinfo.       (line  54)
* doc-texinfo-html-uninstall:            rules texinfo.       (line  68)
* doc-texinfo-info:                      rules texinfo.       (line  16)
* doc-texinfo-info-install:              rules texinfo.       (line  53)
* doc-texinfo-info-uninstall:            rules texinfo.       (line  67)
* doc-texinfo-install:                   rules texinfo.       (line  52)
* doc-texinfo-uninstall:                 rules texinfo.       (line  66)
* doc-uninstall:                         rules doc.           (line  45)
* echo-variable:                         rules inspect.       (line  10)
* fasl:                                  rules fasl.          (line  27)
* fasl-clean:                            rules fasl.          (line  35)
* fasl-clean-fasl-in-srcdir:             rules fasl.          (line  43)
* fasl-install:                          rules fasl.          (line  59)
* fasl-uninstall:                        rules fasl.          (line  66)
* install:                               rules main.          (line  48)
* local-slackware:                       slackware local.     (line  43)
* local-slackware-install:               slackware local.     (line  49)
* local-slackware-remove:                slackware local.     (line  54)
* local-slackware-upgrade:               slackware local.     (line  63)
* realclean:                             rules main.          (line  28)
* redhat:                                redhat.              (line  15)
* redhat-clean:                          redhat.              (line  28)
* slackware:                             slackware standard.  (line  41)
* slackware-aux:                         slackware common.    (line  99)
* slackware-builddir:                    slackware common.    (line  87)
* slackware-clean:                       slackware common.    (line 107)
* slackware-clean-builddir:              slackware common.    (line 119)
* slackware-clean-top-builddir:          slackware common.    (line 113)
* slackware-install:                     slackware standard.  (line  47)
* slackware-remove:                      slackware standard.  (line  52)
* slackware-top-builddir:                slackware common.    (line  93)
* slackware-upgrade:                     slackware standard.  (line  61)
* sls-install:                           rules sls.           (line  19)
* sls-uninstall:                         rules sls.           (line  28)
* test:                                  rules test.          (line  15)
* test-file:                             rules test.          (line  26)
* tests:                                 rules test.          (line  16)
* uninstall:                             rules main.          (line  54)


File: nausicaa.info,  Node: variable index,  Next: type index,  Prev: function index,  Up: Top

Appendix E An entry for each variable.
**************************************

 [index ]
* Menu:

* bindir:                                vars directories common.
                                                              (line  16)
* bindist_BUILDDIR:                      bindist.             (line  46)
* bindist_PACKAGE_NAME:                  bindist.             (line  29)
* bindist_PACKAGE_TOP_BUILDDIR:          bindist.             (line  38)
* bindist_TARBALL_PATHNAME:              bindist.             (line  54)
* builddir:                              vars directories.    (line  16)
* datadir:                               vars directories common.
                                                              (line  23)
* datarootdir:                           vars directories common.
                                                              (line  19)
* DESTDIR:                               vars misc.           (line  12)
* doc_texinfo_BUILDDIR:                  rules texinfo.       (line  86)
* doc_texinfo_CLEANFILES:                rules texinfo.       (line  98)
* doc_texinfo_html_INSTDIR:              rules texinfo.       (line 108)
* doc_texinfo_html_INSTLST:              rules texinfo.       (line 103)
* doc_texinfo_html_TARGETS:              rules texinfo.       (line  94)
* doc_texinfo_info_INSTDIR:              rules texinfo.       (line 107)
* doc_texinfo_info_INSTLST:              rules texinfo.       (line 102)
* doc_texinfo_info_TARGETS:              rules texinfo.       (line  93)
* doc_texinfo_SOURCES:                   rules texinfo.       (line  89)
* doc_texinfo_SRCDIR:                    rules texinfo.       (line  83)
* doc_texinfo_TARGETS:                   rules texinfo.       (line  92)
* docdir:                                vars directories common.
                                                              (line  27)
* exec_prefix:                           vars directories common.
                                                              (line  13)
* ikarus_PKGLIBDIR:                      vars directories custom.
                                                              (line  44)
* includedir:                            vars directories common.
                                                              (line  31)
* infodir:                               vars directories common.
                                                              (line  34)
* libdir:                                vars directories common.
                                                              (line  37)
* libexecdir:                            vars directories common.
                                                              (line  40)
* localstatedir:                         vars directories common.
                                                              (line  43)
* mandir:                                vars directories common.
                                                              (line  48)
* nausicaa_COMPRESSOR:                   vars config.         (line  44)
* nausicaa_ENABLE_DOC:                   vars config.         (line  21)
* nausicaa_ENABLE_FASL:                  vars config.         (line  14)
* nausicaa_ENABLE_HTML_DOC:              vars config.         (line  36)
* nausicaa_ENABLE_INFO_DOC:              vars config.         (line  28)
* nausicaa_ENABLE_SLS:                   vars config.         (line   7)
* package_ARCH:                          vars package.        (line  13)
* package_BUILD_VERSION:                 vars package.        (line   7)
* package_NAME:                          vars package.        (line  27)
* PACKAGE_NAME:                          vars project.        (line   7)
* package_PREFIX:                        vars package.        (line  32)
* package_VERSION:                       vars package.        (line  28)
* PACKAGE_VERSION:                       vars project.        (line  13)
* PKG_DIR:                               vars directories custom.
                                                              (line  11)
* PKG_ID:                                vars project.        (line  19)
* pkgdatadir:                            vars directories custom.
                                                              (line  17)
* pkgdocdir:                             vars directories custom.
                                                              (line  20)
* pkgexampledir:                         vars directories custom.
                                                              (line  23)
* pkghtmldir:                            vars directories custom.
                                                              (line  29)
* pkgincludedir:                         vars directories custom.
                                                              (line  32)
* pkginfodir:                            vars directories custom.
                                                              (line  26)
* pkglibdir:                             vars directories custom.
                                                              (line  35)
* pkglibexecdir:                         vars directories custom.
                                                              (line  38)
* pkgsysconfdir:                         vars directories custom.
                                                              (line  41)
* prefix:                                vars directories common.
                                                              (line  10)
* sbindir:                               vars directories common.
                                                              (line  51)
* sharedstatedir:                        vars directories common.
                                                              (line  55)
* slack_BUILDDIR:                        slackware common.    (line  51)
* slack_INSTALLED_PACKAGE:               slackware common.    (line  75)
* slack_PACKAGE_BUILDDIR:                slackware common.    (line  38)
* slack_PACKAGE_NAME:                    slackware common.    (line  13)
* slack_PACKAGE_PREFIX:                  slackware common.    (line  22)
* slack_PACKAGE_TOP_BUILDDIR:            slackware common.    (line  30)
* slack_REGISTRY:                        slackware common.    (line  59)
* slack_REGISTRY_DIR:                    slackware common.    (line  60)
* slackware_LOCAL_ENV:                   slackware local.     (line  15)
* slackware_STANDARD_ENV:                slackware standard.  (line  14)
* srcdir:                                vars directories.    (line   7)
* sysconfdir:                            vars directories common.
                                                              (line  59)
* TMPDIR:                                vars misc.           (line   7)


File: nausicaa.info,  Node: type index,  Prev: variable index,  Up: Top

Appendix F An entry for each type.
**********************************

 [index ]
* Menu:


Tag Table:
Node: Top923
Node: overview2301
Node: overview conventions2892
Node: config4110
Node: config options4847
Node: vars6350
Node: vars config6816
Node: vars project8637
Node: vars package9354
Node: vars directories10884
Node: vars directories common11856
Node: vars directories custom13712
Node: vars misc15172
Node: rules15853
Node: rules main16346
Node: rules doc17806
Node: rules sls19176
Node: rules fasl20176
Node: rules texinfo22208
Node: rules test25942
Node: rules inspect27177
Node: package27740
Node: bindist28785
Node: slackware32141
Node: slackware common33048
Node: slackware standard36836
Node: slackware local39058
Node: redhat41422
Node: Documentation License42480
Node: references62385
Node: concept index62568
Node: function index62835
Node: variable index67271
Node: type index74223

End Tag Table
