\input texinfo.tex
@c %**start of header
@setfilename nausicaa-nettle.info
@settitle Nettle for Nausicaa
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@macro condition{NAME}
@code{&\NAME\}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro sql{}
@acronym{SQL}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@macro axml{}
@acronym{XML}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro ssh{}
@acronym{SSH}
@end macro

@macro ssl{}
@acronym{SSL}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro tls{}
@acronym{TLS}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@macro nettleref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nettle}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Nettle for Nausicaa

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/Nettle

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-nettle

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2010

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides a binding to the Nettle C language cryptographic library.  It
is built upon Nausicaa/Scheme, making use of its foreign--functions
interface.

The libraries support Ikarus, Mosh and Ypsilon Scheme; the package
supports @gnu{}+Linux systems.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/nausicaa/downloads}

@noindent
the project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/tree/master}

@noindent
Nettle is available at:

@center @url{http://www.lysator.liu.se/~nisse/nettle/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-nettle: (nausicaa-nettle).   Nettle for Nausicaa.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* ascii::                       @ascii{} encodings.
* md::                          Computing message digests.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* nettle::                      Nettle original documentation.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

@detailmenu
 --- The Detailed Node Listing ---

@ascii{} encodings

* ascii base16::                Hexadecimal encoding.

@end detailmenu
@end menu

@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides a binding to the Nettle C language cryptographic library.  It
is built upon Nausicaa/Scheme, making use of its foreign--functions
interface.

The libraries support Ikarus, Mosh and Ypsilon Scheme; the package
supports @gnu{}+Linux systems.

The Nettle package installs two libraries: @file{libnettle} for message
digests, randomness and symmetric cipher cryptography; @file{libhogweed}
for public key cryptography.  Consequently @value{PACKAGE} installs two
sets of libraries, one under the @code{nettle} hierarchy and one under
the @code{hogweed} hierarchy.

In the spirit of Nettle, @value{PACKAGE} provides only the low level
building blocks of the algorithms; this document focuses on proposing
ways to handle resources and to implement higher--level @api{}s.

The installed libraries are:

@table @library
@item foreign crypto nettle shared-object
@itemx foreign crypto hogweed shared-object
Each library exports the single binding @code{nettle-shared-object} and
@code{hogweed-shared-object}, respectively, which reference the foreign
shared library.

@item foreign crypto nettle sizeof
Exports bindings to constant values and data structures accessors for
both the @file{libnettle} and @file{libhogweed}.

@item foreign crypto nettle platform
@itemx foreign crypto hogweed platform
Each library exports one binding for each foreign function; the Scheme
bindings to the callout functions have the same name of the C functions,
so @cfunc{md5_init} is available as @func{md5_init}.  This library makes
the original Nettle documentation relevant for this package.
@nettleref{Top, Nettle}.

@item foreign crypto nettle primitives
@itemx foreign crypto nettle primitives
Exports one binding for each foreign function.  The Scheme functions
have the same name of the C functions, but with the underscores
converted to dashes; so @cfunc{md5_init} is available as
@func{md5-init}.

@item foreign crypto nettle
@itemx foreign crypto hogweed
Compound libraries: they reexport bindings from the @samp{primitives}
libraries and the constant values from the @samp{sizeof} library.

@item foreign crypto nettle compensated
@itemx foreign crypto hogweed compensated
Each library exports bindings to constructor functions making use of the
@library{compensations} library from Nausicaa/Scheme.
@nauref{compensations, Compensation stacks}.
@end table

@c page
@node ascii
@chapter @ascii{} encodings


The examples proposed in this chapter are about encoding data buffers in
@ascii{} strings.  @ref{nettle ascii}

@menu
* ascii base16::                Hexadecimal encoding.
* ascii base64::                Base64 encoding.
@end menu


@c page
@node ascii base16
@section Hexadecimal encoding


The following functions encode a Scheme string to a Scheme string in
hexadecimal digits:

@smallexample
(import (rnrs)
  (compensations)
  (foreign cstrings)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto nettle sizeof))

(define (str->base16 str)
  (with-compensations
    (let* ((in.ptr          (string->cstring/c str))
           (in.len          (strlen in.ptr))
           (out.len         (BASE16_ENCODE_LENGTH in.len))
           (out.ptr         (malloc-block/c out.len)))
      (base16_encode_update out.ptr in.len in.ptr)
      (cstring->string out.ptr out.len))))

(define (base16->str str)
  (let* ((in.ptr    (string->cstring/c str))
         (in.len    (strlen in.ptr))
         (b16*      (malloc-block/c sizeof-base16_decode_ctx))
         (out.len   (BASE16_DECODE_LENGTH in.len))
         (out.ptr   (malloc-block/c out.len))
         (out.len*  (malloc-small/c)))
    (pointer-set-c-unsigned-int! out.len* 0 out.len)
    (base16_decode_init   b16*)
    (base16_decode_update b16* out.len* out.ptr in.len in.ptr)
    (assert (= 1 (base16_decode_final  b16*)))
    (cstring->string out.ptr (pointer-ref-c-unsigned-int out.len* 0))))

(str->base16 "ABC")
@result{} "414243"

(base16->str "41424344")
@result{} "ABCD"
@end smallexample

@c page
@node ascii base64
@section Base64 encoding


The following functions encode a Scheme string to a Scheme string in
base64 digits:

@smallexample
(import (rnrs)
  (compensations)
  (foreign cstrings)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto nettle sizeof))

(define (str->base64 str)
  (with-compensations
    (let* ((in.ptr    (string->cstring/c str))
           (in.len    (strlen in.ptr))
           (b64*      (malloc-block/c sizeof-base64_encode_ctx))
           (out.len   (+ (BASE64_ENCODE_LENGTH in.len)
                         BASE64_ENCODE_FINAL_LENGTH))
           (out.ptr   (malloc-block/c out.len)))
      (let ((out.len1 (base64_encode_update b64* out.ptr
                                            in.len in.ptr)))
        (let ((out.len2 (base64_encode_final b64*
                          (pointer-add out.ptr out.len1))))
          (cstring->string out.ptr (+ out.len1 out.len2)))))))

(define (base64->str str)
  (let* ((in.ptr      (string->cstring/c str))
         (in.len      (strlen in.ptr))
         (b64*        (malloc-block/c sizeof-base64_decode_ctx))
         (out.len     (BASE64_DECODE_LENGTH in.len))
         (out.ptr     (malloc-block/c out.len))
         (out.len*    (malloc-small/c)))
    (pointer-set-c-unsigned-int! out.len* 0 out.len)
    (base64_decode_init   b64*)
    (base64_decode_update b64* out.len* out.ptr in.len in.ptr)
    (assert (= 1 (base64_decode_final b64*)))
    (cstring->string out.ptr
       (pointer-ref-c-unsigned-int out.len* 0))))

(str->base64 "Hello")
@result{} "SGVsbG8="

(base64->str "SGVsbG8=")
@result{} "Hello"
@end smallexample

@c page
@node md
@chapter Computing message digests


The examples proposed in this chapter are about computing data buffer
message digests.  @ref{nettle md}

@example
(with-compensations
  (let* ((ctx*    (malloc-block/c sizeof-md5_ctx))
         (buf.ptr (string->cstring "abc"))
         (buf.len (strlen buf.ptr)))
    (md5_init ctx*)
    (md5_update ctx* buf.len buf.ptr)
    (let* ((md.len MD5_DIGEST_SIZE)
           (md.ptr (malloc-block/c md.len)))
      (md5_digest ctx* md.len md.ptr)
      (memblock->string-hex (make-<memblock> md.ptr md.len #f)))))
@result{} "900150983CD24FB0D6963F7D28E17F72"
@end example

@c page

@include gpl-3.0.texiinc
@include fdl-1.3.texiinc
@include nettle.texiinc

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
