\input texinfo.tex
@c %**start of header
@setfilename nausicaa-nettle.info
@settitle Nettle for Nausicaa
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@macro condition{NAME}
@code{&\NAME\}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro sql{}
@acronym{SQL}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@macro axml{}
@acronym{XML}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro ssh{}
@acronym{SSH}
@end macro

@macro ssl{}
@acronym{SSL}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro tls{}
@acronym{TLS}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@macro nettleref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nettle}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Nettle for Nausicaa

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/Nettle

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-nettle

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2010

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides a binding to the Nettle C language cryptographic library.  It
is built upon Nausicaa/Scheme, making use of its foreign--functions
interface.

The libraries support Ikarus, Mosh and Ypsilon Scheme; the package
supports @gnu{}+Linux systems.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/nausicaa/downloads}

@noindent
the project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/tree/master}

@noindent
Nettle is available at:

@center @url{http://www.lysator.liu.se/~nisse/nettle/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-nettle: (nausicaa-nettle).   Nettle for Nausicaa.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* armor::                       @ascii{} armor encodings.
* md::                          Computing message digests.
* cipher::                      Symmetric cryptography.
* pubkey::                      Public key cryptography.
* random::                      Randomness generation.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* nettle::                      Nettle original documentation.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

@detailmenu
 --- The Detailed Node Listing ---

@ascii{} armor encodings

* armor base16::                Hexadecimal encoding.
* armor base64::                Base64 encoding.

Symmetric cryptography

* cipher ecb::                  Example of @acronym{ECB} mode.
* cipher cbc::                  Example of @acronym{CBC} mode.
* cipher ctr::                  Example of @acronym{CTR} mode.
* cipher arcfour::              Example using @acronym{ARCFOUR}.

Randomness generation

* random knuth::                Examples using Knuth's lagged
                                Fibonacci sequence.

@end detailmenu
@end menu

@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides a binding to the Nettle C language cryptographic library.  It
is built upon Nausicaa/Scheme, making use of its foreign--functions
interface.

The libraries support Ikarus, Mosh and Ypsilon Scheme; the package
supports @gnu{}+Linux systems.

The Nettle package installs two libraries: @file{libnettle} for message
digests, randomness and symmetric cipher cryptography; @file{libhogweed}
for public key cryptography.  Consequently @value{PACKAGE} installs two
sets of libraries, one under the @code{nettle} hierarchy and one under
the @code{hogweed} hierarchy.

In the spirit of Nettle, @value{PACKAGE} provides only the low--level
building blocks of the algorithms; this document focuses on examples and
on ways to handle resources.

The installed libraries are:

@table @library
@item foreign crypto nettle shared-object
@itemx foreign crypto hogweed shared-object
Each library exports the single binding @code{nettle-shared-object} and
@code{hogweed-shared-object}, respectively, which reference the foreign
shared library.

@item foreign crypto nettle sizeof
Exports bindings to constant values and data structures accessors for
both the @file{libnettle} and @file{libhogweed}.

@item foreign crypto nettle platform
@itemx foreign crypto hogweed platform
Each library exports one binding for each foreign function; the Scheme
bindings to the callout functions have the same name of the C functions,
so @cfunc{md5_init} is available as @func{md5_init}.  This library makes
the original Nettle documentation relevant for this package.
@ref{nettle} for the original documentation.
@end table

@c page
@node armor
@chapter @ascii{} armor encodings


The examples proposed in this chapter are about encoding data buffers in
@ascii{} strings.  @ref{nettle armor} for the original @api{}.

@menu
* armor base16::                Hexadecimal encoding.
* armor base64::                Base64 encoding.
@end menu

@c page
@node armor base16
@section Hexadecimal encoding


The following functions encode a Scheme string to a Scheme string in
hexadecimal digits:

@smallexample
(import (rnrs)
  (compensations)
  (foreign cstrings)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto nettle sizeof))

(define (str->base16 str)
  (with-compensations
    (let* ((in.ptr          (string->cstring/c str))
           (in.len          (strlen in.ptr))
           (out.len         (BASE16_ENCODE_LENGTH in.len))
           (out.ptr         (malloc-block/c out.len)))
      (base16_encode_update out.ptr in.len in.ptr)
      (cstring->string out.ptr out.len))))

(define (base16->str str)
  (let* ((in.ptr    (string->cstring/c str))
         (in.len    (strlen in.ptr))
         (b16*      (malloc-block/c sizeof-base16_decode_ctx))
         (out.len   (BASE16_DECODE_LENGTH in.len))
         (out.ptr   (malloc-block/c out.len))
         (out.len*  (malloc-small/c)))
    (pointer-set-c-unsigned-int! out.len* 0 out.len)
    (base16_decode_init   b16*)
    (base16_decode_update b16* out.len* out.ptr in.len in.ptr)
    (assert (= 1 (base16_decode_final  b16*)))
    (cstring->string out.ptr (pointer-ref-c-unsigned-int out.len* 0))))

(str->base16 "ABC")
@result{} "414243"

(base16->str "41424344")
@result{} "ABCD"
@end smallexample

@c page
@node armor base64
@section Base64 encoding


The following functions encode a Scheme string to a Scheme string in
base64 digits:

@smallexample
(import (rnrs)
  (compensations)
  (foreign cstrings)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto nettle sizeof))

(define (str->base64 str)
  (with-compensations
    (let* ((in.ptr    (string->cstring/c str))
           (in.len    (strlen in.ptr))
           (b64*      (malloc-block/c sizeof-base64_encode_ctx))
           (out.len   (+ (BASE64_ENCODE_LENGTH in.len)
                         BASE64_ENCODE_FINAL_LENGTH))
           (out.ptr   (malloc-block/c out.len)))
      (let ((out.len1 (base64_encode_update b64* out.ptr
                                            in.len in.ptr)))
        (let ((out.len2 (base64_encode_final b64*
                          (pointer-add out.ptr out.len1))))
          (cstring->string out.ptr (+ out.len1 out.len2)))))))

(define (base64->str str)
  (let* ((in.ptr      (string->cstring/c str))
         (in.len      (strlen in.ptr))
         (b64*        (malloc-block/c sizeof-base64_decode_ctx))
         (out.len     (BASE64_DECODE_LENGTH in.len))
         (out.ptr     (malloc-block/c out.len))
         (out.len*    (malloc-small/c)))
    (pointer-set-c-unsigned-int! out.len* 0 out.len)
    (base64_decode_init   b64*)
    (base64_decode_update b64* out.len* out.ptr in.len in.ptr)
    (assert (= 1 (base64_decode_final b64*)))
    (cstring->string out.ptr
       (pointer-ref-c-unsigned-int out.len* 0))))

(str->base64 "Hello")
@result{} "SGVsbG8="

(base64->str "SGVsbG8=")
@result{} "Hello"
@end smallexample

@c page
@node md
@chapter Computing message digests


The examples proposed in this chapter are about computing data buffer
message digests; @ref{nettle md} for the original @api{}.

The following functions compute the message digest and the @acronym{MAC}
of a Scheme string using the @acronym{MD5} algorithm; other algorithms
work in the same way.

@example
(import (rnrs)
  (compensations)
  (foreign cstrings)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto nettle sizeof))

(define (string->md5 str)
  (with-compensations
      (let* ((buf.ptr (string->cstring/c str))
             (buf.len (strlen buf.ptr))
             (ctx*    (malloc-block/c sizeof-md5_ctx)))
        (md5_init ctx*)
        (md5_update ctx* buf.len buf.ptr)
        (let* ((md.len MD5_DIGEST_SIZE)
               (md.ptr (malloc-block/c md.len)))
          (md5_digest ctx* md.len md.ptr)
          (memblock->string-hex
             (make-<memblock> md.ptr md.len #f))))))

(define (string->md5-hmac key str)
  (with-compensations
      (let* ((buf.ptr (string->cstring/c str))
             (buf.len (strlen buf.ptr))
             (key.ptr (string->cstring/c key))
             (key.len (strlen key.ptr))
             (ctx*    (malloc-block/c sizeof-hmac_md5_ctx)))
        (hmac_md5_set_key ctx* key.len key.ptr)
        (hmac_md5_update ctx* buf.len buf.ptr)
        (let* ((mac.len MD5_DIGEST_SIZE)
               (mac.ptr (malloc-block/c mac.len)))
          (hmac_md5_digest ctx* mac.len mac.ptr)
          (memblock->string-hex
             (make-<memblock> mac.ptr mac.len #f))))))

(string->md5 "abc")
@result{} "900150983CD24FB0D6963F7D28E17F72"

(string->md5-hmac "Jefe" "what do ya want for nothing?")
@result{} "750C783E6AB0B503EAA86E310A5DB738"
@end example

@c page
@node cipher
@chapter Symmetric cryptography


The examples proposed in this chapter are about encrypting and
decrypting data using symmetric key cipher algorithms; @ref{nettle
cipher} for the original @api{}.

@menu
* cipher ecb::                  Example of @acronym{ECB} mode.
* cipher cbc::                  Example of @acronym{CBC} mode.
* cipher ctr::                  Example of @acronym{CTR} mode.
* cipher arcfour::              Example using @acronym{ARCFOUR}.
@end menu

@c page
@node cipher ecb
@section Example of @acronym{ECB} mode


The following functions encrypt and decrypt a bytevector using the
@acronym{AES} cipher and @acronym{ECB} mode; other block cipher
algorithms work in the same way.  The bytevector has to have length
equal to an exact multiple of the algorithm's block size.

@example
(import (rnrs)
  (compensations)
  (foreign cstrings)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto nettle sizeof))

(define (aes-encrypt key bv)
  (with-compensations
    (let* ((in.ptr   (bytevector->pointer bv malloc-block/c))
           (in.len   (bytevector-length bv))
           (key.ptr  (string->cstring/c key))
           (key.len  (strlen key.ptr))
           (ou.len   AES_BLOCK_SIZE)
           (ou.ptr   (malloc-block/c ou.len))
           (aes*     (malloc-block/c sizeof-aes_ctx)))
      (aes_set_encrypt_key aes* key.len key.ptr)
      (aes_encrypt aes* in.len ou.ptr in.ptr)
      (pointer->bytevector ou.ptr ou.len))))

(define (aes-decrypt key bv)
  (with-compensations
    (let* ((in.ptr   (bytevector->pointer bv malloc-block/c))
           (in.len   (bytevector-length bv))
           (key.ptr  (string->cstring/c key))
           (key.len  (strlen key.ptr))
           (ou.len   AES_BLOCK_SIZE)
           (ou.ptr   (malloc-block/c ou.len))
           (aes*     (malloc-block/c sizeof-aes_ctx)))
      (aes_set_decrypt_key aes* key.len key.ptr)
      (aes_decrypt aes* in.len ou.ptr in.ptr)
      (pointer->bytevector ou.ptr ou.len))))

(define key
  "abcdefghilmnopqr")

(define data
  '#vu8(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))

(define encrypted-data
  '#vu8(219 250 97 26 40 100 248 163 58 250 12 50 207 131 251 234))

(aes-encrypt keyword data)
@result{} #vu8(219 250 97 26 40 100 248 163 58 250 12 50 207 131 251 234)

(aes-decrypt keyword encrypted-data)
@result{} #vu8(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
@end example

@c page
@node cipher cbc
@section Example of @acronym{CBC} mode


In the following example we encrypt and then decrypt two bytevectors
using the @acronym{AES} cipher and @acronym{CBC} mode; other block
cipher algorithms work in the same way.  The bytevectors have length
equal to the cipher's block size.

@example
(import (nausicaa)
  (compensations)
  (only (foreign ffi) make-c-callback*)
  (foreign cstrings)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto nettle sizeof))

(with-compensations
  (let* ((len        AES_BLOCK_SIZE)

         (iv        '#vu8(10 11 12 13 14 15 16 17 18 19
                          20 21 22 23 24 25))
         (iv.ptr     (bytevector->pointer iv malloc-block/c))

         (key       '#vu8(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
         (key.ptr   (bytevector->pointer key malloc-block/c))

         (data1     '#vu8(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
         (data1.ptr (bytevector->pointer key malloc-block/c))

         (data2     '#vu8(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
         (data2.ptr (bytevector->pointer key malloc-block/c))

         (aes*      (malloc-block/c sizeof-aes_ctx))

         (enc1.ptr  (malloc-block/c len))
         (enc2.ptr  (malloc-block/c len))

         (encrypt   (make-c-callback* void aes_encrypt
                       (void* unsigned void* void*))))

    (aes_set_encrypt_key aes* len key.ptr)
    (cbc_encrypt aes* encrypt len iv.ptr len enc1.ptr data1.ptr)
    (cbc_encrypt aes* encrypt len iv.ptr len enc2.ptr data2.ptr)

    (let ((iv.ptr   (bytevector->pointer iv malloc-block/c))
          (ou1.ptr  (malloc-block/c len))
          (ou2.ptr  (malloc-block/c len))
          (decrypt  (make-c-callback* void aes_decrypt
                       (void* unsigned void* void*))))

      (aes_set_decrypt_key aes* len key.ptr)
      (cbc_decrypt aes* decrypt len iv.ptr len ou1.ptr enc1.ptr)
      (cbc_decrypt aes* decrypt len iv.ptr len ou2.ptr enc2.ptr)

      ---))
@end example

@c page
@node cipher ctr
@section Example of @acronym{CTR} mode


In the following example we encrypt and then decrypt two bytevectors
using the @acronym{AES} cipher and @acronym{CTR} mode; other block
cipher algorithms work in the same way.  The bytevectors have length
equal to the cipher's block size.  Notice that we use the @acronym{AES}
encryption functions for both encryption and decryption; @ref{nettle
cipher modes ctr} for details.

@example
(import (nausicaa)
  (compensations)
  (only (foreign ffi) make-c-callback*)
  (foreign cstrings)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto nettle sizeof))

(with-compensations

  (let* ((len       AES_BLOCK_SIZE)

         (ic        '#vu8(10 11 12 13 14 15 16 17 18 19
                          20 21 22 23 24 25))
         (ic.ptr    (bytevector->pointer ic malloc-block/c))

         (key       '#vu8(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
         (key.ptr   (bytevector->pointer key malloc-block/c))

         (data1     '#vu8(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
         (data1.ptr (bytevector->pointer key malloc-block/c))

         (data2     '#vu8(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
         (data2.ptr (bytevector->pointer key malloc-block/c))

         (aes*      (malloc-block/c sizeof-aes_ctx))

         (enc1.ptr  (malloc-block/c len))
         (enc2.ptr  (malloc-block/c len))

         (encrypt   (make-c-callback* void aes_encrypt
                       (void* unsigned void* void*))))

    (aes_set_encrypt_key aes* len key.ptr)
    (ctr_crypt aes* encrypt len ic.ptr len enc1.ptr data1.ptr)
    (ctr_crypt aes* encrypt len ic.ptr len enc2.ptr data2.ptr)

    (let ((ic.ptr   (bytevector->pointer ic malloc-block/c))
          (ou1.ptr  (malloc-block/c len))
          (ou2.ptr  (malloc-block/c len)))

      (aes_set_encrypt_key aes* len key.ptr)
      (ctr_crypt aes* encrypt len ic.ptr len ou1.ptr enc1.ptr)
      (ctr_crypt aes* encrypt len ic.ptr len ou2.ptr enc2.ptr)

      ---)))
@end example

@c page
@node cipher arcfour
@section Example using @acronym{ARCFOUR}


In the following example we encrypt and then decrypt a bytevector using
the @acronym{ARCFOUR} stream cipher algorithm.  It uses the key setup
method outlined in the original Netttle documentation; @ref{nettle
cipher arcfour} for details.

@example
(import (nausicaa)
  (compensations)
  (foreign cstrings)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto nettle sizeof))

(define (arcfour-key-setup arcfour* key)
  (with-compensations
    (let* ((key.ptr   (string->cstring/c key))
           (key.len   (strlen key.ptr))
           (sha*      (malloc-block/c sizeof-sha256_ctx))
           (md.len    SHA256_DIGEST_SIZE)
           (md.ptr    (malloc-block/c md.len))
           (dummy.len 512)
           (dummy.ptr (malloc-block/c dummy.len)))
        (sha256_init sha*)
        (sha256_update sha* key.len key.ptr)
        (sha256_digest sha* md.len  md.ptr)
        (arcfour_set_key arcfour* md.len md.ptr)
        (arcfour_crypt arcfour* dummy.len dummy.ptr dummy.ptr))))

(define (arcfour-crypt key bv)
  (with-compensations
    (let* ((ctx*      (malloc-block/c sizeof-arcfour_ctx))
           (in.ptr    (bytevector->pointer bv malloc-block/c))
           (in.len    (bytevector-length bv))
           (ou.ptr    (malloc-block/c in.len)))
      (arcfour-key-setup ctx* key)
      (arcfour_crypt ctx* in.len ou.ptr in.ptr)
      (pointer->bytevector ou.ptr in.len))))

(arcfour-crypt "ciao" '#vu8(0 1 2 3 4 5 6))
@result{} #vu8(23 184 137 227 187 115 16)

(arcfour-crypt "ciao" '#vu8(23 184 137 227 187 115 16))
@result{} #vu8(0 1 2 3 4 5 6)
@end example

@c page
@node pubkey
@chapter Public key cryptography


The examples proposed in this chapter are about public key cryptography;
@ref{nettle pubkey} for the original @api{}.

@menu
* pubkey rsa::                  Usage examples for the @acronym{RSA} algorithm.
* pubkey dsa::                  Usage examples for the @acronym{DSA} algorithm.
@end menu

@c page
@node pubkey rsa
@section Usage examples for the @acronym{RSA} algorithm


The following examples show how to generate keys, sign and verify data,
encrypt and decrypt data using the @acronym{RSA} algorithm; all the
examples make use of the Nausicaa/MP package to operate on @code{mpz_t}
numbers; all the examples are meant to have the following opening:

@example
(import (rnrs)
  (receive)
  (compensations)
  (only (foreign ffi) make-c-callback*)
  (foreign cstrings)
  (foreign memory)
  (foreign math mp mpz)
  (foreign math mp sizeof)
  (foreign crypto nettle platform)
  (foreign crypto hogweed platform)
  (foreign crypto nettle sizeof))

(define (mpz/c)
  (letrec ((n (compensate
                  (malloc-block/c sizeof-mpz_t)
                (with
                 (mpz_clear n)))))
    (mpz_init n)
    n))
@end example

@menu
* pubkey rsa keygen::           Generating @acronym{RSA} key pairs.
* pubkey rsa sign::             Signing and verifying data
                                with @acronym{RSA}.
* pubkey rsa crypt::            Encrypting and decrypting data
                                with @acronym{RSA}.
@end menu

@c page
@node pubkey rsa keygen
@subsection Generating @acronym{RSA} key pairs


The following code generates a new key pair, then finalises it; it makes
use of Knuth's lagged Fibonacci pseudo--random number generator, which
is only suitable for debugging and examples:

@example
(with-compensations
  (let* ((random* (malloc-block/c sizeof-knuth_lfib_ctx))
         (pub*    (malloc-block/c sizeof-rsa_public_key))
         (pri*    (malloc-block/c sizeof-rsa_private_key)))
    (knuth_lfib_init random* 123)
    (rsa_public_key_init  pub*)
    (rsa_private_key_init pri*)
    (unless (= 1 (rsa_generate_keypair
                  pub* pri*
                  random*
                  (make-c-callback* void
                     knuth_lfib_random
                     (void* unsigned void*))
                  pointer-null
                  (make-c-callback* void
                     (lambda (unused i)
                       (display (integer->char i)))
                     (void* int))
                  1024 50))
      (error #f "error generating RSA key pair"))
    (unless (= 1 (rsa_public_key_prepare  pub*))
      (error #f "error preparing generated RSA public key"))
    (unless (= 1 (rsa_private_key_prepare pri*))
      (error #f "error preparing generated RSA private key"))

    --- ;do something with the keys

    (rsa_public_key_clear  pub*)
    (rsa_private_key_clear pri*)))
@end example

The following function generates a new key pair:

@example
(define (rsa-make-keypair n-size e-size
                          random-maker progress-printer)
  (with-compensations
    (let* ((pub*      (malloc sizeof-rsa_public_key))
           (pri*      (malloc sizeof-rsa_private_key)))
      (rsa_public_key_init  pub*)
      (rsa_private_key_init pri*)
      (when (= 0 e-size)
        (mpz_set_ui (struct-rsa_public_key-e-ref pub*) 65537))
      (unless (= 1 (rsa_generate_keypair
                    pub* pri*
                    pointer-null
                    (make-c-callback* void random-maker
                                      (void* unsigned void*))
                    pointer-null
                    (make-c-callback* void progress-printer
                                      (void* int))
                    n-size e-size))
        (error 'rsa-make-keypair
          "error generating RSA key pair"))
      (unless (= 1 (rsa_public_key_prepare  pub*))
        (error 'rsa-make-keypair
          "error preparing generated RSA public key"))
      (unless (= 1 (rsa_private_key_prepare pri*))
        (error 'rsa-make-keypair
          "error preparing generated RSA private key"))
      (values pub* pri*))))

(with-compensations
  (let ((random*  (malloc-block/c sizeof-knuth_lfib_ctx)))
    (knuth_lfib_init random* 123)
    (receive (pub* pri*)
        (rsa-make-keypair 1024 0
                          (lambda (unused buf.len buf.ptr)
                            (knuth_lfib_random random*
                                buf.len buf.ptr))
                          (lambda (unused i)
                            (display (integer->char i))))

      --- ;do something with the keys

      (rsa_public_key_clear  pub*)
      (rsa_private_key_clear pri*))))
@end example

@c page
@node pubkey rsa sign
@subsection Signing and verifying data with @acronym{RSA}


The following functions sign and verify the signature for a Scheme
string using the @acronym{RSA} and @acronym{MD5} algorithms:

@example
(define (rsa-md5-sign-string pri* str signature)
  (with-compensations
    (let* ((buf.ptr   (string->cstring/c str))
           (buf.len   (strlen buf.ptr))
           (md5*      (malloc-block/c sizeof-md5_ctx)))
      (md5_init md5*)
      (md5_update md5* buf.len buf.ptr)
      (rsa_md5_sign pri* md5* signature))))

(define (rsa-md5-verify-string pub* str signature)
  (with-compensations
    (let* ((buf.ptr   (string->cstring/c str))
           (buf.len   (strlen buf.ptr))
           (md5*      (malloc-block/c sizeof-md5_ctx)))
      (md5_init md5*)
      (md5_update md5* buf.len buf.ptr)
      (rsa_md5_verify pub* md5* signature))))

(define pub* ---) ;public key
(define pri* ---) ;private key

(with-compensations
  (let ((str       "calm like a bomb")
        (signature (mpz/c)))
    (rsa-md5-sign-string   pri* str signature)
    (rsa-md5-verify-string pub* str signature)))
@result{} 1
@end example

@c page
@node pubkey rsa crypt
@subsection Encrypting and decrypting data with @acronym{RSA}


The following code encrypts and decrypts a Scheme string using the
@acronym{RSA} algorithm; the pseudo--random numbers generator is used
only to pad input data:

@example
(define str "calm like a bomb")

(with-compensations
  (let ((random*   (malloc-block/c sizeof-knuth_lfib_ctx))
        (cipher    (mpz/c))
        (str.ptr   (string->cstring/c str))
        (str.len   (strlen str.ptr))
        (out.ptr   (malloc-block/c str.len))
        (out.len*  (malloc-small/c)))
    (knuth_lfib_init random* 123)
    (unless (= 1 (rsa_encrypt pub* random*
                     (make-c-callback* void knuth_lfib_random
                                       (void* unsigned void*))
                     str.len str.ptr cipher))
      (error #f "error encrypting message with RSA"))

    (pointer-set-c-unsigned-int! out.len* 0 str.len)
    (unless (= 1 (rsa_decrypt pri* out.len* out.ptr cipher))
      (error #f "error decrypting message with RSA"))

    (cstring->string out.ptr
       (pointer-ref-c-unsigned-int out.len* 0))))
@result{} "calm like a bomb"
@end example

@c page
@node pubkey dsa
@section Usage examples for the @acronym{DSA} algorithm


The following examples show how to generate keys, sign and verify data
using the @acronym{DSA} algorithm; all the examples are meant to have
the following opening:

@example
(import (rnrs)
  (receive)
  (compensations)
  (only (foreign ffi) make-c-callback*)
  (foreign cstrings)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto hogweed platform)
  (foreign crypto nettle sizeof))
@end example

@menu
* pubkey dsa keygen::           Generating @acronym{DSA} key pairs.
* pubkey dsa sign::             Signing and verifying data
                                with @acronym{DSA}.
@end menu

@c page
@node pubkey dsa keygen
@subsection Generating @acronym{DSA} key pairs


The following code generates a new key pair, then finalises it; it makes
use of Knuth's lagged Fibonacci pseudo--random number generator, which
is only suitable for debugging and examples:

@example
(with-compensations
  (let* ((random* (malloc-block/c sizeof-knuth_lfib_ctx))
         (pub*    (malloc-block/c sizeof-dsa_public_key))
         (pri*    (malloc-block/c sizeof-dsa_private_key)))
    (knuth_lfib_init random* 123)
    (dsa_public_key_init  pub*)
    (dsa_private_key_init pri*)
    (unless (= 1 (dsa_generate_keypair
                  pub* pri*
                  random*
                  (make-c-callback* void knuth_lfib_random
                     (void* unsigned void*))
                  pointer-null
                  (make-c-callback* void
                     (lambda (unused i)
                       (display (integer->char i)))
                     (void* int))
                  1024))
      (error #f "error generating DSA key pair"))

    --- ;do something with the keys

    (dsa_public_key_clear  pub*)
    (dsa_private_key_clear pri*)))
@end example

The following function generates a new key pair:

@example
(define (dsa-make-keypair bits random-maker progress-printer)
  (with-compensations
    (let* ((pub*      (malloc sizeof-dsa_public_key))
           (pri*      (malloc sizeof-dsa_private_key)))
      (dsa_public_key_init  pub*)
      (dsa_private_key_init pri*)
      (unless (= 1 (dsa_generate_keypair
                    pub* pri*
                    pointer-null
                    (make-c-callback* void random-maker
                                      (void* unsigned void*))
                    pointer-null
                    (make-c-callback* void progress-printer
                                      (void* int))
                    bits))
        (error 'dsa-make-keypair
          "error generating DSA key pair"))
      (values pub* pri*))))

(with-compensations
  (let ((random*  (malloc-block/c sizeof-knuth_lfib_ctx)))
    (knuth_lfib_init random* 123)
    (receive (pub* pri*)
        (dsa-make-keypair 1024
                          (lambda (unused buf.len buf.ptr)
                            (knuth_lfib_random random*
                               buf.len buf.ptr))
                          (lambda (unused i)
                            (display (integer->char i))))

      --- ;do something with the keys

      (dsa_public_key_clear  pub*)
      (dsa_private_key_clear pri*))))
@end example

@c page
@node pubkey dsa sign
@subsection Signing and verifying data with @acronym{DSA}


The following functions sign and verify the signature for a Scheme
string using the @acronym{DSA} algorithm:

@example
(define (dsa-sign-string pub* pri* str signature*)
  (with-compensations
    (let* ((buf.ptr   (string->cstring/c str))
           (buf.len   (strlen buf.ptr))
           (sha1*     (malloc-block/c sizeof-sha1_ctx))
           (random*   (malloc-block/c sizeof-knuth_lfib_ctx)))
      (sha1_init sha1*)
      (sha1_update sha1* buf.len buf.ptr)
      (knuth_lfib_init random* 123)
      (dsa_sign pub* pri* random*
                (make-c-callback* void
                   knuth_lfib_random (void* unsigned void*))
                sha1* signature*))))

(define (dsa-verify-string pub* str signature*)
  (with-compensations
    (let* ((buf.ptr   (string->cstring/c str))
           (buf.len   (strlen buf.ptr))
           (sha1*     (malloc-block/c sizeof-sha1_ctx)))
      (sha1_init sha1*)
      (sha1_update sha1* buf.len buf.ptr)
      (dsa_verify pub* sha1* signature*))))

(with-compensations
  (let ((str        "calm like a bomb")
        (signature* (malloc-block/c sizeof-dsa_signature)))
    (compensate
        (dsa_signature_init signature*)
      (with
       (dsa_signature_clear signature*)))
    (dsa-sign-string pub* pri* str signature*)
    (dsa-verify-string pub* str signature*)))
@result{} 1
@end example

@c page
@node random
@chapter Randomness generation


The examples proposed in this chapter are about pseudo--random numbers
generation; @ref{nettle random} for the original @api{}.

@menu
* random knuth::                Examples using Knuth's lagged
                                Fibonacci sequence.
@end menu

@c page
@node random knuth
@section Examples using Knuth's lagged Fibonacci sequence


The following function generates a bytevector of random bytes using
Knuth's lagged Fibonacci sequence algorithm.

@example
(import (nausicaa)
  (compensations)
  (foreign memory)
  (foreign crypto nettle platform)
  (foreign crypto nettle sizeof))

(define (knuth-lfib->bv seed buf.len)
  (with-compensations
    (let* ((ctx*    (malloc-block/c sizeof-knuth_lfib_ctx))
           (buf.ptr (malloc-block/c buf.len)))
      (knuth_lfib_init ctx* seed)
      (knuth_lfib_random ctx* buf.len buf.ptr)
      (pointer->bytevector buf.ptr buf.len))))

(knuth-lfib->bv 543 10)
@result{} #vu8(45 152 161 103 136 56 111 161 39 246)
@end example


@c page

@include gpl-3.0.texiinc
@include fdl-1.3.texiinc
@include nettle.texiinc

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
