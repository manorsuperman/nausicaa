\input texinfo.tex
@c %**start of header
@setfilename nausicaa-zlib.info
@settitle Nausicaa/Zlib
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro rsixref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@end macro

@macro rfiveref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r5rs}
@end macro

@macro ikarusref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,ikarus}
@end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Nausicaa/Zlib

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/Zlib

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-zlib

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marcomaggi@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2008, 2009

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a library
for @rnrs{6} Scheme that exposes the Zlib programming interface.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}); the project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/tree/master}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front--Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``@gnu{} Free
Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-zlib: (nausicaa-zlib).       Zlib for @rnrs{6} Scheme.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* constants::                   Constant values.
* struct::                      Data structure accessors and mutators.

Appendices

* zlib::                        Zlib compression library.
* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


@value{PACKAGE} is a part of the Nausicaa distribution of libraries for
@rnrs{6} Scheme implementations.  It exposes the @api{} of the popular
Zlib compression library at the Scheme level.  The installed libraries
are:

@example
(foreign zlib)
(foreign zlib sizeof)
@end example

@noindent
the exported @api{} is a map between foreign C language functions and
Scheme functions, so the original documentation of ZLib can be used as
reference.  @ref{zlib, Zlib compression library}

The @library{foreign zlib} library exports bindings for the functions,
while @library{foreign zlib sizeof} exports bindings for the constants
(like @samp{Z_STREAM_END} etc.) and the data structure accessors and
mutators.

The Scheme documentation focuses on providing usage example to
familiarise with the mapping and with methods to handle resources.

@c page
@node constants
@chapter Constant values


The following bindings are exported by @library{foreign zlib sizeof}.
@ref{zlib constants, Constants}


@defvr Constant sizeof-zstream
@defvrx Constant sizeof-gzheader
Size of the @samp{z_stream} and @samp{gz_header} data structures.
@end defvr


@defvr Constant Z_NO_COMPRESSION
@defvrx Constant Z_BEST_SPEED
@defvrx Constant Z_BEST_COMPRESSION
@defvrx Constant Z_DEFAULT_COMPRESSION
Select the compression level.
@end defvr


@defvr Constant Z_FILTERED
@defvrx Constant Z_HUFFMAN_ONLY
@defvrx Constant Z_RLE
@defvrx Constant Z_FIXED
@defvrx Constant Z_DEFAULT_STRATEGY
Select the compression algorithm.
@end defvr

@defvr Constant Z_NO_FLUSH
@defvrx Constant Z_PARTIAL_FLUSH
@defvrx Constant Z_SYNC_FLUSH
@defvrx Constant Z_FULL_FLUSH
@defvrx Constant Z_FINISH
@defvrx Constant Z_BLOCK
Constants used to configure the operations of the library.
@end defvr


@defvr Constant Z_OK
@defvrx Constant Z_STREAM_END
@defvrx Constant Z_NEED_DICT
@defvrx Constant Z_ERRNO
@defvrx Constant Z_STREAM_ERROR
@defvrx Constant Z_DATA_ERROR
@defvrx Constant Z_MEM_ERROR
@defvrx Constant Z_BUF_ERROR
@defvrx Constant Z_VERSION_ERROR
Return values from the foreign functions.
@end defvr


@defvr Constant Z_BINARY
@defvrx Constant Z_TEXT
@defvrx Constant Z_ASCII
@defvrx Constant Z_UNKNOWN
Data type values.
@end defvr


@defvr Constant Z_DEFLATED
Algorithm selection for @func{deflate}.
@end defvr


@defvr Constant Z_NULL
Bound to zero.
@end defvr

@c page
@node struct
@chapter Data structure accessors and mutators


The following bindings are exported by @library{foreign zlib sizeof}.
@ref{zlib types, Data types}


@deffn Syntax zstream-next_in-set! @var{pointer} @var{value}
@deffnx Syntax zstream-next_in-ref @var{pointer}
@deffnx Syntax zstream-avail_in-set! @var{pointer} @var{value}
@deffnx Syntax zstream-avail_in-ref @var{pointer}
@deffnx Syntax zstream-total_in-set! @var{pointer} @var{value}
@deffnx Syntax zstream-total_in-ref @var{pointer}
@deffnx Syntax zstream-next_out-set! @var{pointer} @var{value}
@deffnx Syntax zstream-next_out-ref @var{pointer}
@deffnx Syntax zstream-avail_out-set! @var{pointer} @var{value}
@deffnx Syntax zstream-avail_out-ref @var{pointer}
@deffnx Syntax zstream-total_out-set! @var{pointer} @var{value}
@deffnx Syntax zstream-total_out-ref @var{pointer}
@deffnx Syntax zstream-msg-set! @var{pointer} @var{value}
@deffnx Syntax zstream-msg-ref @var{pointer}
@deffnx Syntax zstream-data_type-set! @var{pointer} @var{value}
@deffnx Syntax zstream-data_type-ref @var{pointer}
@deffnx Syntax zstream-adler-set! @var{pointer} @var{value}
@deffnx Syntax zstream-adler-ref @var{pointer}
@deffnx Syntax zstream-zalloc-set! @var{pointer} @var{value}
@deffnx Syntax zstream-zalloc-ref @var{pointer}
@deffnx Syntax zstream-zfree-set! @var{pointer} @var{value}
@deffnx Syntax zstream-zfree-ref @var{pointer}
@deffnx Syntax zstream-opaque-set! @var{pointer} @var{value}
@deffnx Syntax zstream-opaque-ref @var{pointer}
Accessors and mutators for structures of type @samp{z_stream}.
@var{pointer} must be a pointer to such a data strcture.
@end deffn


@deffn Syntax gzheader-text-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-text-ref @var{pointer}
@deffnx Syntax gzheader-time-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-time-ref @var{pointer}
@deffnx Syntax gzheader-xflags-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-xflags-ref @var{pointer}
@deffnx Syntax gzheader-os-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-os-ref @var{pointer}
@deffnx Syntax gzheader-extra-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-extra-ref @var{pointer}
@deffnx Syntax gzheader-extra_len-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-extra_len-ref @var{pointer}
@deffnx Syntax gzheader-extra_max-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-extra_max-ref @var{pointer}
@deffnx Syntax gzheader-name-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-name-ref @var{pointer}
@deffnx Syntax gzheader-name_max-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-name_max-ref @var{pointer}
@deffnx Syntax gzheader-comment-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-comment-ref @var{pointer}
@deffnx Syntax gzheader-comm_max-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-comm_max-ref @var{pointer}
@deffnx Syntax gzheader-hcrc-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-hcrc-ref @var{pointer}
@deffnx Syntax gzheader-done-set! @var{pointer} @var{value}
@deffnx Syntax gzheader-done-ref @var{pointer}
Accessors and mutators for structures of type @samp{gz_header}.
@var{pointer} must be a pointer to such a data strcture.
@end deffn

@c page

@include zlib.texiinc
@include gpl-3.0.texiinc
@include fdl-1.3.texiinc

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
