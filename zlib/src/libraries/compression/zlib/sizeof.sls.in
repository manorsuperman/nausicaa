;;; (compression zlib sizeof) --
;;;
;;;Part of: Nausicaa
;;;Contents: foreign library inspection generation
;;;Date: Wed May 12, 2010
;;;
;;;Abstract
;;;
;;;
;;;
;;;Copyright (c) 2010 Marco Maggi <marco.maggi-ipsu@poste.it>
;;;
;;;This program is free software:  you can redistribute it and/or modify
;;;it under the terms of the  GNU General Public License as published by
;;;the Free Software Foundation, either version 3 of the License, or (at
;;;your option) any later version.
;;;
;;;This program is  distributed in the hope that it  will be useful, but
;;;WITHOUT  ANY   WARRANTY;  without   even  the  implied   warranty  of
;;;MERCHANTABILITY  or FITNESS FOR  A PARTICULAR  PURPOSE.  See  the GNU
;;;General Public License for more details.
;;;
;;;You should  have received  a copy of  the GNU General  Public License
;;;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;;


(library (compression zlib sizeof)
  (export c-sizeof c-strideof c-alignof c-valueof c-inspect
    pointer-c-ref pointer-c-set! pointer-c-accessor
    pointer-c-mutator array-c-ref array-c-set!
    array-c-pointer-to ZLIB_SHARED_OBJECT <struct-z_stream>
    <struct-gz_header>)
  (import (rnrs) (only (classes) define-label)
    (for (compression zlib clang-data-types) expand)
    (ffi syntax-helpers) (prefix (ffi pointers) ffi:)
    (prefix (ffi sizeof) ffi:)
    (prefix (ffi peekers-and-pokers) ffi:)
    (ffi extension-utilities))
  (define-sizeof-macros)
  (define sizeof-z_stream @SIZEOF_Z_STREAM@)
  (define alignof-z_stream @ALIGNOF_Z_STREAM@)
  (define strideof-z_stream @STRIDEOF_Z_STREAM@)
  (define sizeof-gz_header @SIZEOF_GZ_HEADER@)
  (define alignof-gz_header @ALIGNOF_GZ_HEADER@)
  (define strideof-gz_header @STRIDEOF_GZ_HEADER@)
  (define valueof-ZLIB_VERNUM @VALUEOF_ZLIB_VERNUM@)
  (define valueof-ZLIB_VERSION "@STRINGOF_ZLIB_VERSION@")
  (define valueof-Z_NO_FLUSH @VALUEOF_Z_NO_FLUSH@)
  (define valueof-Z_PARTIAL_FLUSH @VALUEOF_Z_PARTIAL_FLUSH@)
  (define valueof-Z_SYNC_FLUSH @VALUEOF_Z_SYNC_FLUSH@)
  (define valueof-Z_FULL_FLUSH @VALUEOF_Z_FULL_FLUSH@)
  (define valueof-Z_FINISH @VALUEOF_Z_FINISH@)
  (define valueof-Z_BLOCK @VALUEOF_Z_BLOCK@)
  (define valueof-Z_TREES @VALUEOF_Z_TREES@)
  (define valueof-Z_OK @VALUEOF_Z_OK@)
  (define valueof-Z_STREAM_END @VALUEOF_Z_STREAM_END@)
  (define valueof-Z_NEED_DICT @VALUEOF_Z_NEED_DICT@)
  (define valueof-Z_ERRNO @VALUEOF_Z_ERRNO@)
  (define valueof-Z_STREAM_ERROR @VALUEOF_Z_STREAM_ERROR@)
  (define valueof-Z_DATA_ERROR @VALUEOF_Z_DATA_ERROR@)
  (define valueof-Z_MEM_ERROR @VALUEOF_Z_MEM_ERROR@)
  (define valueof-Z_BUF_ERROR @VALUEOF_Z_BUF_ERROR@)
  (define valueof-Z_VERSION_ERROR @VALUEOF_Z_VERSION_ERROR@)
  (define valueof-Z_NO_COMPRESSION @VALUEOF_Z_NO_COMPRESSION@)
  (define valueof-Z_BEST_SPEED @VALUEOF_Z_BEST_SPEED@)
  (define valueof-Z_BEST_COMPRESSION
    @VALUEOF_Z_BEST_COMPRESSION@)
  (define valueof-Z_DEFAULT_COMPRESSION
    @VALUEOF_Z_DEFAULT_COMPRESSION@)
  (define valueof-Z_FILTERED @VALUEOF_Z_FILTERED@)
  (define valueof-Z_HUFFMAN_ONLY @VALUEOF_Z_HUFFMAN_ONLY@)
  (define valueof-Z_RLE @VALUEOF_Z_RLE@)
  (define valueof-Z_FIXED @VALUEOF_Z_FIXED@)
  (define valueof-Z_DEFAULT_STRATEGY
    @VALUEOF_Z_DEFAULT_STRATEGY@)
  (define valueof-Z_BINARY @VALUEOF_Z_BINARY@)
  (define valueof-Z_TEXT @VALUEOF_Z_TEXT@)
  (define valueof-Z_ASCII @VALUEOF_Z_ASCII@)
  (define valueof-Z_UNKNOWN @VALUEOF_Z_UNKNOWN@)
  (define valueof-Z_DEFLATED @VALUEOF_Z_DEFLATED@)
  (define valueof-Z_NULL @VALUEOF_Z_NULL@)
  (define ZLIB_SHARED_OBJECT "@ZLIB_SHARED_OBJECT@")
  (define-label
    <struct-z_stream>
    (virtual-fields (mutable opaque) (mutable zfree) (mutable zalloc)
      (mutable adler) (mutable data_type) (mutable msg)
      (mutable total_out) (mutable avail_out) (mutable next_out)
      (mutable total_in) (mutable avail_in) (mutable next_in)))
  (define-syntax <struct-z_stream>-opaque-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_OPAQUE@
         ?pointer
         @OFFSETOF_Z_STREAM_OPAQUE@
         ?value)]))
  (define-syntax <struct-z_stream>-opaque
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_OPAQUE@
         ?pointer
         @OFFSETOF_Z_STREAM_OPAQUE@)]))
  (define-syntax <struct-z_stream>-zfree-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_ZFREE@
         ?pointer
         @OFFSETOF_Z_STREAM_ZFREE@
         ?value)]))
  (define-syntax <struct-z_stream>-zfree
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_ZFREE@
         ?pointer
         @OFFSETOF_Z_STREAM_ZFREE@)]))
  (define-syntax <struct-z_stream>-zalloc-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_ZALLOC@
         ?pointer
         @OFFSETOF_Z_STREAM_ZALLOC@
         ?value)]))
  (define-syntax <struct-z_stream>-zalloc
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_ZALLOC@
         ?pointer
         @OFFSETOF_Z_STREAM_ZALLOC@)]))
  (define-syntax <struct-z_stream>-adler-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_ADLER@
         ?pointer
         @OFFSETOF_Z_STREAM_ADLER@
         ?value)]))
  (define-syntax <struct-z_stream>-adler
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_ADLER@
         ?pointer
         @OFFSETOF_Z_STREAM_ADLER@)]))
  (define-syntax <struct-z_stream>-data_type-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_DATA_TYPE@
         ?pointer
         @OFFSETOF_Z_STREAM_DATA_TYPE@
         ?value)]))
  (define-syntax <struct-z_stream>-data_type
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_DATA_TYPE@
         ?pointer
         @OFFSETOF_Z_STREAM_DATA_TYPE@)]))
  (define-syntax <struct-z_stream>-msg-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_MSG@
         ?pointer
         @OFFSETOF_Z_STREAM_MSG@
         ?value)]))
  (define-syntax <struct-z_stream>-msg
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_MSG@
         ?pointer
         @OFFSETOF_Z_STREAM_MSG@)]))
  (define-syntax <struct-z_stream>-total_out-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_TOTAL_OUT@
         ?pointer
         @OFFSETOF_Z_STREAM_TOTAL_OUT@
         ?value)]))
  (define-syntax <struct-z_stream>-total_out
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_TOTAL_OUT@
         ?pointer
         @OFFSETOF_Z_STREAM_TOTAL_OUT@)]))
  (define-syntax <struct-z_stream>-avail_out-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_AVAIL_OUT@
         ?pointer
         @OFFSETOF_Z_STREAM_AVAIL_OUT@
         ?value)]))
  (define-syntax <struct-z_stream>-avail_out
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_AVAIL_OUT@
         ?pointer
         @OFFSETOF_Z_STREAM_AVAIL_OUT@)]))
  (define-syntax <struct-z_stream>-next_out-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_NEXT_OUT@
         ?pointer
         @OFFSETOF_Z_STREAM_NEXT_OUT@
         ?value)]))
  (define-syntax <struct-z_stream>-next_out
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_NEXT_OUT@
         ?pointer
         @OFFSETOF_Z_STREAM_NEXT_OUT@)]))
  (define-syntax <struct-z_stream>-total_in-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_TOTAL_IN@
         ?pointer
         @OFFSETOF_Z_STREAM_TOTAL_IN@
         ?value)]))
  (define-syntax <struct-z_stream>-total_in
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_TOTAL_IN@
         ?pointer
         @OFFSETOF_Z_STREAM_TOTAL_IN@)]))
  (define-syntax <struct-z_stream>-avail_in-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_AVAIL_IN@
         ?pointer
         @OFFSETOF_Z_STREAM_AVAIL_IN@
         ?value)]))
  (define-syntax <struct-z_stream>-avail_in
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_AVAIL_IN@
         ?pointer
         @OFFSETOF_Z_STREAM_AVAIL_IN@)]))
  (define-syntax <struct-z_stream>-next_in-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_Z_STREAM_NEXT_IN@
         ?pointer
         @OFFSETOF_Z_STREAM_NEXT_IN@
         ?value)]))
  (define-syntax <struct-z_stream>-next_in
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_Z_STREAM_NEXT_IN@
         ?pointer
         @OFFSETOF_Z_STREAM_NEXT_IN@)]))
  (define-label
    <struct-gz_header>
    (virtual-fields (mutable done) (mutable hcrc) (mutable comm_max)
      (mutable comment) (mutable name_max) (mutable name)
      (mutable extra_max) (mutable extra_len) (mutable extra)
      (mutable os) (mutable xflags) (mutable time)
      (mutable text)))
  (define-syntax <struct-gz_header>-done-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_DONE@
         ?pointer
         @OFFSETOF_GZ_HEADER_DONE@
         ?value)]))
  (define-syntax <struct-gz_header>-done
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_DONE@
         ?pointer
         @OFFSETOF_GZ_HEADER_DONE@)]))
  (define-syntax <struct-gz_header>-hcrc-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_HCRC@
         ?pointer
         @OFFSETOF_GZ_HEADER_HCRC@
         ?value)]))
  (define-syntax <struct-gz_header>-hcrc
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_HCRC@
         ?pointer
         @OFFSETOF_GZ_HEADER_HCRC@)]))
  (define-syntax <struct-gz_header>-comm_max-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_COMM_MAX@
         ?pointer
         @OFFSETOF_GZ_HEADER_COMM_MAX@
         ?value)]))
  (define-syntax <struct-gz_header>-comm_max
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_COMM_MAX@
         ?pointer
         @OFFSETOF_GZ_HEADER_COMM_MAX@)]))
  (define-syntax <struct-gz_header>-comment-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_COMMENT@
         ?pointer
         @OFFSETOF_GZ_HEADER_COMMENT@
         ?value)]))
  (define-syntax <struct-gz_header>-comment
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_COMMENT@
         ?pointer
         @OFFSETOF_GZ_HEADER_COMMENT@)]))
  (define-syntax <struct-gz_header>-name_max-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_NAME_MAX@
         ?pointer
         @OFFSETOF_GZ_HEADER_NAME_MAX@
         ?value)]))
  (define-syntax <struct-gz_header>-name_max
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_NAME_MAX@
         ?pointer
         @OFFSETOF_GZ_HEADER_NAME_MAX@)]))
  (define-syntax <struct-gz_header>-name-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_NAME@
         ?pointer
         @OFFSETOF_GZ_HEADER_NAME@
         ?value)]))
  (define-syntax <struct-gz_header>-name
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_NAME@
         ?pointer
         @OFFSETOF_GZ_HEADER_NAME@)]))
  (define-syntax <struct-gz_header>-extra_max-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_EXTRA_MAX@
         ?pointer
         @OFFSETOF_GZ_HEADER_EXTRA_MAX@
         ?value)]))
  (define-syntax <struct-gz_header>-extra_max
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_EXTRA_MAX@
         ?pointer
         @OFFSETOF_GZ_HEADER_EXTRA_MAX@)]))
  (define-syntax <struct-gz_header>-extra_len-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_EXTRA_LEN@
         ?pointer
         @OFFSETOF_GZ_HEADER_EXTRA_LEN@
         ?value)]))
  (define-syntax <struct-gz_header>-extra_len
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_EXTRA_LEN@
         ?pointer
         @OFFSETOF_GZ_HEADER_EXTRA_LEN@)]))
  (define-syntax <struct-gz_header>-extra-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_EXTRA@
         ?pointer
         @OFFSETOF_GZ_HEADER_EXTRA@
         ?value)]))
  (define-syntax <struct-gz_header>-extra
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_EXTRA@
         ?pointer
         @OFFSETOF_GZ_HEADER_EXTRA@)]))
  (define-syntax <struct-gz_header>-os-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_OS@
         ?pointer
         @OFFSETOF_GZ_HEADER_OS@
         ?value)]))
  (define-syntax <struct-gz_header>-os
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_OS@
         ?pointer
         @OFFSETOF_GZ_HEADER_OS@)]))
  (define-syntax <struct-gz_header>-xflags-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_XFLAGS@
         ?pointer
         @OFFSETOF_GZ_HEADER_XFLAGS@
         ?value)]))
  (define-syntax <struct-gz_header>-xflags
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_XFLAGS@
         ?pointer
         @OFFSETOF_GZ_HEADER_XFLAGS@)]))
  (define-syntax <struct-gz_header>-time-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_TIME@
         ?pointer
         @OFFSETOF_GZ_HEADER_TIME@
         ?value)]))
  (define-syntax <struct-gz_header>-time
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_TIME@
         ?pointer
         @OFFSETOF_GZ_HEADER_TIME@)]))
  (define-syntax <struct-gz_header>-text-set!
    (syntax-rules ()
      [(_ ?pointer ?value)
       (pointer-c-set!
         @TYPEOF_GZ_HEADER_TEXT@
         ?pointer
         @OFFSETOF_GZ_HEADER_TEXT@
         ?value)]))
  (define-syntax <struct-gz_header>-text
    (syntax-rules ()
      [(_ ?pointer)
       (pointer-c-ref
         @TYPEOF_GZ_HEADER_TEXT@
         ?pointer
         @OFFSETOF_GZ_HEADER_TEXT@)])))


;;; end of file
