\input texinfo.tex
@c %**start of header
@setfilename nausicaa-clos.info
@settitle Tiny-CLOS for R6RS Scheme
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc


@c page
@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@macro bsd{}
@acronym{BSD}
@end macro

@c page
@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro ram{}
@acronym{RAM}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@c Remember that @url is already used by Texinfo.
@macro urla{}
@acronym{URL}
@end macro


@c page
@c ------------------------------------------------------------
@c Software related macros.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@macro glibc{}
@gnu{} C Library
@end macro

@c page
@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro icmp{}
@acronym{ICMP}
@end macro

@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro https{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@macro snmp{}
@acronym{SNMP}
@end macro

@c page
@c ------------------------------------------------------------
@c Arguments macros.
@c ------------------------------------------------------------

@macro vari{ARG}
@var{\ARG\1}
@end macro

@macro varii{ARG}
@var{\ARG\2}
@end macro

@macro variii{ARG}
@var{\ARG\3}
@end macro

@macro variv{ARG}
@var{\ARG\4}
@end macro

@macro varn{ARG}
@var{\ARG\n}
@end macro

@macro vark{ARG}
@var{\ARG\k}
@end macro

@macro varj{ARG}
@var{\ARG\j}
@end macro

@c ------------------------------------------------------------

@macro meta{ARG}
<\ARG\>
@end macro

@macro metai{ARG}
@meta{\ARG\1}
@end macro

@macro metaii{ARG}
@meta{\ARG\2}
@end macro

@macro metaiii{ARG}
@meta{\ARG\3}
@end macro

@macro metaiv{ARG}
@meta{\ARG\4}
@end macro

@macro metan{ARG}
@meta{\ARG\n}
@end macro

@macro metak{ARG}
@meta{\ARG\k}
@end macro

@macro metaj{ARG}
@meta{\ARG\j}
@end macro

@c page
@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro null{}
@code{NULL}
@end macro


@c page
@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{NAME}
@code{(\NAME\)}
@end macro

@macro module{NAME}
@code{\NAME\}
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@ignore
Separating the @srfi{}  macro from the number with a  '--' rather than a
'-' makes the expansion look ugly in menu entries under the Info reader.
IMHO this should not happen, but  it does; so we live with this, because
the main purpose of this document is to provide an Info version.
@end ignore
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@c ------------------------------------------------------------

@macro func{NAME}
@code{@sc{\NAME\}}
@end macro

@macro nil{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@c page
@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@macro rsixref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@end macro

@macro rfiveref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r5rs}
@end macro

@macro ikarusref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,ikarus}
@end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro



@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Tiny CLOS for @rnrs{6} Scheme

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/@clos{}

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-clos

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marcomaggi@@gna.org}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2008


@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a
repackaging of Tiny--@clos{} originally developed by Gregor Kiczales at
Xerox Park.  The package embeds the code found at:

@center @url{http://launchpad.net/r6rs-clos}

@noindent
which is modified by Christian Sloma and Abdulaziz Ghuloum.  See the
section ``Package License'' for the copying conditions.

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``Package License'', no Front--Cover Texts, and no Back--Cover Texts.  A
copy of the license is included in the section entitled ``@gnu{} Free
Documentation License''.
@end quotation
@end copying



@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-clos: (nausicaa-clos).       @clos{} for @rnrs{6} Scheme.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c ------------------------------------------------------------

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* class::                       Classes.
* define::                      Defining stuff.
* generic::                     Available generic functions.
* slot::                        Slot access.
* inspect::                     Class and object inspection.
* utils::                       Utility functions.

Appendices

* examples::                    Usage examples.
* internals::                   Implementation details.
* Package License::             Package License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.

@detailmenu
 --- The Detailed Node Listing ---

Overview of the package

* jargon::                      Jargon.

Class and object inspection

* inspect class::               Inspecting class objects.
* inspect instance::            Inspecting class instances.
* inspect generic::             Inspecting generic functions.

Usage examples

* examples basics::             Basic examples.

Implementation details

* internals allocation::        Built in allocation.
* internals slot access::       Accessing slots.

@end detailmenu
@end menu

@end ifnottex


@c page
@node overview
@chapter Overview of the package


@noindent
@clos{}, an acronym for Common Lisp Object System, is a standard set of
extensions to the Common Lisp language to help people do object--oriented
programming in Lisp.

Tiny--@clos{} is a Scheme version of @clos{} written in 1992 by Gregor
Kiczales at Xerox Park.  It differs from @clos{} syntactically, but the
basic approach to @acronym{OOP} is the same as in @clos{}.

@rnrs{6}--@clos{} is a port of Tiny--@clos{} to the latest (6th)
revision of the language standard for Scheme.  It uses the library
system that is new in @rnrs{6} to structure the code based on
functionality (bootstrap of core classes and generic functions, actual
implementation of the standard protocols, class layout, slot access
@dots{}).

@value{PACKAGE} is a repackaging of @rnrs{6}--@clos{}.


@menu
* jargon::                      Jargon.
@end menu


@c page
@node jargon
@section Jargon


It is difficult to express the concepts of programming with @clos{} with
no circular definitions.  What follows fails to do it.


@subsubheading Type
@cindex Definition of type

A type is the set of values for which it makes sense to define a
predicate to distinguish them from other values.  For example, when
programming a solution to a problem, it makes sense to define the
predicate @func{number?} to distinguish numbers from non--numbers:
numbers are a type of value.


@subsubheading Built in value
@cindex Definition of built in value

Everything that can be used as argument to a function in a Scheme
program is a built in value.  These are the booleans @true{} and
@false{}, the numbers, the symbols, the closures, the vectors, the
bytevectors, etc.  Syntaxes and libraries are not built in values.


@subsubheading Object
@cindex Definition of object

An object is an ensemble of built in values to which @clos{} assigns a
special meaning.  Each object is represented by a single built in value.
All the objects belong to a type: there exists a predicate to
distinguish objects from non--objects.  Subsets of all the objects may
form a type.

Single built in values are constructed by the Scheme implementation, but
objects (that is: ensembles of built in values) are allocated and
initialised by @clos{}, possibly using user provided functions.

Example: vectors are constructed by the Scheme implementation and each
element is set to default values; if @clos{} @emph{allocates} a vector,
it requests to the Scheme implementation the construction of a vector of
specified size; if @clos{} @emph{initialises} a vector, it stores
meaningful values in the vector.

Objects can hold data for various purposes, both for @clos{} itself and
for user's usage.


@subsubheading Primitive value
@cindex Definition of primitive value

Every built in value that is not interpreted by @clos{} as
representative of an object, is a primitive value.  Primitive values are
in the non--objects type.  @clos{} neither allocates nor initialises
primitive values.

@clos{} formally assigns a @emph{primitive type} to each primitive
value, using predicates in the Scheme implementation.  For example: all
the values that satisfy @func{number?} are formally of primitive type
@emph{number}; all the values that satisfy @func{vector?} are formally
of primitive type @emph{vector}.


@subsubheading Class object or simply class
@cindex Definition of class object

An object is a class if @clos{} makes use of it to:

@itemize
@item
describe how to allocate, initialise and dispatch methods for a type of
objects;

@item
describe how to dispatch methods for a type of primitive values.
@end itemize

Classes have symbols as public names; the name of such symbols must
begin with a @code{<} character and end with a @code{>} character
(angular parentheses).

A value for which the class @class{a} describes method dispatching, and
possibly allocation and initialisation, ``is of class @class{a}''.

Classes are organised in a hierarchy (a directed acyclic graph), so that
every built in value may belong to more than one class: it belongs to a
class and to all the class's ancestors, if any.

All the built in values are of class @class{top}, all the objects are of
class @class{object}, all the classes are of class @class{class}.


@subsubheading Superclass object or simply superclass
@cindex Definition of superclass object

If the class @class{a} is an ancestor of the class @class{b}, then:
@class{a} is a superclass of @class{b}.  If @class{a} is a superclass of
@class{b} and in the acyclic graph of dependencies it is linked directly
to it, then: @class{a} is a @emph{direct} superclass of @class{b}.

If @class{a} is a superclass of @class{b}, we can say that ``@class{b}
is a @class{a}''.


@subsubheading Subclass object or simply subclass
@cindex Definition of subclass object

If @class{a} is a superclass of @class{b}, then: @class{b} is a
subclass of @class{a}.


@subsubheading Instance object or simply instance
@cindex Definition of instance object

All the objects are instances.  Primitive values are not instances.  We
use the word instance, instead of object, when we want to highlight the
relation between an object and its class.


@subsubheading Meta class object or simply meta class
@cindex Definition of meta class object

Being an object, each class is an instance of a class.  A class that
describes how to allocate, initialise and dispatch methods for a type of
class is a meta class.  All the meta classes are of class @class{class}
and have the following class hierarchy:

@example
<top> -> <class> -> ---
@end example

@noindent
@class{class} itself is an instance of @class{class}.  Examples of class
hierarchies for meta classes:

@noindent
examples:

@example
<top> -> <class>
<top> -> <class> -> <primitive-class>
<top> -> <class> -> <procedure-class>
<top> -> <class> -> <procedure-class> -> <entity-class>
@end example


@subsubheading Primitive class object or simply primitive class
@cindex Definition of primitive class object

A class is a primitive class if it is formally assigned to a type of
primitive values, with the purpose of describing how to dispatch methods
for them.  Examples of primitive classes are @class{number} and
@class{vector}.

All the primitive classes are instances of @class{primitive-class}
(which is a meta class), and they have the following class hiearchy:

@example
<top> -> ---
@end example

@noindent
the class hierarchy of the meta class @class{primitive-class} is:

@example
<top> -> <class> -> <primitive-class>
@end example

Examples of primitive class:

@example
<top> -> <number>
<top> -> <vector>
@end example

@noindent
we can say that:

@itemize
@item
@class{number} being an object, the class of @class{number} is
@class{primitive-class};

@item
@class{number} being a class, the meta class of @class{number} is
@class{primitive-class};

@item
the superclass of @class{number} is @class{top};

@item
the numbers (which are primitive values) are of class @class{number}.
@end itemize


@subsubheading Entity class object or simply entity class
@cindex Definition of entity class object

It is the meta class of generic functions.


@c page
@node class
@chapter Classes


@menu
* class predefined::            Catalogue of predefined classes.
@end menu


@c page
@node class predefined
@section Catalogue of predefined classes


@menu
* class top::                   Universal base classes.
* class meta::                  Meta classes.
* class generic::               Generic functions and methods.
* class primitive::             Primitive classes.
@end menu


@c page
@node class top
@subsection Universal base classes


@deftp Class <top>
The base class for all the built in values.  This is actually the base
class for all the instance objects, and formally it this is the base
class for all the primitive values.
@end deftp


@deftp Class <object>
The base class for all the instance objects.
@end deftp


@c page
@node class meta
@subsection Meta classes


@deftp Class <class>
The base class for all the meta class objects.
@end deftp


@deftp Class <procedure-class>
Who knows?
@end deftp


@deftp Class <entity-class>
The base class for all the entity meta classes.
@end deftp


@deftp <primitive-class>
The meta class of all the primitive classes.
@end deftp


@c page
@node class generic
@subsection Generic functions and methods


@deftp Class <generic>
The class of generic functions.
@end deftp


@deftp Class <method>
The class of methods.
@end deftp


@c page
@node class primitive
@subsection Primitive classes


@menu
* class primitive lists::       List related classes.
* class primitive compound::    Non--list compound data.
* class primitive numbers::     Numeric primitive values.
* class primitive ports::       Port primitive values.
* class primitive values::      Other primitive values.
@end menu


@c page
@node class primitive lists
@subsubsection List related classes


@deftp <pair>
The primitive class for pairs.  Primitive values ``are of'' this class
if they satisfy the predicate @func{pair?}.
@end deftp


@deftp <null>
The primitive class for empty lists.  Primitive values ``are of'' this
class if they satisfy the predicate @func{null?}.
@end deftp


@c page
@node class primitive compound
@subsubsection Non--list compound data


@deftp <vector>
The primitive class for vectors.  Primitive values ``are of'' this class
if they satisfy the predicate @func{vector?}.
@end deftp


@deftp <string>
The primitive class for strings.  Primitive values ``are of'' this class
if they satisfy the predicate @func{string?}.
@end deftp


@c page
@node class primitive numbers
@subsubsection Numeric primitive values


@deftp <number>
The primitive class for numbers.  Primitive values ``are of'' this class
if they satisfy the predicate @func{number?}.
@end deftp


@c page
@node class primitive ports
@subsubsection Port primitive values


@deftp <input-port>
The primitive class for input ports.  Primitive values ``are of'' this
class if they satisfy the predicate @func{input-port?}.
@end deftp


@deftp <output-port>
The primitive class for output ports.  Primitive values ``are of'' this
class if they satisfy the predicate @func{output-port?}.
@end deftp


@c page
@node class primitive values
@subsubsection Other primitive values


@deftp <symbol>
The primitive class for symbols.  Primitive values ``are of'' this class
if they satisfy the predicate @func{symbol?}.
@end deftp


@deftp <boolean>
The primitive class for booleans.  Primitive values ``are of'' this
class if they satisfy the predicate @func{boolean?}, only @true{} and
@false{} will do.
@end deftp


@deftp <procedure>
The primitive class for procedures.  Primitive values ``are of'' this
class if they satisfy the predicate @func{procedure?}.
@end deftp


@deftp <char>
The primitive class for characters.  Primitive values ``are of'' this
class if they satisfy the predicate @func{char?}.
@end deftp


@c page
@node define
@chapter Defining new class types


The following syntaxes are available in the @library{clos user} library.


@deffn Syntax define-class @var{name} @var{list-of-supers} . @var{list-of-slot-defs}
Build a new class object and bind it to @var{name}.  The new class is
derived from @class{class}.

@var{name} is also the public name of the class, and it should be an
identifier enclosed in angular parentheses (example: @class{colour}).

@var{list-of-supers} is the list of superclasses of @var{name}.  It can
be the empty string, which means that the base class of @var{name} is
@class{object}.

@var{list-of-slot-defs} is the list of slot definitions, which can be a
list of symbols representing the names of the slots.
@end deffn


@deffn Syntax define-generic @var{name}
Define a new generic function: a collection of methods.
@end deffn


@deffn Syntax define-method @var{name} @var{args} . @var{body-forms}
Add a new method to the generic function @var{name}.  A method is the
ensemble of a signature for arguments and an ordinary function.

@var{args} is the list of argument specifications, each of which is a
list of two symbols: the argument formal name and the argument type
class.

@var{body-forms} are the forms in the body of the method's function.
@end deffn


@c ------------------------------------------------------------

@c page
@node generic
@chapter Available generic functions


All the following generic functions will accept new specialised methods.


@deffn {Generic Function} make @var{class-object} . @var{slot-values}
Build and return a new instance of @var{class-object} and initialises
the slots from @var{slot-values}.
@end deffn


@deffn {Generic Function} initialize @var{object} @var{init-args}
Initialise an already built @var{object} instance using the arbitrary
@var{init-args} value.
@end deffn


@deffn {Generic Function} allocate-instance @var{class-object}
Build and return a new instance object of class @var{class-object}.
@end deffn


@deffn {Generic Function} compute-getter-and-setter @var{class-object}

@end deffn


@deffn {Generic Function} compute-precedence-list @var{class-object}

@end deffn


@deffn {Generic Function} compute-slots @var{class-object}

@end deffn


@deffn {Generic Function} add-method @var{class-object}

@end deffn


@deffn {Generic Function} compute-apply-generic @var{class-object}

@end deffn


@deffn {Generic Function} compute-methods @var{class-object}

@end deffn


@deffn {Generic Function} compute-method-more-specific? @var{class-object}

@end deffn


@deffn {Generic Function} compute-apply-methods @var{class-object}

@end deffn


@deffn {Generic Function} print-object @var{object} @var{port}
Print a string representation of @var{object} to @var{port}.

A utility function that does this is @func{print-object-with-slots}.
@end deffn


@c ------------------------------------------------------------

@c page
@node slot
@chapter Slot access


@defun {slot-set!} @var{object} @var{slot-name} @var{new-value}
Store @var{new-value} in @var{slot-name} for @var{object}.

@var{object} should be an object.

@var{slot-name} must be the symbol representing the name of a slot in
@var{object}.
@end defun


@defun slot-ref @var{object} @var{slot-name}
Retrieve and return the current value of @var{slot-name} in
@var{object}.

@var{object} should be an object.

@var{slot-name} must be the symbol representing the name of a slot in
@var{object}.
@end defun



@c ------------------------------------------------------------

@c page
@node inspect
@chapter Class and object inspection


@menu
* inspect class::               Inspecting class objects.
* inspect instance::            Inspecting class instances.
* inspect generic::             Inspecting generic functions.
@end menu


@c ------------------------------------------------------------

@c page
@node inspect class
@section Inspecting class objects


The definitions below show usage examples that refer to the following
top--level program incipit:

@example
(import (rnrs)
  (clos core)
  (clos user)
  (srfi lightweight-testing))

(define-class <one> ()
  a b c)

(define-class <two> ()
  d e f)

(define-class <three> (<one> <two>)
  g h i)
@end example


@defun class-of @var{object}
Return the class object of @var{object}.  This function can be applied
to any object.  Examples:

@example
(check
  (class-of <one>)
  => <class>)

(check
  (class-of (make <one> 'a 1 'b 2 'c 3))
  => <one>)
@end example
@end defun


@defun class-definition-name @var{class-object}
Return the public name of @var{class-object}.

@example
(check
  (class-definition-name <one>)
  => '<one>)

(check (class-definition-name (class-of <one>))
       => '<class>)
@end example
@end defun


@defun class-direct-supers @var{class-object}
Return the list of class objects that are the superclasses of
@var{class-object}.  Examples:

@example
(check
  (map class-definition-name (class-direct-supers <one>))
  => '(<object>))

(check
  (map class-definition-name (class-direct-supers <three>))
  => '(<one> <two>))

(check
  (class-direct-supers <three>)
  => (list <one> <two>))
@end example
@end defun


@defun class-slots @var{class-object}
Return a list of slot specifications for @var{class-object},
@strong{including} the slots of the superclasses.  Examples:

@example
(check
  (class-slots <one>)
  => '((a) (b) (c)))

(check
  (class-slots <three>)
  => '((g) (h) (i)
       (a) (b) (c)
       (d) (e) (f)))
@end example
@end defun


@defun class-direct-slots @var{class-object}
Return a list of slot specifications for @var{class-object},
@strong{excluding} the slots of the superclasses.  Examples:

@example
(check
  (class-direct-slots <one>)
  => '((a) (b) (c)))

(check
  (class-direct-slots <three>)
  => '((g) (h) (i)))
@end example
@end defun


@defun class-precedence-list @var{class-object}
Return the ordered list of class objects that is used to match
@var{class-object} to the type of generic functions arguments.
@end defun


@c ------------------------------------------------------------

@c page
@node inspect instance
@section Inspecting class instances


The @func{class-of} function can be applied to instances, too.


@c ------------------------------------------------------------

@c page
@node inspect generic
@section Inspecting generic functions


The definitions below show usage examples that refer to the following
top--level program incipit:

@example
(import (clos core)
        (clos user)
        (srfi lightweight-testing))

(define-class <one> ()
  a b c)

(define-class <two> ()
  d e f)

(define-class <three> (<one> <two>)
  g h i)
@end example


@defun generic-methods

@end defun


@defun method-specializers

@end defun


@defun method-procedure

@end defun


@defun method-qualifier

@end defun


@c ------------------------------------------------------------

@c page
@node utils
@chapter Utility functions


@defun initialize-direct-slots @var{object} @var{class-object} @var{init-args}
Initialise the slots of @var{object} whose class is @var{class-object}
using @var{init-args}.  This function can be used to provide a base
implementation of the generic function @func{initialize}.

@var{init-args} must be a list of interspersed symbols and values, with
the symbols being the slot names of @var{object} .

Example:

@example
(define-class <colour>
  red green blue)

(define-method initialize 'after ((o <colour>) init-args)
  (initialize-direct-slots o <colour> init-args))

(define o (make <colour>
            'red        123
            'green      80
            'blue       200))
@end example
@end defun


@defun print-object-with-slots @var{object} @var{port}
Print a string representation of @var{object} to @var{port}.  This
function can be used to provide a base implementation of the generic
function @func{print-object}.

Example:

@example
(define-class <colour>
  red green blue)

(define-method print-object ((o <colour>) port)
  (print-object-with-slots o port))
@end example
@end defun


@c ------------------------------------------------------------

@c page
@node examples
@appendix Usage examples


@menu
* examples basics::             Basic examples.
@end menu


@c page
@node examples basics
@appendixsec Basic examples


To use @clos{} as programming facility means doing something like this:

@example
(import (rnrs)
  (clos core)
  (clos user)
  (srfi lightweight-testing))

;;; define ensembles of values

(define-class <one> ()
   a)

(define-class <two> ()
   b)

;;; define specialised functions

(define-generic doit)

(define-method doit ((o <top>))
  (cons o 123))

(define-method doit ((o <one>))
  (cons o 456))

(define-method doit ((o <two>))
  (cons o 789))

;;; use them

(let ((o 'ciao))
  (check
      (doit o)
    => '(ciao . 123))

(let ((o (make <one>)))
  (check
      (doit o)
    => (cons o 456)))

(let ((o (make <two>)))
  (check
      (doit o)
    => (cons o 789)))
@end example

@noindent
that is: to tag ensembles of values so that the correct function can be
selected for them.  In a couple of words: multimethod dispatching.


@c page
@node internals
@appendix Implementation details


This appendix documents the implementation details of the libraries in
the @rnrs{6} compliant sources.  The purpose of this appendix is to
provide some momentum in the comprehension of the code base.  Several
functions and variables described in this appendix are @strong{not}
exported by the libraries.


@menu
* internals allocation::        Built in allocation.
* internals slot access::       Accessing slots.
@end menu


@c page
@node internals allocation
@appendixsec Built in allocation


This section describes the default allocation of classes and instances.


@deftp {Record Type} instance-record
Record descriptor whose instances are used for both built in class
object and instance object allocations.  Fields description:

@table @code
@item class
it is initialised to the class of this object;

@item slots
a vector with one element for each direct slot of this object;

@item iproc
the instance's procedure: used for objects of class
@class{entity-class}, unused for all the other classes.
@end table
@end deftp


@defvar *entity-table*
A table of closure/record couples.  Both the closure and the record are
created and stored here by @func{really-allocate-entity-instance}.  This
table is queried by @func{get-instance-record}.

The record is of type @code{instance-record} and represents an entity
class.  When the closure is applied to arguments: it gets the value of
the @code{iproc} field in the record and applies it to the arguments.

In this document: the closure will be named @emph{entity closure}.
@end defvar


@defun really-allocate-instance @var{class} @var{field-count}
Instantiate a record of type @code{instance-record} and return it.  The
vector of slots will have @var{field-count} elements, initialised to an
unspecified value (it means: empty).  The @code{iproc} is set to
@false{}.
@end defun


@defun really-allocate-entity-instance @var{class} @var{field-count}
Allocate an instance of @class{entity-class} and return its entity
closure.  See the description of @code{*entity-table*} for details.
@end defun


@defun get-instance-record @var{obj}
@var{obj} must be a record of type @code{instance-record} or an entity
closure.  If @var{obj} is a record: @var{obj} itself is returned.  If
@var{obj} is an entity closure: the associated record is returned.
Otherwise @false{} is returned.
@end defun


@defun instance? @var{obj}
Return @true{} if @var{obj} is an @code{instance-record} record or an
entity closure, return @false{} otherwise.
@end defun


@defun instance-class @var{obj}
@var{obj} must be a record of type @code{instance-record} or an entity
closure.  This function returns value of the @code{class} field in the
record or entity record.
@end defun


@defun set-instance-class-to-self! @var{inst}
@var{inst} must be a record of type @code{instance-record}.  Set to
@var{inst} the value of the @code{class} field in @var{inst}.  It is
used in the bootstrap process to initialise @class{class}.
@end defun


@defun set-instance-proc! @var{inst} @var{proc}
@var{inst} must be a record of type @code{instance-record} or an entity
closure.  Set to @var{proc} the value of the @code{iproc} field in the
instance record associated to @var{inst}.
@end defun


@defun instance-ref @var{inst} @var{idx}
@defunx instance-set! @var{inst} @var{idx} @var{val}
@var{inst} must be a record of type @code{instance-record} or an entity
closure.  @var{idx} must be a valid index for the vector in the field
@code{slots} of the instance record.

These functions are the slot getter and setter for the instances for
which the instance record associated to @var{inst} is a class.
@end defun


@defun set-entity-print-name! @var{proc} @var{symbol}
Undocumented.
@end defun


@defun set-instance-printer! @var{proc}
Undocumented.
@end defun


@c page
@node internals slot access
@appendixsec Accessing slots


@defvar core-class-slot-names
The list of slot names for the built in classes.  The @code{slots} field
of the @code{instance-record} records is a vector with an element for
each of the following symbols.

@table @code
@item direct-supers
List of direct super classes for this class.  The format of the list
must be:

@example
(class ...)
@end example

@item direct-slots
List of direct slots for this class.  The format of the list must be:

@example
((slot-name slot-option ...) ...)
@end example

@item precedence-list
List of this class and all superclasses in the order in which they are
searched for methods.  The format of the list must be:

@example
(class ...)
@end example

@item slots
List of slots (both direct slots and slots of superclasses).  The format
of the list must be:

@example
((slot-name slot-option ...) ...)
@end example

@item number-of-fields
How many fields must be allocated for instances of this class.  An exact
positive integer.

@item field-initializers
List of initializers for the fields.  The format of the list must be:

@example
(initializer-fn ...)
@end example

Each initialiser is a closure with a slot identifier in its
environement; given an @code{instance-record} as argument, it
initialises to some value.

@item getters-and-setters
Association list of getter and setter functions for the slots of this
class, searchable by @code{slot-name}.  Each element in the list is a
slot access descriptor.  The format of the alist must be:

@example
((slot-name getter-fn setter-fn) ...)
@end example

Each getter and setter is a closure with a slot identifier in its
environement; given an @code{instance-record} as argument: the getter
returns the value of the slot, the setter stores a new value in the
slot.

@item definition-name
The name of the class.  It must be a symbol or @false{}.
@end table

The order does matter: the position of a symbol in the list is used to
compute the index of the slot in the vector.  Example using functions
described in @ref{internals allocation}:

@example
(let* ((inst      ...)  ; a record of type 'instance-record'
       (slot-name ...)  ; a symbol from 'core-class-slot-names'
       (idx       (position slot-name core-class-slot-names)))
  (instance-ref inst idx)
  (instance-set! inst idx ---))
@end example
@end defvar


@defvar core-class-slot-count
The number of elements in @code{core-class-slot-names}.
@end defvar


@defun get-slot-info @var{class} @var{slot-name}
@var{class} must be a record of type @code{instance-record}, used to
represent a class; this means that the slots in its @code{slots} field
are the ones in the description of by @code{core-class-slot-names}.
@var{slot-name} must be one of the symbols in the slot access
descriptors of @var{class}.

Retrieve the @code{getters-and-setters} slot value from @var{class},
then the slot access descriptor having @var{slot-name} as key.  Return
the slot access descriptor with format:

@example
(@var{slot-name} getter-fn setter-fn)
@end example

This function accesses the @code{getters-and-setters} slot using
@func{slot-ref}.
@end defun


@defun slot-ref @var{inst} @var{slot-name}
This is the public @api{} function exported by @library{clos slot-access}.

@var{inst} must be an instance object.  @var{slot-name} must be a symbol
identifying a slot.

Retrieve the class of @var{inst} using @func{instance-class}, then,
using @func{get-slot-info}, retrieve the slot access descriptor list:

@example
(slot-name getter-fn setter-fn)
@end example

@noindent
finally apply @code{getter-fn} to @var{inst}.
@end defun


@defun slot-set! @var{inst} @var{slot-name} @var{new-value}
This is the public @api{} function exported by @library{clos slot-access}.

@var{inst} must be an instance object.  @var{slot-name} must be a symbol
identifying a slot.

Retrieve the class of @var{inst} using @func{instance-class}, then,
using @func{get-slot-info}, retrieve the slot access descriptor list:

@example
(slot-name getter-fn setter-fn)
@end example

@noindent
finally apply @code{setter-fn} to @var{inst} and @var{new-value}.
@end defun


@quotation
@emph{Note} The use of @func{instance-class} to retrieve the class of
@var{inst} in @func{slot-ref} and @func{slot-set!} establishes that
@var{inst} has to be a record of type @code{instance-record} or an
entity closure.
@end quotation


@c page
@node Package License
@appendix Package License


Copyright @copyright{} 2008 Abdulaziz Ghuloum
Copyright @copyright{} 2007, 2008 Christian Sloma.
Copyright @copyright{} 1992 Xerox Corporation.  All Rights Reserved.@*

Use, reproduction, and preparation of derivative works are permitted.
Any copy of this software or of any derivative work must include the
above copyright notice of Xerox Corporation, this paragraph and the one
after it.  Any distribution of this software or derivative works must
comply with all applicable United States export control laws.

This software is made available AS IS, and XEROX CORPORATION DISCLAIMS
ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
NEGLIGENCE) OR STRICT LIABILITY, EVEN IF XEROX CORPORATION IS ADVISED OF
THE POSSIBILITY OF SUCH DAMAGES.


@c ------------------------------------------------------------

@c page
@node Documentation License
@appendix GNU Free Documentation License

@cindex FDL, GNU Free Documentation License
@center Version 1.1, March 2000

@display
Copyright @copyright{} 2000 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@enumerate 0
@item
PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document @dfn{free} in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

@item
APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The ``Document'', below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as ``you''.

A ``Modified Version'' of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A ``Secondary Section'' is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The ``Invariant Sections'' are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The ``Cover Texts'' are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A ``Transparent'' copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not ``Transparent'' is called ``Opaque''.

Examples of suitable formats for Transparent copies include plain
@sc{ascii} without markup, Texinfo input format, La@TeX{} input format,
@acronym{SGML} or @acronym{XML} using a publicly available
@acronym{DTD}, and standard-conforming simple @acronym{HTML} designed
for human modification.  Opaque formats include PostScript,
@acronym{PDF}, proprietary formats that can be read and edited only by
proprietary word processors, @acronym{SGML} or @acronym{XML} for which
the @acronym{DTD} and/or processing tools are not generally available,
and the machine-generated @acronym{HTML} produced by some word
processors for output purposes only.

The ``Title Page'' means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

@item
VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

@item
COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.

@item
MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

@enumerate A
@item
Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

@item
List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).

@item
State on the Title page the name of the publisher of the
Modified Version, as the publisher.

@item
Preserve all the copyright notices of the Document.

@item
Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

@item
Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

@item
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.

@item
Include an unaltered copy of this License.

@item
Preserve the section entitled ``History'', and its title, and add to
it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section entitled ``History'' in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

@item
Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the ``History'' section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

@item
In any section entitled ``Acknowledgments'' or ``Dedications'',
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgments
and/or dedications given therein.

@item
Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

@item
Delete any section entitled ``Endorsements''.  Such a section
may not be included in the Modified Version.

@item
Do not retitle any existing section as ``Endorsements''
or to conflict in title with any Invariant Section.
@end enumerate

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties---for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

@item
COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled ``History''
in the various original documents, forming one section entitled
``History''; likewise combine any sections entitled ``Acknowledgments'',
and any sections entitled ``Dedications''.  You must delete all sections
entitled ``Endorsements.''

@item
COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.

@item
AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an ``aggregate'', and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.

@item
TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.

@item
TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
@uref{http://www.gnu.org/copyleft/}.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
@end enumerate

@page
@appendixsubsec ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@smallexample
@group
  Copyright (C)  @var{year}  @var{your name}.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.1
  or any later version published by the Free Software Foundation;
  with the Invariant Sections being @var{list their titles}, with the
  Front-Cover Texts being @var{list}, and with the Back-Cover Texts being @var{list}.
  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
@end group
@end smallexample

If you have no Invariant Sections, write ``with no Invariant Sections''
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write ``no Front-Cover Texts'' instead of
``Front-Cover Texts being @var{list}''; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.


@c ------------------------------------------------------------

@c page
@node references
@appendix Bibliography and references



@c ------------------------------------------------------------

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
