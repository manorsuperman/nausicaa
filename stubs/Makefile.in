##
## Part of: Nausicaa/Stubs
## Contents: makefile
## Date: Fri Dec 19, 2008
## Time-stamp: <2008-12-19 18:32:19 marco>
##
## Abstract
##
##
##
## Copyright (c) 2008 Marco Maggi <marcomaggi@gna.org>
##
## This program is free software:  you can redistribute it and/or modify
## it under the terms of the  GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is  distributed in the hope that it  will be useful, but
## WITHOUT  ANY   WARRANTY;  without   even  the  implied   warranty  of
## MERCHANTABILITY  or FITNESS FOR  A PARTICULAR  PURPOSE.  See  the GNU
## General Public License for more details.
##
## You should  have received  a copy of  the GNU General  Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

#page
## ---------------------------------------------------------------------
## Module install functions.
## ---------------------------------------------------------------------

# Synopsis:
#
#   $(eval $(call nau-module-install-data,<PREFIX>,<ENABLE_VAR>))
#
# Description:
#
#   If <ENABLE_VAR>  is set  to 'yes': declare  the rules to  install, a
#   module of data files.
#
#     The list of files to install must be in "$(<PREFIX>_INSTLST)" and
#   the installation directory must be in "$(<PREFIX>_INSTDIR)".
#
define nau-module-install-data

.PHONY: $(1)-install $(1)-uninstall

$(1)-install:
ifeq ($$(strip $$($(2))),yes)
ifneq ($$(strip $$($(1)_INSTLST)),)
	$$(INSTALL_DIR) $$(DESTDIR)$$($(1)_INSTDIR)
	$$(foreach f,$$($(1)_INSTLST),\
	$$(INSTALL_DATA) $$(f) $$(DESTDIR)$$($(1)_INSTDIR);)
endif
endif

$(1)-uninstall:
ifeq ($$(strip $$($(2))),yes)
ifneq ($$(strip $$($(1)_INSTLST)),)
	$$(foreach f,$$($(1)_INSTLST),\
	$$(RM) $$(DESTDIR)$$($(1)_INSTDIR)/$$(notdir $$(f));)
	$$(RMDIR) $$(DESTDIR)$$($(1)_INSTDIR)
endif
endif

layout_DIRECTORIES	+= $$(DESTDIR)$$($(1)_INSTDIR)
layout_FILES		+= $$(foreach f,$$($(1)_INSTLST),$$(DESTDIR)$$($(1)_INSTDIR)/$$(notdir $$(f)))

endef

#page
## ---------------------------------------------------------------------
## Global variables and default values.
## ---------------------------------------------------------------------

PACKAGE_NAME		= @PACKAGE_NAME@
PACKAGE_VERSION		= @PACKAGE_VERSION@
PKG_ID			= @PKG_ID@

## ------------------------------------------------------------

nausicaa_ENABLE_POSIX	= @nausicaa_ENABLE_POSIX@


#page
## ---------------------------------------------------------------------
## Nausicaa pre-configuration of binary package variables.
## ---------------------------------------------------------------------

ifeq ($(strip $(package_BUILD_VERSION)),)
package_BUILD_VERSION	= 1nau
endif


#page
## ---------------------------------------------------------------------
## Binary package distribtion building variables.
## ---------------------------------------------------------------------

# The variable 'package_BUILD_VERSION'  should be defined in
# "Makefile.custom".  If  not we set a default  that does no
# harm.
ifeq ($(strip $(package_BUILD_VERSION)),)
package_BUILD_VERSION	= 1
endif

package_NAME		= $(PACKAGE_NAME)
package_VERSION		= $(PACKAGE_VERSION)

package_ARCH		= \
	$(firstword $(subst -, ,$(shell ../../infrastructure/config.guess)))
ifeq ($(strip $(package_ARCH)),)
package_ARCH		= noarch
endif

package_PREFIX		= \
$(package_NAME)-$(package_VERSION)-$(package_ARCH)-$(package_BUILD_VERSION)


#page
## ---------------------------------------------------------------------
## Directories.
## ---------------------------------------------------------------------

ifeq ($(strip $(TMPDIR)),)
TMPDIR		= /tmp
endif

## ---------------------------------------------------------------------

# The  other modules  will assume  that this  is  a relative
# directory  pathname, and  the full  pathname can  be built
# with: '$(PWD)/$(srcdir)'.
srcdir			= @srcdir@

# The  other modules  will assume  that this  is  a relative
# directory  pathname, and  the full  pathname can  be built
# with: '$(PWD)/$(builddir)'.
builddir		= @builddir@

## ---------------------------------------------------------------------

prefix			= @prefix@
exec_prefix		= @exec_prefix@

bindir			= @bindir@
datarootdir		= @datarootdir@
datadir			= @datadir@
docdir			= @datarootdir@/doc
htmldir			= @htmldir@
includedir		= @includedir@
infodir			= @infodir@
libdir			= @libdir@
libexecdir		= @libexecdir@
localstatedir		= @localstatedir@
mandir			= @mandir@
sbindir			= @sbindir@
sharedstatedir		= @sharedstatedir@
sysconfdir		= @sysconfdir@

PKG_DIR			= @PKG_DIR@
pkgdatadir		= @pkgdatadir@
pkgdocdir		= @pkgdocdir@
pkgexampledir		= @pkgexampledir@
pkginfodir		= @pkginfodir@
pkghtmldir		= @pkghtmldir@
pkgincludedir		= @pkgincludedir@
pkglibdir		= @pkglibdir@
pkglibexecdir		= @pkglibexecdir@
pkgsysconfdir		= @pkgsysconfdir@


#page
## ---------------------------------------------------------------------
## Common programs.
## ---------------------------------------------------------------------

BASH_PROGRAM	= @BASH_PROGRAM@
SHELL		= @SHELL@
@SET_MAKE@
MAKE_SILENT	= $(MAKE) --silent
MAKE_NODIR	= $(MAKE) --no-print-directory

BZIP		= @BZIP@
CAT		= @CAT@
CP		= @CP@ --force --verbose --preserve=mode,timestamp --
FIND		= @FIND@
GREP		= @GREP@
GAWK		= @GAWK@
GZIP		= @GZIP@
M4		= @M4@
MAKEINFO	= @MAKEINFO@
MKDIR		= @MKDIR@ --parents --verbose
MV		= @MV@ --verbose --
RM		= @RM@ --force --recursive --verbose --
RM_FILE		= @RM@ --force --verbose --
RM_SILENT	= @RM@ --force --recursive --
RMDIR		= @RMDIR@ --parents --ignore-fail-on-non-empty --
SED		= @SED@
SORT		= @SORT@
SUDO		= @SUDO@
SYMLINK		= @SYMLINK@ --symbolic
TAR		= @TAR@

## ---------------------------------------------------------------------

INSTALL			= @INSTALL@
INSTALL_DIR_MODE	?= 0755
INSTALL_BIN_MODE	?= 0555
INSTALL_DATA_MODE	?= 0444
INSTALL_LIB_MODE	?= 0444

INSTALL_DIR		= $(INSTALL) -p -m $(INSTALL_DIR_MODE) -d
INSTALL_BIN		= $(INSTALL) -p -m $(INSTALL_BIN_MODE)
INSTALL_DATA		= $(INSTALL) -p -m $(INSTALL_DATA_MODE)

## ------------------------------------------------------------

SORT_UNIQUE		= $(SORT) --unique
SORT_REVERSE		= $(SORT) --reverse
SORT_REVERSE_UNIQUE	= $(SORT) --reverse --unique

SPLIT_LIST_TO_ROWS	= $(SED) -e 's/ /\n/g'



#page
## ---------------------------------------------------------------------
## Main phony rules.
## ---------------------------------------------------------------------

.PHONY: all clean realclean clean-builddir

all:
clean:
realclean:	clean

clean-builddir:
	-@printf '*** The build directory is: %s\n' $(builddir)
	-@test -d .git ||\
	{ read -p '*** Are you sure to clean it? (yes/no) ' ANSWER; \
	test "$${ANSWER}" = yes && $(RM) $(builddir)/*; }

## ---------------------------------------------------------------------

.PHONY: install uninstall

install:
uninstall: uninstall-script-run

## ---------------------------------------------------------------------

.PHONY: layout layout-dirs layout-files

layout: layout-dirs layout-files
layout-dirs:
	@echo $(layout_DIRECTORIES)		| \
	$(SPLIT_LIST_TO_ROWS)			| \
	$(SORT_UNIQUE)

layout-files:
	@$(foreach f,$(sort $(layout_FILES)),echo $(f);)

## ---------------------------------------------------------------------

.PHONY: doc doc-clean doc-install doc-uninstall

doc:
doc-clean:
doc-install:
doc-uninstall:

all:		doc
clean:		doc-clean
install:	doc-install


#page
## ---------------------------------------------------------------------
## Uninstall script rules.
## ---------------------------------------------------------------------

uninstall_script_BUILDDIR	= $(builddir)/uninstall.d
uninstall_script_TARGET		= $(uninstall_script_BUILDDIR)/uninstall.sh
uninstall_script_INSTLST	= $(uninstall_script_TARGET)
uninstall_script_INSTDIR	= $(pkglibexecdir)

.PHONY: uninstall-script uninstall-script-clean uninstall-script-builddir
.PHONY: uninstall-script-install uninstall-script-uninstall
.PHONY: uninstall-script-run

# The uninstall  script is NOT registered  into the "layout_DIRECTORIES"
# and "layout_FILES" variables: this way we  can append it to the end of
# the script.

uninstall-script: uninstall-script-builddir
	@{								\
	  echo -e '#!/bin/sh\n#\n# Executing this script will remove the package:\n#\n#\t$(PKG_ID)\n#\n# *** WARNING ***\n#\n# Do not run  this script if you use a  package management\n# system,  like the  one of  Slackware Linux.  Rely  on it\n# for package removal.  This script is only for emergency.\n\nset -e\n';			\
	  echo -e '$(RM_FILE) \\';					\
	  $(foreach f,$(sort $(layout_FILES)),echo -e '\t$(f) \\';)	\
	  echo -e '\n$(RMDIR) \\';					\
	  echo $(layout_DIRECTORIES)				| \
		$(SPLIT_LIST_TO_ROWS)				| \
		$(SORT_REVERSE_UNIQUE)				| \
		{ while read; do echo -e "\\t$${REPLY} \\" ; done; };	\
	  echo -e '\n$(RM_FILE) $(DESTDIR)$(uninstall_script_INSTDIR)/uninstall.sh';\
	  echo '$(RMDIR) $(DESTDIR)$(pkglibexecdir)';			\
	  echo -e '\n### end of file';					\
	} >$(uninstall_script_TARGET)

uninstall-script-builddir:
	-@test -d $(uninstall_script_BUILDDIR) || $(MKDIR) $(uninstall_script_BUILDDIR)

uninstall-script-clean:
	-$(RM) $(uninstall_script_TARGET)

uninstall-script-install:
	$(INSTALL_DIR) $(DESTDIR)$(uninstall_script_INSTDIR)
	$(INSTALL_BIN) $(uninstall_script_TARGET) $(DESTDIR)$(uninstall_script_INSTDIR)

uninstall-script-uninstall:
	$(RM) $(DESTDIR)$(uninstall_script_INSTDIR)/$(notdir $(uninstall_script_TARGET))
	$(RMDIR) $(DESTDIR)$(uninstall_script_INSTDIR)

uninstall-script-run:
	$(SHELL) $(uninstall_script_TARGET)

## ---------------------------------------------------------------------

all:		uninstall-script
clean:		uninstall-script-clean
install:	uninstall-script-install


#page
## ------------------------------------------------------------
## C language stuff.
## ------------------------------------------------------------

CC		= @CC@
CPP		= @CPP@
AR		= @AR@ rc
RANLIB		= @RANLIB@
STRIP		= @STRIP@
GDB		= @GDB@

## ------------------------------------------------------------

# Notice that '-std=c99' is appended to 'CC' by the Autoconf
# macro 'AC_PROG_CC_C99'.
C_DEFAULT	?= -pipe -fPIC
C_WARNINGS	?= -Wall -W -Wextra -pedantic \
			-Wmissing-prototypes \
			-Wpointer-arith -Wcast-qual -Wcast-align \
			-Wwrite-strings -Wnested-externs \
			-Wstrict-prototypes -Wshadow

## ------------------------------------------------------------
## Preprocessor stuff.

DEFS		= @DEFS@
INCLUDES	= @INCLUDES@ -I. -I$(srcdir)
CPPFLAGS	= @CPPFLAGS@ $(DEFS) $(INCLUDES)

## ------------------------------------------------------------
## Linker stuff.

LIBS		= @LIBS@
LDFLAGS		= @LDFLAGS@
LDFLAGS_RPATH	= @LDFLAGS_RPATH@
LDFLAGS_DL	= @LDFLAGS_DL@

## ------------------------------------------------------------

GNU_C_FLAGS	= @GNU_C_FLAGS@ $(C_DEFAULT) $(C_WARNINGS)
ALL_CFLAGS	= $(GNU_C_FLAGS) $(CPPFLAGS)
CFLAGS		= @CFLAGS@
OBJEXT		= @OBJEXT@

## ------------------------------------------------------------

NO_MINUS_C_MINUS_O	= @NO_MINUS_C_MINUS_O@
ifeq ($(strip $(NO_MINUS_C_MINUS_O)),)
CC_COMPILE_OUTPUT	= -c -o
else
CC_COMPILE_OUTPUT	= -o
endif

CC_COMMAND_LINE		= $(CC) $(ALL_CFLAGS) $(CFLAGS)
CC_COMPILE		= $(CC_COMMAND_LINE) $(CC_COMPILE_OUTPUT)
CC_BUILD_PROGRAM	= $(CC_COMMAND_LINE) $(LDFLAGS) $(LIBS) -o
CC_BUILD_LIBRARY	= $(CC_COMMAND_LINE) -shared $(LDFLAGS) $(LIBS) -o


#page
## ------------------------------------------------------------
## Rules.
## ------------------------------------------------------------

objects_BUILDDIR		= $(builddir)/objects.d
libraries_BUILDDIR		= $(builddir)/libraries.d

.PHONY: objects-builddir libraries-builddir

objects-builddir:
	-@test -d $(objects_BUILDDIR) || $(MKDIR) $(objects_BUILDDIR)

libraries-builddir:
	-@test -d $(libraries_BUILDDIR) || $(MKDIR) $(libraries_BUILDDIR)

## ------------------------------------------------------------

nausicaa_posix_SOURCES		= $(srcdir)/src/nausicaa-posix.c
nausicaa_posix_OBJECTS		= $(addprefix $(objects_BUILDDIR)/,\
				     $(notdir $(nausicaa_posix_SOURCES:.c=.$(OBJEXT))))
nausicaa_posix_LIBNAME		= libnausicaa-posix.so
nausicaa_posix_LIBRARY		= $(libraries_BUILDDIR)/$(nausicaa_posix_LIBNAME)
nausicaa_posix_TARGETS		= $(nausicaa_posix_LIBRARY)
nausicaa_posix_CLEANFILES	= $(nausicaa_posix_TARGETS) $(nausicaa_posix_OBJECTS)

nausicaa_posix_INSTLST		= $(nausicaa_posix_TARGETS)
nausicaa_posix_INSTDIR		= $(libdir)

vpath	%.h		$(srcdir)
vpath	%.$(OBJEXT)	$(builddir)

.PHONY: nausicaa-posix-all nausicaa-posix-clean

nausicaa-posix-all: objects-builddir libraries-builddir $(nausicaa_posix_LIBRARY)

nausicaa-posix-clean:
	-$(RM) $(nausicaa_posix_CLEANFILES)

$(eval $(call nau-module-install-data,nausicaa_posix,nausicaa_ENABLE_POSIX))

ifeq ($(strip $(nausicaa_ENABLE_POSIX)),yes)

$(nausicaa_posix_OBJECTS) : $(objects_BUILDDIR)/%.$(OBJEXT) : $(srcdir)/src/%.c
	$(CC_COMPILE) $(@) $(<)

$(nausicaa_posix_LIBRARY) : $(nausicaa_posix_OBJECTS)
	$(CC_BUILD_LIBRARY) $(@) $(^)

endif

all:		nausicaa-posix-all
clean:		nausicaa-posix-clean
install:	nausicaa_posix-install
uninstall:	nausicaa_posix-uninstall


#page
## ------------------------------------------------------------
## Autoconfiguration.
## ------------------------------------------------------------

.PHONY: nothing

# This target is to allow one to update the 'Makefile', if required
# without doing anything else; if the 'Makefile' does not need updating:
# nothing happens. This target is required by the 'develstuff.sh'
# script when querying the 'Makefile' for variable values. If the ':'
# command is not used, and the target is left with no commands, 'make'
# will print the message "Nothing to be done for 'nothing'"; we do not
# want to fill the user's terminal with this.
nothing:
	@:

Makefile: $(srcdir)/Makefile.in $(srcdir)/configure $(builddir)/config.status
	$(builddir)/config.status

config.status: $(srcdir)/configure
	$(builddir)/config.status --recheck

## ------------------------------------------------------------

#page
## ---------------------------------------------------------------------
## Binary distribution.
## ---------------------------------------------------------------------

ifeq ($(strip $(nausicaa_COMPRESSOR)),bzip2)
bindist_PACKAGE_EXTENSION	= .tar.bz2
bindist_TAR_COMPRESS_FLAG	= --bzip2
else
bindist_PACKAGE_EXTENSION	= .tar.gz
bindist_TAR_COMPRESS_FLAG	= --gzip
endif

# This is the file  name of the binary distribution tarball.
# Notice that there is no directory part.
bindist_PACKAGE_NAME	= $(package_PREFIX)$(bindist_PACKAGE_EXTENSION)

# This is  the root directory for  temporary installation of
# files
bindist_PACKAGE_TOP_BUILDDIR	= $(TMPDIR)/$(PKG_ID)

# This is where the produced tarball will be finally stored.
bindist_BUILDDIR		= $(PWD)/$(builddir)/bindist.d

# This is the full pathname of the tarball.
bindist_TARBALL_PATHNAME	= $(bindist_BUILDDIR)/$(bindist_PACKAGE_NAME)

# The flags to hand to "tar" when building the tarball.
bindist_TAR_FLAGS		= --create $(bindist_TAR_COMPRESS_FLAG) --verbose

# By executing this command we get a list of the files in
# the bindist tarball.
bindist_LIST	= $(TAR) --list $(bindist_TAR_COMPRESS_FLAG) --file=$(bindist_TARBALL_PATHNAME)

## ---------------------------------------------------------------------

.PHONY: bindist bindist-clean bindist-builddir bindist-top-builddir
.PHONY: bindist-clean-top-builddir bindist-clean-builddir

bindist: bindist-clean bindist-builddir uninstall-script
	$(MAKE) install DESTDIR=$(bindist_PACKAGE_TOP_BUILDDIR)
	$(MAKE) uninstall-script-install DESTDIR=$(bindist_PACKAGE_TOP_BUILDDIR)
	cd $(bindist_PACKAGE_TOP_BUILDDIR); \
	$(TAR) $(bindist_TAR_FLAGS) --file=$(bindist_TARBALL_PATHNAME) .
	$(MAKE) bindist-clean-top-builddir

bindist-clean: bindist-clean-top-builddir bindist-clean-builddir

bindist-top-builddir:
	test -d $(bindist_PACKAGE_TOP_BUILDDIR) || $(MKDIR) $(bindist_PACKAGE_TOP_BUILDDIR)

bindist-clean-top-builddir:
	-$(RM) $(bindist_PACKAGE_TOP_BUILDDIR)

bindist-builddir:
	test -d $(bindist_BUILDDIR) || $(MKDIR) $(bindist_BUILDDIR)

bindist-clean-builddir:
	-$(RM) $(bindist_BUILDDIR)


#page
## ---------------------------------------------------------------------
## Slackware packaging: common variables.
## ---------------------------------------------------------------------

# This is  the file name  of the Slackware  package.  Notice
# that there is no directory part.
slack_PACKAGE_NAME	= $(package_PREFIX).tgz

# This  is the  package prefix,  it  is used  to remove  the
# package.
slack_PACKAGE_PREFIX	= $(package_PREFIX)

# This is  the root directory for  temporary installation of
# files.
slack_PACKAGE_TOP_BUILDDIR	= $(TMPDIR)/$(PKG_ID)

# This  is the  root directory  for building  packages.  The
# rules for standard packages will set it to:
#
#   $(slack_PACKAGE_TOP_BUILDDIR)
#
# the rules for local packages will set it to:
#
#   $(slack_PACKAGE_TOP_BUILDDIR)/$(prefix)
#
slack_PACKAGE_BUILDDIR	?=

# This is where the produced package will be finally stored.
slack_BUILDDIR		= $(PWD)/$(builddir)/slackware.d

# This is  the pathname of the  Slackware packages registry.
# The standard package rules will set it to:
#
#   $(slack_REGISTRY_DIR)
#
# while the local package rules will set it to:
#
#   $(prefix)$(slack_REGISTRY_DIR)
#
slack_REGISTRY		?=
slack_REGISTRY_DIR	= /var/log/packages

# Try  to  read from  the  system  the  name of  an  already
# installed package.  It is used to upgrade.
slack_INSTALLED_PACKAGE	= \
	$(firstword $(notdir $(wildcard $(slack_REGISTRY)/$(package_NAME)-*)))

# This is the environment for the Slackware package handling
# tools.
slack_ENV		?=

slack_MAKEPKG_PROGRAM	= @slack_MAKEPKG_PROGRAM@
slack_MAKEPKG_FLAGS	?= --chown y
slack_MAKEPKG		= $(slack_ENV) $(slack_SUDO) $(slack_MAKEPKG_PROGRAM) $(slack_MAKEPKG_FLAGS)

slack_INSTALLPKG_PROGRAM= @slack_INSTALLPKG_PROGRAM@
slack_INSTALLPKG_FLAGS	?=
slack_INSTALLPKG	= $(slack_ENV) $(slack_SUDO) $(slack_INSTALLPKG_PROGRAM) $(slack_INSTALLPKG_FLAGS)

slack_REMOVEPKG_PROGRAM	= @slack_REMOVEPKG_PROGRAM@
slack_REMOVEPKG_FLAGS	?=
slack_REMOVEPKG		= $(slack_ENV) $(slack_SUDO) $(slack_REMOVEPKG_PROGRAM) $(slack_REMOVEPKG_FLAGS)

slack_UPGRADEPKG_PROGRAM= @slack_UPGRADEPKG_PROGRAM@
slack_UPGRADEPKG_FLAGS	?= --verbose --reinstall
slack_UPGRADEPKG	= $(slack_ENV) $(slack_SUDO) $(slack_UPGRADEPKG_PROGRAM) $(slack_UPGRADEPKG_FLAGS)


#page
## ---------------------------------------------------------------------
## Slackware packaging: private building rules.
## ---------------------------------------------------------------------

# The following rules are meant  to be invoked only by other
# rules.
#
# Notice  that,  by  default,  GNU tar  preserves  the  file
# modification times  so the FASL  times will be  newer than
# the corresponding .sls times in the Slackware package.

.PHONY: private-slackware        private-slackware-install
.PHONY: private-slackware-remove private-slackware-upgrade

private-slackware: slackware-clean slackware-builddir
	$(MAKE) install DESTDIR=$(slack_PACKAGE_TOP_BUILDDIR)
	$(INSTALL_DIR) $(slack_PACKAGE_BUILDDIR)/install
	$(INSTALL_DATA) $(builddir)/meta.d/slackware/slack-desc $(slack_PACKAGE_BUILDDIR)/install
	$(MAKE) slackware-aux
	cd $(slack_PACKAGE_BUILDDIR); \
	$(slack_MAKEPKG) $(slack_PACKAGE_NAME); \
	$(slack_SUDO) $(MV) $(slack_PACKAGE_NAME) $(slack_BUILDDIR)

private-slackware-install:
	cd $(slack_BUILDDIR); \
	$(slack_INSTALLPKG) $(slack_PACKAGE_NAME)

private-slackware-remove:
	$(slack_REMOVEPKG) $(slack_PACKAGE_PREFIX)

private-slackware-upgrade:
	cd $(slack_BUILDDIR); \
	$(slack_UPGRADEPKG) $(slack_INSTALLED_PACKAGE)%$(slack_PACKAGE_NAME)


#page
## ---------------------------------------------------------------------
## Slackware packaging: auxiliary rules.
## ---------------------------------------------------------------------

.PHONY: slackware-builddir slackware-aux

slackware-builddir:
	-test -d $(slack_BUILDDIR) || $(MKDIR) $(slack_BUILDDIR)

slackware-top-builddir:
	-test -d $(slack_PACKAGE_TOP_BUILDDIR) || $(MKDIR) $(slack_PACKAGE_TOP_BUILDDIR)

# This is for auxiliary rules: it is freely available to the
# user.  It  will be  invoked just before  running "makepkg"
# (see the 'slackware' rule).
slackware-aux:

## ---------------------------------------------------------------------

.PHONY: slackware-clean slackware-clean-top-builddir slackware-clean-builddir

slackware-clean: slackware-clean-top-builddir slackware-clean-builddir

slackware-clean-top-builddir:
	-$(slack_SUDO) $(RM) $(slack_PACKAGE_TOP_BUILDDIR)

slackware-clean-builddir:
	-$(slack_SUDO) $(RM) $(slack_BUILDDIR)


#page
## ---------------------------------------------------------------------
## Slackware packaging: standard package build.
## ---------------------------------------------------------------------

slackware_STANDARD_ENV	= \
	PATH=/sbin:$(PATH)					\
	slack_PACKAGE_BUILDDIR=$(slack_PACKAGE_TOP_BUILDDIR)	\
	slack_REGISTRY=$(slack_REGISTRY_DIR)

## ---------------------------------------------------------------------

.PHONY: slackware        slackware-install
.PHONY: slackware-remove slackware-upgrade

slackware:
	$(MAKE) private-slackware		$(slackware_STANDARD_ENV)
	$(MAKE) slackware-clean-top-builddir	$(slackware_STANDARD_ENV)

slackware-install:
	$(MAKE) private-slackware-install	$(slackware_STANDARD_ENV)

slackware-remove:
	$(MAKE) private-slackware-remove	$(slackware_STANDARD_ENV)

slackware-upgrade:
	$(MAKE) private-slackware-upgrade	$(slackware_STANDARD_ENV)


#page
## ---------------------------------------------------------------------
## Slackware packaging: local package build.
## ---------------------------------------------------------------------

slackware_LOCAL_ENV	= \
	PATH=/sbin:$(PATH)						\
	slack_PACKAGE_BUILDDIR=$(slack_PACKAGE_TOP_BUILDDIR)/$(prefix)	\
	slack_REGISTRY=$(prefix)$(slack_REGISTRY_DIR)			\
	slack_ENV=ROOT=$(prefix)

## ---------------------------------------------------------------------

.PHONY: local-slackware        local-slackware-install
.PHONY: local-slackware-remove local-slackware-upgrade

local-slackware:
	$(MAKE) private-slackware		$(slackware_LOCAL_ENV)
	$(MAKE) slackware-clean-top-builddir	$(slackware_LOCAL_ENV)

local-slackware-install:
	$(MAKE) private-slackware-install	$(slackware_LOCAL_ENV)

local-slackware-remove:
	$(MAKE) private-slackware-remove	$(slackware_LOCAL_ENV)

local-slackware-upgrade:
	$(MAKE) private-slackware-upgrade	$(slackware_LOCAL_ENV)

## ---------------------------------------------------------------------

.PHONY: abi abu

abi:
	$(MAKE) all
	$(MAKE) local-slackware local-slackware-install slack_SUDO=$(SUDO)
abu:
	$(MAKE) all
	$(MAKE) local-slackware local-slackware-upgrade slack_SUDO=$(SUDO)




#page
## ---------------------------------------------------------------------
## RedHat packaging.
## ---------------------------------------------------------------------

# This is the file name  of the RedHat package.  Notice that
# there is no directory part.
redhat_PACKAGE_NAME	= $(package_PREFIX).rpm

# This is  the root directory for  temporary installation of
# files.
redhat_PACKAGE_TOP_BUILDDIR	= $(TMPDIR)/$(PKG_ID)

# This is the root directory for building packages.
redhat_PACKAGE_BUILDDIR	?= $(redhat_PACKAGE_TOP_BUILDDIR)/BUILD

# This is where the produced package will be finally stored.
redhat_BUILDDIR		= $(PWD)/$(builddir)/redhat.d

## ---------------------------------------------------------------------

# This is the environment for the RedHat package handling
# tools.
redhat_ENV		?=

redhat_CORE_PROGRAM	= @redhat_CORE_PROGRAM@

redhat_BUILD_PROGRAM	= @redhat_BUILD_PROGRAM@
redhat_BUILD_FLAGS	= -v --buildroot $(redhat_PACKAGE_BUILDDIR) -bb
redhat_BUILD		= $(redhat_ENV) $(redhat_BUILD_PROGRAM) $(redhat_BUILD_FLAGS)


redhat_SPEC_FILE	= $(PKG_ID).spec
redhat_GENERIC_SPEC	= meta.d/redhat/spec-file
redhat_SPECIFIC_SPEC	= meta.d/redhat/$(redhat_SPEC_FILE)

## ---------------------------------------------------------------------

.PHONY: redhat

redhat: bindist redhat-clean
	$(INSTALL_DIR) $(redhat_PACKAGE_TOP_BUILDDIR)
	$(INSTALL_DIR) $(redhat_PACKAGE_TOP_BUILDDIR)/BUILD
	$(INSTALL_DIR) $(redhat_PACKAGE_TOP_BUILDDIR)/SPECS
	$(INSTALL_DIR) $(redhat_PACKAGE_TOP_BUILDDIR)/RPMS/i386
	$(INSTALL_DIR) $(redhat_PACKAGE_TOP_BUILDDIR)/RPMS/$(package_ARCH)
	$(CP) $(redhat_GENERIC_SPEC) $(redhat_SPECIFIC_SPEC)
	$(bindist_LIST) | \
	$(SED) -e 's%^\./%/%' -e '\%^/$$%d' \
		>> $(redhat_SPECIFIC_SPEC)
	$(INSTALL_DATA) $(redhat_SPECIFIC_SPEC) $(redhat_PACKAGE_TOP_BUILDDIR)/SPECS
	$(MAKE) install DESTDIR=$(redhat_PACKAGE_BUILDDIR)
	cd $(redhat_PACKAGE_TOP_BUILDDIR)/SPECS; $(redhat_BUILD) $(redhat_SPEC_FILE)

redhat-clean:
	-$(RM) $(redhat_PACKAGE_BUILDDIR)


#page
## ---------------------------------------------------------------------
## Pacman packaging.
## ---------------------------------------------------------------------

# This is the file name of  the Pacman package.  Notice that there is no
# directory part.
pacman_PACKAGE_NAME	= $(package_PREFIX).rpm

# This is the package prefix, it is used to remove the package.
pacman_PACKAGE_PREFIX	= $(package_PREFIX)

# This is the root directory for temporary installation of files.
pacman_PACKAGE_TOP_BUILDDIR	= $(TMPDIR)/$(PKG_ID)

# This is the root directory for building packages.
pacman_PACKAGE_BUILDDIR	?= $(pacman_PACKAGE_TOP_BUILDDIR)/BUILD

# This is where the produced package will be finally stored.
pacman_BUILDDIR		= $(PWD)/$(builddir)/pacman.d

# Try  to  read from  the  system  the  name of  an  already
# installed package.  It is used to upgrade.
pacman_INSTALLED_PACKAGE	=

## ---------------------------------------------------------------------

# This is the environment for the Pacman package handling
# tools.
pacman_ENV		?=

pacman_PROGRAM		= @pacman_PROGRAM@

pacman_BUILD_FLAGS	= -v --buildroot $(pacman_PACKAGE_BUILDDIR) -bb
pacman_BUILD		= $(pacman_ENV) $(pacman_BUILD_PROGRAM) $(pacman_BUILD_FLAGS)

pacman_SPEC_FILE	= $(PKG_ID).spec
pacman_GENERIC_SPEC	= meta.d/pacman/spec-file
pacman_SPECIFIC_SPEC	= meta.d/pacman/$(pacman_SPEC_FILE)

## ---------------------------------------------------------------------

# .PHONY: pacman

# pacman: bindist pacman-clean
# 	$(INSTALL_DIR) $(pacman_PACKAGE_TOP_BUILDDIR)
# 	$(INSTALL_DIR) $(pacman_PACKAGE_TOP_BUILDDIR)/BUILD
# 	$(INSTALL_DIR) $(pacman_PACKAGE_TOP_BUILDDIR)/SPECS
# 	$(INSTALL_DIR) $(pacman_PACKAGE_TOP_BUILDDIR)/RPMS/i386
# 	$(INSTALL_DIR) $(pacman_PACKAGE_TOP_BUILDDIR)/RPMS/$(package_ARCH)
# 	$(CP) $(pacman_GENERIC_SPEC) $(pacman_SPECIFIC_SPEC)
# 	$(bindist_LIST) | \
# 	$(SED) -e 's%^\./%/%' -e '\%^/$$%d' \
# 		>> $(pacman_SPECIFIC_SPEC)
# 	$(INSTALL_DATA) $(pacman_SPECIFIC_SPEC) $(pacman_PACKAGE_TOP_BUILDDIR)/SPECS
# 	$(MAKE) install DESTDIR=$(pacman_PACKAGE_BUILDDIR)
# 	cd $(pacman_PACKAGE_TOP_BUILDDIR)/SPECS; $(pacman_BUILD) $(pacman_SPEC_FILE)

# pacman-clean:
# 	-$(RM) $(pacman_PACKAGE_BUILDDIR)


#page
## ---------------------------------------------------------------------
## End of makefile.
## ---------------------------------------------------------------------

.PHONY: echo-variable echo-list-variable

# Use this to echo a variable to stdout; example:
#
#	$ make echo-variable VARIABLE=slack_PACKAGE_NAME
#
echo-variable:
	@echo $($(VARIABLE))

# Use this to  echo a variable to stdout  interpreting it as
# list of strings; example:
#
#	$ make echo-list-variable VARIABLE=FILES
#
echo-list-variable:
	@$(foreach f,$($(VARIABLE)),echo $(f);)




### end of file
