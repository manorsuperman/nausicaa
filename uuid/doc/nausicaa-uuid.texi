\input texinfo.tex
@c %**start of header
@setfilename nausicaa-uuid.info
@settitle OSSP UUID for Nausicaa
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@c ------------------------------------------------------------
@c Application specific macros.
@c ------------------------------------------------------------

@macro uuid{}
@acronym{UUID}
@end macro

@macro ossp{}
@acronym{OSSP}
@end macro

@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro ietf{}
@acronym{IETF}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      OSSP UUID for Nausicaa

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/UUID

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-uuid

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2009

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, a
distribution of libraries for @rnrs{6} Scheme impmentations; it provides
a binding to @ossp{} @uuid{}.  The package is built upon
Nausicaa/Scheme, making use of its foreign functions interface.

@ossp{} @uuid{} is an @acronym{ISO}-C:1999 application programming
interface and corresponding command line interface for the generation of
@acronym{DCE} 1.1, @acronym{ISO}/@acronym{IEC} 11578:1996 and @rfc{}
4122 compliant Universally Unique Identifier (@uuid{}).

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/nausicaa/downloads}

The project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/tree/master}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-uuid: (nausicaa-uuid).       @value{TITLE}
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* constants::                   Constant values and data types
                                inspection.
* primitives::                  Primitive functions.
* compensations::               Compensated constructors.

Appendices

* uuid::                        The original manual page of @uuid{}
                                version 1.6.2.
* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


@value{PACKAGE} is a distribution of libraries for @rnrs{6} Scheme
implementations; it provides a binding to @ossp{} @uuid{}.  The package is
built upon Nausicaa/Scheme, making use of its foreign functions
interface.

@ossp{} @uuid{} is an @acronym{ISO}-C:1999 application programming
interface and corresponding command line interface for the generation of
@acronym{DCE} 1.1, @acronym{ISO}/@acronym{IEC} 11578:1996 and @ietf{}
@rfc{} 4122 compliant Universally Unique Identifier (@uuid{}).

The installed libraries are:

@table @library
@item foreign uuid shared-object
Exports the single binding @code{ossp-uuid-shared-object}, referencing
the @ossp{} @uuid{} shared library.

@item foreign uuid sizeof
Exports bindings for constant values (like @code{UUID_MAKE_V1}) and data
types inspection.

@item foreign uuid platform
Exports a binding for each function in the @ossp{} @uuid{}.  It
implements a one--to--one map between foreign functions and Scheme
functions; the Scheme functions have the same name of the foreign ones,
so @cfunc{uuid_create} is available as @func{uuid_create}.

@item foreign uuid primitives
Exports a binding for each foreign function, implementing marshaling or
arguments and return values; the Scheme functions have the same name of
the foreign ones, but with underscores turned into dashes; so
@cfunc{uuid_create} is available as @func{uuid-create}.

@item foreign uuid
Exports the high level @api{}: all the bindings to constants from
@library{foreign uuid sizeof} and all the bindings from @library{foreign
uuid primitives}.

@item foreign uuid compensated
Exports bindings for constructors and destructors making use of the
@library{compensations} library.  @nauref{compensations, Compensation
stacks}.
@end table

@c page
@node constants
@chapter Constant values and data types inspection


The following bindings are exported by @library{foreign uuid sizeof} and
re--exported by @library{foreign uuid}.


@deffn Constant uuid_rc_t
@deffnx Constant sizeof-uuid_rc_t
@deffnx Constant strideof-uuid_rc_t
@deffnx Constant alignof-uuid_rc_t
Type inspection for the @code{uuid_rc_t} C language data type.
@code{uuid_rc_t} is bound to a Scheme symbol among the ones defined by
@library{foreign ffi}.
@end deffn


@deffn Constant uuid_fmt_t
@deffnx Constant sizeof-uuid_fmt_t
@deffnx Constant strideof-uuid_fmt_t
@deffnx Constant alignof-uuid_fmt_t
Type inspection for the @code{uuid_fmt_t} C language data type.
@code{uuid_fmt_t} is bound to a Scheme symbol among the ones defined by
@library{foreign ffi}.
@end deffn


@deffn Constant UUID_LEN_BIN
@deffnx Constant UUID_LEN_STR
@deffnx Constant UUID_LEN_SIV
Encoding octet stream lengths.
@end deffn


@deffn Constant UUID_FMT_BIN
@deffnx Constant UUID_FMT_STR
@deffnx Constant UUID_FMT_SIV
@deffnx Constant UUID_FMT_TXT
Import/export format selectors
@end deffn


@deffn Constant UUID_RC_OK
@deffnx Constant UUID_RC_ARG
@deffnx Constant UUID_RC_MEM
@deffnx Constant UUID_RC_SYS
@deffnx Constant UUID_RC_INT
@deffnx Constant UUID_RC_IMP
Return codes of @ossp{} @uuid{} functions.
@end deffn


@deffn Constant UUID_MAKE_V1
@deffnx Constant UUID_MAKE_V3
@deffnx Constant UUID_MAKE_V4
@deffnx Constant UUID_MAKE_V5
@deffnx Constant UUID_MAKE_MC
@uuid{} make modes.
@end deffn

@c page
@node primitives
@chapter Primitive functions


The following bindings are exported by @library{foreign uuid primitives}
and re--exported by @library{foreign uuid}.  The functions are wrappers
for the @ossp{} @uuid{} functions implementing marshaling of arguments
and return values.

@c ------------------------------------------------------------

@subsubheading @uuid{} objects

@defun uuid-create
Build a new @uuid{} object and return a pointer to it.  @uuid{} objects
must be released with @func{uuid-destroy}.  If an error occurs an
assertion violation exception is raised.
@end defun


@defun uuid-clone @var{original}
Build a new @uuid{} object cloning the one referenced by @var{original},
which must be a pointer; return a pointer to the clone.  @uuid{} objects
must be released with @func{uuid-destroy}.  If an error occurs an
assertion violation exception is raised.
@end defun


@defun uuid-load @var{spec}
Build a new @uuid{} object loading into it the predefined value selected
by @var{spec}; return a pointer to the object.  @uuid{} objects must be
released with @func{uuid-destroy}.  If an error occurs an assertion
violation exception is raised.

@var{spec} must be a Scheme symbol among: @code{nil}, @code{ns:DNS},
@code{ns:URL}, @code{ns:OID}, @code{ns:X500}.
@end defun


@defun uuid-make @var{mode}
@defunx uuid-make @var{mode} @var{src} @var{name}
Build and return a new @uuid{} object generated according to the
selected @var{mode}; return a pointer to the object.  @uuid{} objects
must be released with @func{uuid-destroy}.  If an error occurs an
assertion violation exception is raised.

@var{mode} must be one among: @code{UUID_MAKE_V1}, @code{UUID_MAKE_V3},
@code{UUID_MAKE_V4}, @code{UUID_MAKE_V5}; optionally, a mode can be
OR--ed with @code{UUID_MAKE_MC} (using @func{bitwise-ior}).

@var{src} and @var{name} can be used only when selecting
@code{UUID_MAKE_V3} or @code{UUID_MAKE_V5}; @var{src} must be the
pointer to an arbitrary @uuid{} object, @var{name} must be an arbitrary
Scheme string.
@end defun


@defun uuid-destroy @var{pointer}
Release all the resources associated to the @uuid{} object referenced by
@var{pointer}.
@end defun

@c ------------------------------------------------------------

@subsubheading Comparison


@defun uuid-equal? @vari{id} @varii{id}
Return @true{} if the objects referenced by the two pointer arguments
are equal.  If an error occurs an assertion violation exception is
raised.
@end defun


@defun uuid-compare @vari{id} @varii{id}
Compare the objects referenced by the two pointer arguments and return a
ternary result.  If an error occurs an assertion violation exception is
raised.
@end defun


@defun uuid-isnil? @var{id}
Return @true{} if the @uuid{} object referenced by the pointer argument
is the nil @uuid{}.  If an error occurs an assertion violation exception
is raised.
@end defun

@c ------------------------------------------------------------

@subsubheading Importing and exporting


@defun uuid-import @var{format} @var{ptr} @var{len}
Build a new @uuid{} object initialised from data referenced by @var{ptr}
in a block of memory of @var{len} bytes; the format of the data is
specified by @var{format}.  Return a pointer to the new @uuid{} object.
If an error occurs an assertion violation exception is raised.

@var{format} must be one among: @code{UUID_FMT_BIN},
@code{UUID_FMT_STR}, @code{UUID_FMT_SIV} and @code{UUID_FMT_TXT}.
@end defun


@defun uuid-export @var{id} @var{format}
Build and return an external representation for the @uuid{} object
referenced by the pointer @var{id}.  If an error occurs an assertion
violation exception is raised.

If @var{format} is one among: @code{UUID_FMT_STR}, @code{UUID_FMT_SIV}
and @code{UUID_FMT_TXT}, the return value is a Scheme string.  If
@var{format} is @code{UUID_FMT_BIN}, the return value is a Scheme
bytevector.
@end defun

@c ------------------------------------------------------------

@subsubheading Helpers


@defun uuid-error @var{rc}
Return a Scheme string describing the return code @var{rc}.
@end defun

@c page
@node compensations
@chapter Compensated constructors


The following bindings are exported by @library{foreign uuid}; the
functions are wrappers for the primitives exported by @library{foreign
uuid primitives}, making use of compensations to manage the @uuid{}
objects allocation.  @nauref{compensations, Compensation stacks}


@defun uuid-create/c
Call @func{uuid-create} and return its return value; register a
compensation applying @func{uuid-destroy} to the @uuid{} object.
@end defun


@defun uuid-clone/c @var{arg} ...
Apply @func{uuid-clone} to the arguments and return its return value;
register a compensation applying @func{uuid-destroy} to the @uuid{}
object.
@end defun


@defun uuid-load/c @var{arg} ...
Apply @func{uuid-load} to the arguments and return its return value;
register a compensation applying @func{uuid-destroy} to the @uuid{}
object.
@end defun


@defun uuid-make/c @var{arg} ...
Apply @func{uuid-make} to the arguments and return its return value;
register a compensation applying @func{uuid-destroy} to the @uuid{}
object.
@end defun


@defun uuid-import/c @var{arg} ...
Apply @func{uuid-import} to the arguments and return its return value;
register a compensation applying @func{uuid-destroy} to the @uuid{}
object.
@end defun


Usage examples follow:

@example
(import (rnrs)
  (compensations)
  (foreign uuid)
  (foreign uuid compensated)
  (foreign cstrings))

;; import and export
(with-compensations
  (let* ((str   "4e8e1494-c318-11de-83fe-001e68fdaf8a")
         (cstr  (string->cstring/c str))
         (clen  (strlen cstr))
         (uuid  (uuid-import/c UUID_FMT_STR cstr clen)))
    (uuid-export uuid UUID_FMT_STR)))
@result{} "4e8e1494-c318-11de-83fe-001e68fdaf8a"

(with-compensations
  (let* ((str   "4e8e1494-c318-11de-83fe-001e68fdaf8a")
         (cstr  (string->cstring/c str))
         (clen  (strlen cstr))
         (uuid  (uuid-import/c UUID_FMT_STR cstr clen)))
    (uuid-export uuid UUID_FMT_BIN)))
@result{} #vu8(78 142 20 148 195 24 17 222
        131 254 0 30 104 253 175 138)

(with-compensations
  (let* ((str   "4e8e1494-c318-11de-83fe-001e68fdaf8a")
         (cstr  (string->cstring/c str))
         (clen  (strlen cstr))
         (uuid  (uuid-import/c UUID_FMT_STR cstr clen)))
    (uuid-export uuid UUID_FMT_SIV)))
@result{} "104417507259474184274030196212824387466"

(with-compensations
  (let* ((str   "4e8e1494-c318-11de-83fe-001e68fdaf8a")
         (cstr  (string->cstring/c str))
         (clen  (strlen cstr))
         (uuid  (uuid-import/c UUID_FMT_STR cstr clen)))
    (uuid-export uuid UUID_FMT_TXT)))
@result{} "encode: STR:     4e8e1494-c318-11de-83fe-001e68fdaf8a
        SIV:     104417507259474184274030196212824387466
decode: variant: DCE 1.1, ISO/IEC 11578:1996
        version: 1 (time and node based)
        content: time:  2009-10-27 16:46:43.225922.0 UTC
                 clock: 1022 (usually random)
                 node:  00:1e:68:fd:af:8a (global unicast)
"
;; load and export
(with-compensations
  (let ((uuid (uuid-load/c 'ns:DNS)))
    (uuid-export uuid UUID_FMT_STR)))
@result{} "6ba7b810-9dad-11d1-80b4-00c04fd430c8"

;; generate
(with-compensations
  (let* ((uuid-1 (uuid-create/c))
         (uuid-2 (uuid-make/c UUID_MAKE_V3
                              uuid-1 "ciao mamma")))
    (uuid-export uuid-2 UUID_FMT_STR)))
@end example

@c page

@include uuid.texiinc
@include gpl-3.0.texiinc
@include fdl-1.3.texiinc

@c page
@node references
@appendix Bibliography and references


@ossp{} @uuid{} can be found here:

@center @url{http://www.ossp.org/pkg/lib/uuid/}
@center @url{ftp://ftp.ossp.org/pkg/lib/uuid/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
