;;; (nausicaa posix sizeof) --
;;;
;;;Part of: Nausicaa
;;;Contents: foreign library inspection generation
;;;Date: 
;;;
;;;Abstract
;;;
;;;
;;;
;;;Copyright (c)  Marco Maggi <marco.maggi-ipsu@poste.it>
;;;
;;;This program is free software:  you can redistribute it and/or modify
;;;it under the terms of the  GNU General Public License as published by
;;;the Free Software Foundation, either version 3 of the License, or (at
;;;your option) any later version.
;;;
;;;This program is  distributed in the hope that it  will be useful, but
;;;WITHOUT  ANY   WARRANTY;  without   even  the  implied   warranty  of
;;;MERCHANTABILITY  or FITNESS FOR  A PARTICULAR  PURPOSE.  See  the GNU
;;;General Public License for more details.
;;;
;;;You should  have received  a copy of  the GNU General  Public License
;;;along with this program.  If not, see <http://www.gnu.org/licenses/>.
;;;


(library (nausicaa posix sizeof)
  (export c-sizeof c-strideof c-alignof c-valueof c-inspect
    pointer-c-ref pointer-c-set! pointer-c-accessor
    pointer-c-mutator array-c-ref array-c-set!
    array-c-pointer-to pointer: wrapper: mirror: malloc:
    <pointer-to-flock> <struct-flock> <flock>
    <pointer-to-timeval> <struct-timeval> <timeval>
    <pointer-to-timespec> <struct-timespec> <timespec>
    <pointer-to-dirent> <struct-dirent> <dirent>
    <pointer-to-utimbuf> <struct-utimbuf> <utimbuf>
    <pointer-to-timezone> <struct-timezone> <timezone>
    <pointer-to-tm> <struct-tm> <tm> <pointer-to-ntptimeval>
    <struct-ntptimeval> <ntptimeval> <pointer-to-timex>
    <struct-timex> <timex> <pointer-to-itimerval>
    <struct-itimerval> <itimerval> <pointer-to-FTW>
    <struct-FTW> <FTW> <pointer-to-iovec> <struct-iovec>
    <iovec> <pointer-to-fdset> <struct-fdset> <fdset>
    <pointer-to-passwd> <struct-passwd> <passwd>
    <pointer-to-group> <struct-group> <group>
    <pointer-to-utsname> <struct-utsname> <utsname>
    <pointer-to-fstab> <struct-fstab> <fstab>
    <pointer-to-mntent> <struct-mntent> <mntent>
    <pointer-to-sockaddr> <struct-sockaddr> <sockaddr>
    <pointer-to-sockaddr_in> <struct-sockaddr_in>
    <sockaddr_in> <pointer-to-sockaddr_in6>
    <struct-sockaddr_in6> <sockaddr_in6>
    <pointer-to-sockaddr_un> <struct-sockaddr_un>
    <sockaddr_un> <pointer-to-in_addr> <struct-in_addr>
    <in_addr> <pointer-to-if_nameindex>
    <struct-if_nameindex> <if_nameindex> <pointer-to-netent>
    <struct-netent> <netent> <pointer-to-linger>
    <struct-linger> <linger> <pointer-to-hostent>
    <struct-hostent> <hostent> <pointer-to-protoent>
    <struct-protoent> <protoent> <pointer-to-servent>
    <struct-servent> <servent>
    (rename (valueof-SEEK_SET SEEK_SET)
      (valueof-SEEK_CUR SEEK_CUR)
      (valueof-SEEK_END SEEK_END)
      (valueof-O_ACCMODE O_ACCMODE)
      (valueof-O_APPEND O_APPEND) (valueof-O_ASYNC O_ASYNC)
      (valueof-O_CREAT O_CREAT) (valueof-O_EXCL O_EXCL)
      (valueof-O_EXEC O_EXEC) (valueof-O_EXLOCK O_EXLOCK)
      (valueof-O_FSYNC O_FSYNC)
      (valueof-O_IGNORE_CTTY O_IGNORE_CTTY)
      (valueof-O_NDELAY O_NDELAY)
      (valueof-O_NOCTTY O_NOCTTY)
      (valueof-O_NOLINK O_NOLINK)
      (valueof-O_NONBLOCK O_NONBLOCK)
      (valueof-O_NOTRANS O_NOTRANS)
      (valueof-O_RDONLY O_RDONLY) (valueof-O_RDWR O_RDWR)
      (valueof-O_READ O_READ) (valueof-O_SHLOCK O_SHLOCK)
      (valueof-O_SYNC O_SYNC) (valueof-O_TRUNC O_TRUNC)
      (valueof-O_WRITE O_WRITE) (valueof-O_WRONLY O_WRONLY)
      (valueof-O_NOATIME O_NOATIME)
      (valueof-O_CLOEXEC O_CLOEXEC)
      (valueof-O_DIRECT O_DIRECT)
      (valueof-O_DIRECTORY O_DIRECTORY)
      (valueof-O_LARGEFILE O_LARGEFILE)
      (valueof-O_NOFOLLOW O_NOFOLLOW)
      (valueof-FD_CLOEXEC FD_CLOEXEC)
      (valueof-F_DUPFD F_DUPFD) (valueof-F_GETFD F_GETFD)
      (valueof-F_GETFL F_GETFL) (valueof-F_GETLK F_GETLK)
      (valueof-F_GETOWN F_GETOWN) (valueof-F_SETFD F_SETFD)
      (valueof-F_SETFL F_SETFL) (valueof-F_SETLKW F_SETLKW)
      (valueof-F_SETLK F_SETLK) (valueof-F_SETOWN F_SETOWN)
      (valueof-F_RDLCK F_RDLCK) (valueof-F_UNLCK F_UNLCK)
      (valueof-F_WRLCK F_WRLCK) (valueof-WNOHANG WNOHANG)
      (valueof-WUNTRACED WUNTRACED)
      (valueof-WCONTINUED WCONTINUED) (valueof-R_OK R_OK)
      (valueof-W_OK W_OK) (valueof-X_OK X_OK)
      (valueof-F_OK F_OK) (valueof-L_ctermid L_ctermid)
      (valueof-L_tmpnam L_tmpnam)
      (valueof-CLOCKS_PER_SEC CLOCKS_PER_SEC)
      (valueof-S_IRUSR S_IRUSR) (valueof-S_IWUSR S_IWUSR)
      (valueof-S_IXUSR S_IXUSR) (valueof-S_IRGRP S_IRGRP)
      (valueof-S_IWGRP S_IWGRP) (valueof-S_IXGRP S_IXGRP)
      (valueof-S_IROTH S_IROTH) (valueof-S_IWOTH S_IWOTH)
      (valueof-S_IXOTH S_IXOTH) (valueof-S_IRWXU S_IRWXU)
      (valueof-S_IRWXG S_IRWXG) (valueof-S_IRWXO S_IRWXO)
      (valueof-S_ISUID S_ISUID) (valueof-S_ISGID S_ISGID)
      (valueof-S_ISVTX S_ISVTX) (valueof-DT_BLK DT_BLK)
      (valueof-DT_CHR DT_CHR) (valueof-DT_DIR DT_DIR)
      (valueof-DT_FIFO DT_FIFO) (valueof-DT_LNK DT_LNK)
      (valueof-DT_REG DT_REG) (valueof-DT_SOCK DT_SOCK)
      (valueof-DT_UNKNOWN DT_UNKNOWN) (valueof-FTW_F FTW_F)
      (valueof-FTW_D FTW_D) (valueof-FTW_NS FTW_NS)
      (valueof-FTW_DNR FTW_DNR) (valueof-FTW_SL FTW_SL)
      (valueof-FTW_DP FTW_DP) (valueof-FTW_SLN FTW_SLN)
      (valueof-FTW_PHYS FTW_PHYS)
      (valueof-FTW_MOUNT FTW_MOUNT)
      (valueof-FTW_CHDIR FTW_CHDIR)
      (valueof-FTW_DEPTH FTW_DEPTH)
      (valueof-FTW_ACTIONRETVAL FTW_ACTIONRETVAL)
      (valueof-FTW_CONTINUE FTW_CONTINUE)
      (valueof-FTW_STOP FTW_STOP)
      (valueof-FTW_SKIP_SUBTREE FTW_SKIP_SUBTREE)
      (valueof-FTW_SKIP_SIBLINGS FTW_SKIP_SIBLINGS)
      (valueof-ITIMER_REAL ITIMER_REAL)
      (valueof-ITIMER_VIRTUAL ITIMER_VIRTUAL)
      (valueof-ITIMER_PROF ITIMER_PROF) (valueof-EOF EOF)
      (valueof-MAXSYMLINKS MAXSYMLINKS)
      (valueof-MAXPATHLEN MAXPATHLEN)
      (valueof-MAP_PRIVATE MAP_PRIVATE)
      (valueof-MAP_SHARED MAP_SHARED)
      (valueof-MAP_FIXED MAP_FIXED)
      (valueof-MAP_ANON MAP_ANON)
      (valueof-MAP_ANONYMOUS MAP_ANONYMOUS)
      (valueof-MAP_32BITS MAP_32BITS)
      (valueof-MAP_DENYWRITE MAP_DENYWRITE)
      (valueof-MAP_EXECUTABLE MAP_EXECUTABLE)
      (valueof-MAP_FILE MAP_FILE)
      (valueof-MAP_GROWSDOWN MAP_GROWSDOWN)
      (valueof-MAP_LOCKED MAP_LOCKED)
      (valueof-MAP_NONBLOCK MAP_NONBLOCK)
      (valueof-MAP_NORESERVE MAP_NORESERVE)
      (valueof-MAP_POPULATE MAP_POPULATE)
      (valueof-MAP_STACK MAP_STACK)
      (valueof-MAP_AUTOGROW MAP_AUTOGROW)
      (valueof-MAP_AUTORESRV MAP_AUTORESRV)
      (valueof-MAP_COPY MAP_COPY)
      (valueof-PROT_READ PROT_READ)
      (valueof-PROT_WRITE PROT_WRITE)
      (valueof-PROT_EXEC PROT_EXEC)
      (valueof-PROT_NONE PROT_NONE)
      (valueof-MS_SYNC MS_SYNC) (valueof-MS_ASYNC MS_ASYNC)
      (valueof-MREMAP_MAYMOVE MREMAP_MAYMOVE)
      (valueof-FD_SETSIZE FD_SETSIZE)
      (valueof-L_cuserid L_cuserid)
      (valueof-ARG_MAX ARG_MAX)
      (valueof-_POSIX_ARG_MAX _POSIX_ARG_MAX)
      (valueof-CHILD_MAX CHILD_MAX)
      (valueof-_POSIX_CHILD_MAX _POSIX_CHILD_MAX)
      (valueof-OPEN_MAX OPEN_MAX)
      (valueof-_POSIX_OPEN_MAX _POSIX_OPEN_MAX)
      (valueof-STREAM_MAX STREAM_MAX)
      (valueof-_POSIX_STREAM_MAX _POSIX_STREAM_MAX)
      (valueof-TZNAME_MAX TZNAME_MAX)
      (valueof-_POSIX_TZNAME_MAX _POSIX_TZNAME_MAX)
      (valueof-NGROUPS_MAX NGROUPS_MAX)
      (valueof-SSIZE_MAX SSIZE_MAX)
      (valueof-RE_DUP_MAX RE_DUP_MAX)
      (valueof-_POSIX_JOB_CONTROL _POSIX_JOB_CONTROL)
      (valueof-_POSIX_SAVED_IDS _POSIX_SAVED_IDS)
      (valueof-_POSIX2_C_DEV _POSIX2_C_DEV)
      (valueof-_POSIX2_FORT_DEV _POSIX2_FORT_DEV)
      (valueof-_POSIX2_FORT_RUN _POSIX2_FORT_RUN)
      (valueof-_POSIX2_LOCALEDEF _POSIX2_LOCALEDEF)
      (valueof-_POSIX2_SW_DEV _POSIX2_SW_DEV)
      (valueof-_POSIX_VERSION _POSIX_VERSION)
      (valueof-_POSIX2_C_VERSION _POSIX2_C_VERSION)
      (valueof-_SC_ARG_MAX _SC_ARG_MAX)
      (valueof-_SC_CHILD_MAX _SC_CHILD_MAX)
      (valueof-_SC_CLK_TCK _SC_CLK_TCK)
      (valueof-_SC_NGROUPS_MAX _SC_NGROUPS_MAX)
      (valueof-_SC_OPEN_MAX _SC_OPEN_MAX)
      (valueof-_SC_STREAM_MAX _SC_STREAM_MAX)
      (valueof-_SC_TZNAME_MAX _SC_TZNAME_MAX)
      (valueof-_SC_JOB_CONTROL _SC_JOB_CONTROL)
      (valueof-_SC_SAVED_IDS _SC_SAVED_IDS)
      (valueof-_SC_REALTIME_SIGNALS _SC_REALTIME_SIGNALS)
      (valueof-_SC_PRIORITY_SCHEDULING
        _SC_PRIORITY_SCHEDULING)
      (valueof-_SC_TIMERS _SC_TIMERS)
      (valueof-_SC_ASYNCHRONOUS_IO _SC_ASYNCHRONOUS_IO)
      (valueof-_SC_PRIORITIZED_IO _SC_PRIORITIZED_IO)
      (valueof-_SC_SYNCHRONIZED_IO _SC_SYNCHRONIZED_IO)
      (valueof-_SC_FSYNC _SC_FSYNC)
      (valueof-_SC_MAPPED_FILES _SC_MAPPED_FILES)
      (valueof-_SC_MEMLOCK _SC_MEMLOCK)
      (valueof-_SC_MEMLOCK_RANGE _SC_MEMLOCK_RANGE)
      (valueof-_SC_MEMORY_PROTECTION _SC_MEMORY_PROTECTION)
      (valueof-_SC_MESSAGE_PASSING _SC_MESSAGE_PASSING)
      (valueof-_SC_SEMAPHORES _SC_SEMAPHORES)
      (valueof-_SC_SHARED_MEMORY_OBJECTS
        _SC_SHARED_MEMORY_OBJECTS)
      (valueof-_SC_AIO_LISTIO_MAX _SC_AIO_LISTIO_MAX)
      (valueof-_SC_AIO_MAX _SC_AIO_MAX)
      (valueof-_SC_AIO_PRIO_DELTA_MAX _SC_AIO_PRIO_DELTA_MAX)
      (valueof-_SC_DELAYTIMER_MAX _SC_DELAYTIMER_MAX)
      (valueof-_SC_MQ_OPEN_MAX _SC_MQ_OPEN_MAX)
      (valueof-_SC_MQ_PRIO_MAX _SC_MQ_PRIO_MAX)
      (valueof-_SC_VERSION _SC_VERSION)
      (valueof-_SC_PAGESIZE _SC_PAGESIZE)
      (valueof-_SC_PAGE_SIZE _SC_PAGE_SIZE)
      (valueof-_SC_RTSIG_MAX _SC_RTSIG_MAX)
      (valueof-_SC_SEM_NSEMS_MAX _SC_SEM_NSEMS_MAX)
      (valueof-_SC_SEM_VALUE_MAX _SC_SEM_VALUE_MAX)
      (valueof-_SC_SIGQUEUE_MAX _SC_SIGQUEUE_MAX)
      (valueof-_SC_TIMER_MAX _SC_TIMER_MAX)
      (valueof-_SC_BC_BASE_MAX _SC_BC_BASE_MAX)
      (valueof-_SC_BC_DIM_MAX _SC_BC_DIM_MAX)
      (valueof-_SC_BC_SCALE_MAX _SC_BC_SCALE_MAX)
      (valueof-_SC_BC_STRING_MAX _SC_BC_STRING_MAX)
      (valueof-_SC_COLL_WEIGHTS_MAX _SC_COLL_WEIGHTS_MAX)
      (valueof-_SC_EQUIV_CLASS_MAX _SC_EQUIV_CLASS_MAX)
      (valueof-_SC_EXPR_NEST_MAX _SC_EXPR_NEST_MAX)
      (valueof-_SC_LINE_MAX _SC_LINE_MAX)
      (valueof-_SC_RE_DUP_MAX _SC_RE_DUP_MAX)
      (valueof-_SC_CHARCLASS_NAME_MAX _SC_CHARCLASS_NAME_MAX)
      (valueof-_SC_2_VERSION _SC_2_VERSION)
      (valueof-_SC_2_C_BIND _SC_2_C_BIND)
      (valueof-_SC_2_C_DEV _SC_2_C_DEV)
      (valueof-_SC_2_FORT_DEV _SC_2_FORT_DEV)
      (valueof-_SC_2_FORT_RUN _SC_2_FORT_RUN)
      (valueof-_SC_2_SW_DEV _SC_2_SW_DEV)
      (valueof-_SC_2_LOCALEDEF _SC_2_LOCALEDEF)
      (valueof-_SC_PII _SC_PII)
      (valueof-_SC_PII_XTI _SC_PII_XTI)
      (valueof-_SC_PII_SOCKET _SC_PII_SOCKET)
      (valueof-_SC_PII_INTERNET _SC_PII_INTERNET)
      (valueof-_SC_PII_OSI _SC_PII_OSI)
      (valueof-_SC_POLL _SC_POLL)
      (valueof-_SC_SELECT _SC_SELECT)
      (valueof-_SC_UIO_MAXIOV _SC_UIO_MAXIOV)
      (valueof-_SC_IOV_MAX _SC_IOV_MAX)
      (valueof-_SC_PII_INTERNET_STREAM
        _SC_PII_INTERNET_STREAM)
      (valueof-_SC_PII_INTERNET_DGRAM _SC_PII_INTERNET_DGRAM)
      (valueof-_SC_PII_OSI_COTS _SC_PII_OSI_COTS)
      (valueof-_SC_PII_OSI_CLTS _SC_PII_OSI_CLTS)
      (valueof-_SC_PII_OSI_M _SC_PII_OSI_M)
      (valueof-_SC_T_IOV_MAX _SC_T_IOV_MAX)
      (valueof-_SC_THREADS _SC_THREADS)
      (valueof-_SC_THREAD_SAFE_FUNCTIONS
        _SC_THREAD_SAFE_FUNCTIONS)
      (valueof-_SC_GETGR_R_SIZE_MAX _SC_GETGR_R_SIZE_MAX)
      (valueof-_SC_GETPW_R_SIZE_MAX _SC_GETPW_R_SIZE_MAX)
      (valueof-_SC_LOGIN_NAME_MAX _SC_LOGIN_NAME_MAX)
      (valueof-_SC_TTY_NAME_MAX _SC_TTY_NAME_MAX)
      (valueof-_SC_THREAD_DESTRUCTOR_ITERATIONS
        _SC_THREAD_DESTRUCTOR_ITERATIONS)
      (valueof-_SC_THREAD_KEYS_MAX _SC_THREAD_KEYS_MAX)
      (valueof-_SC_THREAD_STACK_MIN _SC_THREAD_STACK_MIN)
      (valueof-_SC_THREAD_THREADS_MAX _SC_THREAD_THREADS_MAX)
      (valueof-_SC_THREAD_ATTR_STACKADDR
        _SC_THREAD_ATTR_STACKADDR)
      (valueof-_SC_THREAD_ATTR_STACKSIZE
        _SC_THREAD_ATTR_STACKSIZE)
      (valueof-_SC_THREAD_PRIORITY_SCHEDULING
        _SC_THREAD_PRIORITY_SCHEDULING)
      (valueof-_SC_THREAD_PRIO_INHERIT
        _SC_THREAD_PRIO_INHERIT)
      (valueof-_SC_THREAD_PRIO_PROTECT
        _SC_THREAD_PRIO_PROTECT)
      (valueof-_SC_THREAD_PROCESS_SHARED
        _SC_THREAD_PROCESS_SHARED)
      (valueof-_SC_NPROCESSORS_CONF _SC_NPROCESSORS_CONF)
      (valueof-_SC_NPROCESSORS_ONLN _SC_NPROCESSORS_ONLN)
      (valueof-_SC_PHYS_PAGES _SC_PHYS_PAGES)
      (valueof-_SC_AVPHYS_PAGES _SC_AVPHYS_PAGES)
      (valueof-_SC_ATEXIT_MAX _SC_ATEXIT_MAX)
      (valueof-_SC_PASS_MAX _SC_PASS_MAX)
      (valueof-_SC_XOPEN_VERSION _SC_XOPEN_VERSION)
      (valueof-_SC_XOPEN_XCU_VERSION _SC_XOPEN_XCU_VERSION)
      (valueof-_SC_XOPEN_UNIX _SC_XOPEN_UNIX)
      (valueof-_SC_XOPEN_CRYPT _SC_XOPEN_CRYPT)
      (valueof-_SC_XOPEN_ENH_I18N _SC_XOPEN_ENH_I18N)
      (valueof-_SC_XOPEN_SHM _SC_XOPEN_SHM)
      (valueof-_SC_2_CHAR_TERM _SC_2_CHAR_TERM)
      (valueof-_SC_2_C_VERSION _SC_2_C_VERSION)
      (valueof-_SC_2_UPE _SC_2_UPE)
      (valueof-_SC_XOPEN_XPG2 _SC_XOPEN_XPG2)
      (valueof-_SC_XOPEN_XPG3 _SC_XOPEN_XPG3)
      (valueof-_SC_XOPEN_XPG4 _SC_XOPEN_XPG4)
      (valueof-_SC_CHAR_BIT _SC_CHAR_BIT)
      (valueof-_SC_CHAR_MAX _SC_CHAR_MAX)
      (valueof-_SC_CHAR_MIN _SC_CHAR_MIN)
      (valueof-_SC_INT_MAX _SC_INT_MAX)
      (valueof-_SC_INT_MIN _SC_INT_MIN)
      (valueof-_SC_LONG_BIT _SC_LONG_BIT)
      (valueof-_SC_WORD_BIT _SC_WORD_BIT)
      (valueof-_SC_MB_LEN_MAX _SC_MB_LEN_MAX)
      (valueof-_SC_NZERO _SC_NZERO)
      (valueof-_SC_SSIZE_MAX _SC_SSIZE_MAX)
      (valueof-_SC_SCHAR_MAX _SC_SCHAR_MAX)
      (valueof-_SC_SCHAR_MIN _SC_SCHAR_MIN)
      (valueof-_SC_SHRT_MAX _SC_SHRT_MAX)
      (valueof-_SC_SHRT_MIN _SC_SHRT_MIN)
      (valueof-_SC_UCHAR_MAX _SC_UCHAR_MAX)
      (valueof-_SC_UINT_MAX _SC_UINT_MAX)
      (valueof-_SC_ULONG_MAX _SC_ULONG_MAX)
      (valueof-_SC_USHRT_MAX _SC_USHRT_MAX)
      (valueof-_SC_NL_ARGMAX _SC_NL_ARGMAX)
      (valueof-_SC_NL_LANGMAX _SC_NL_LANGMAX)
      (valueof-_SC_NL_MSGMAX _SC_NL_MSGMAX)
      (valueof-_SC_NL_NMAX _SC_NL_NMAX)
      (valueof-_SC_NL_SETMAX _SC_NL_SETMAX)
      (valueof-_SC_NL_TEXTMAX _SC_NL_TEXTMAX)
      (valueof-_SC_XBS5_ILP32_OFF32 _SC_XBS5_ILP32_OFF32)
      (valueof-_SC_XBS5_ILP32_OFFBIG _SC_XBS5_ILP32_OFFBIG)
      (valueof-_SC_XBS5_LP64_OFF64 _SC_XBS5_LP64_OFF64)
      (valueof-_SC_XBS5_LPBIG_OFFBIG _SC_XBS5_LPBIG_OFFBIG)
      (valueof-_SC_XOPEN_LEGACY _SC_XOPEN_LEGACY)
      (valueof-_SC_XOPEN_REALTIME _SC_XOPEN_REALTIME)
      (valueof-_SC_XOPEN_REALTIME_THREADS
        _SC_XOPEN_REALTIME_THREADS)
      (valueof-_SC_ADVISORY_INFO _SC_ADVISORY_INFO)
      (valueof-_SC_BARRIERS _SC_BARRIERS)
      (valueof-_SC_BASE _SC_BASE)
      (valueof-_SC_C_LANG_SUPPORT _SC_C_LANG_SUPPORT)
      (valueof-_SC_C_LANG_SUPPORT_R _SC_C_LANG_SUPPORT_R)
      (valueof-_SC_CLOCK_SELECTION _SC_CLOCK_SELECTION)
      (valueof-_SC_CPUTIME _SC_CPUTIME)
      (valueof-_SC_THREAD_CPUTIME _SC_THREAD_CPUTIME)
      (valueof-_SC_DEVICE_IO _SC_DEVICE_IO)
      (valueof-_SC_DEVICE_SPECIFIC _SC_DEVICE_SPECIFIC)
      (valueof-_SC_DEVICE_SPECIFIC_R _SC_DEVICE_SPECIFIC_R)
      (valueof-_SC_FD_MGMT _SC_FD_MGMT)
      (valueof-_SC_FIFO _SC_FIFO)
      (valueof-_SC_PIPE _SC_PIPE)
      (valueof-_SC_FILE_ATTRIBUTES _SC_FILE_ATTRIBUTES)
      (valueof-_SC_FILE_LOCKING _SC_FILE_LOCKING)
      (valueof-_SC_FILE_SYSTEM _SC_FILE_SYSTEM)
      (valueof-_SC_MONOTONIC_CLOCK _SC_MONOTONIC_CLOCK)
      (valueof-_SC_MULTI_PROCESS _SC_MULTI_PROCESS)
      (valueof-_SC_SINGLE_PROCESS _SC_SINGLE_PROCESS)
      (valueof-_SC_NETWORKING _SC_NETWORKING)
      (valueof-_SC_READER_WRITER_LOCKS
        _SC_READER_WRITER_LOCKS)
      (valueof-_SC_SPIN_LOCKS _SC_SPIN_LOCKS)
      (valueof-_SC_REGEXP _SC_REGEXP)
      (valueof-_SC_REGEX_VERSION _SC_REGEX_VERSION)
      (valueof-_SC_SHELL _SC_SHELL)
      (valueof-_SC_SIGNALS _SC_SIGNALS)
      (valueof-_SC_SPAWN _SC_SPAWN)
      (valueof-_SC_SPORADIC_SERVER _SC_SPORADIC_SERVER)
      (valueof-_SC_THREAD_SPORADIC_SERVER
        _SC_THREAD_SPORADIC_SERVER)
      (valueof-_SC_SYSTEM_DATABASE _SC_SYSTEM_DATABASE)
      (valueof-_SC_SYSTEM_DATABASE_R _SC_SYSTEM_DATABASE_R)
      (valueof-_SC_TIMEOUTS _SC_TIMEOUTS)
      (valueof-_SC_TYPED_MEMORY_OBJECTS
        _SC_TYPED_MEMORY_OBJECTS)
      (valueof-_SC_USER_GROUPS _SC_USER_GROUPS)
      (valueof-_SC_USER_GROUPS_R _SC_USER_GROUPS_R)
      (valueof-_SC_2_PBS _SC_2_PBS)
      (valueof-_SC_2_PBS_ACCOUNTING _SC_2_PBS_ACCOUNTING)
      (valueof-_SC_2_PBS_LOCATE _SC_2_PBS_LOCATE)
      (valueof-_SC_2_PBS_MESSAGE _SC_2_PBS_MESSAGE)
      (valueof-_SC_2_PBS_TRACK _SC_2_PBS_TRACK)
      (valueof-_SC_SYMLOOP_MAX _SC_SYMLOOP_MAX)
      (valueof-_SC_STREAMS _SC_STREAMS)
      (valueof-_SC_2_PBS_CHECKPOINT _SC_2_PBS_CHECKPOINT)
      (valueof-_SC_V6_ILP32_OFF32 _SC_V6_ILP32_OFF32)
      (valueof-_SC_V6_ILP32_OFFBIG _SC_V6_ILP32_OFFBIG)
      (valueof-_SC_V6_LP64_OFF64 _SC_V6_LP64_OFF64)
      (valueof-_SC_V6_LPBIG_OFFBIG _SC_V6_LPBIG_OFFBIG)
      (valueof-_SC_HOST_NAME_MAX _SC_HOST_NAME_MAX)
      (valueof-_SC_TRACE _SC_TRACE)
      (valueof-_SC_TRACE_EVENT_FILTER _SC_TRACE_EVENT_FILTER)
      (valueof-_SC_TRACE_INHERIT _SC_TRACE_INHERIT)
      (valueof-_SC_TRACE_LOG _SC_TRACE_LOG)
      (valueof-_SC_LEVEL1_ICACHE_SIZE _SC_LEVEL1_ICACHE_SIZE)
      (valueof-_SC_LEVEL1_ICACHE_ASSOC
        _SC_LEVEL1_ICACHE_ASSOC)
      (valueof-_SC_LEVEL1_ICACHE_LINESIZE
        _SC_LEVEL1_ICACHE_LINESIZE)
      (valueof-_SC_LEVEL1_DCACHE_SIZE _SC_LEVEL1_DCACHE_SIZE)
      (valueof-_SC_LEVEL1_DCACHE_ASSOC
        _SC_LEVEL1_DCACHE_ASSOC)
      (valueof-_SC_LEVEL1_DCACHE_LINESIZE
        _SC_LEVEL1_DCACHE_LINESIZE)
      (valueof-_SC_LEVEL2_CACHE_SIZE _SC_LEVEL2_CACHE_SIZE)
      (valueof-_SC_LEVEL2_CACHE_ASSOC _SC_LEVEL2_CACHE_ASSOC)
      (valueof-_SC_LEVEL2_CACHE_LINESIZE
        _SC_LEVEL2_CACHE_LINESIZE)
      (valueof-_SC_LEVEL3_CACHE_SIZE _SC_LEVEL3_CACHE_SIZE)
      (valueof-_SC_LEVEL3_CACHE_ASSOC _SC_LEVEL3_CACHE_ASSOC)
      (valueof-_SC_LEVEL3_CACHE_LINESIZE
        _SC_LEVEL3_CACHE_LINESIZE)
      (valueof-_SC_LEVEL4_CACHE_SIZE _SC_LEVEL4_CACHE_SIZE)
      (valueof-_SC_LEVEL4_CACHE_ASSOC _SC_LEVEL4_CACHE_ASSOC)
      (valueof-_SC_LEVEL4_CACHE_LINESIZE
        _SC_LEVEL4_CACHE_LINESIZE)
      (valueof-_SC_IPV6 _SC_IPV6)
      (valueof-_SC_RAW_SOCKETS _SC_RAW_SOCKETS)
      (valueof-LINK_MAX LINK_MAX)
      (valueof-MAX_CANON MAX_CANON)
      (valueof-MAX_INPUT MAX_INPUT)
      (valueof-NAME_MAX NAME_MAX)
      (valueof-PATH_MAX PATH_MAX)
      (valueof-PIPE_BUF PIPE_BUF)
      (valueof-MAXNAMLEN MAXNAMLEN)
      (valueof-FILENAME_MAX FILENAME_MAX)
      (valueof-_POSIX_CHOWN_RESTRICTED
        _POSIX_CHOWN_RESTRICTED)
      (valueof-_POSIX_NO_TRUNC _POSIX_NO_TRUNC)
      (valueof-_POSIX_VDISABLE _POSIX_VDISABLE)
      (valueof-_POSIX_LINK_MAX _POSIX_LINK_MAX)
      (valueof-_POSIX_MAX_CANON _POSIX_MAX_CANON)
      (valueof-_POSIX_MAX_INPUT _POSIX_MAX_INPUT)
      (valueof-_POSIX_NAME_MAX _POSIX_NAME_MAX)
      (valueof-_POSIX_PATH_MAX _POSIX_PATH_MAX)
      (valueof-_POSIX_PIPE_BUF _POSIX_PIPE_BUF)
      (valueof-SYMLINK_MAX SYMLINK_MAX)
      (valueof-POSIX_REC_INCR_XFER_SIZE
        POSIX_REC_INCR_XFER_SIZE)
      (valueof-POSIX_REC_MAX_XFER_SIZE
        POSIX_REC_MAX_XFER_SIZE)
      (valueof-POSIX_REC_MIN_XFER_SIZE
        POSIX_REC_MIN_XFER_SIZE)
      (valueof-POSIX_REC_XFER_ALIGN POSIX_REC_XFER_ALIGN)
      (valueof-_PC_LINK_MAX _PC_LINK_MAX)
      (valueof-_PC_MAX_CANON _PC_MAX_CANON)
      (valueof-_PC_MAX_INPUT _PC_MAX_INPUT)
      (valueof-_PC_NAME_MAX _PC_NAME_MAX)
      (valueof-_PC_PATH_MAX _PC_PATH_MAX)
      (valueof-_PC_PIPE_BUF _PC_PIPE_BUF)
      (valueof-_PC_CHOWN_RESTRICTED _PC_CHOWN_RESTRICTED)
      (valueof-_PC_NO_TRUNC _PC_NO_TRUNC)
      (valueof-_PC_VDISABLE _PC_VDISABLE)
      (valueof-_PC_SYNC_IO _PC_SYNC_IO)
      (valueof-_PC_ASYNC_IO _PC_ASYNC_IO)
      (valueof-_PC_PRIO_IO _PC_PRIO_IO)
      (valueof-_PC_FILESIZEBITS _PC_FILESIZEBITS)
      (valueof-_PC_REC_INCR_XFER_SIZE _PC_REC_INCR_XFER_SIZE)
      (valueof-_PC_REC_MAX_XFER_SIZE _PC_REC_MAX_XFER_SIZE)
      (valueof-_PC_REC_MIN_XFER_SIZE _PC_REC_MIN_XFER_SIZE)
      (valueof-_PC_REC_XFER_ALIGN _PC_REC_XFER_ALIGN)
      (valueof-BC_BASE_MAX BC_BASE_MAX)
      (valueof-_POSIX_BC_BASE_MAX _POSIX_BC_BASE_MAX)
      (valueof-BC_DIM_MAX BC_DIM_MAX)
      (valueof-_POSIX_BC_DIM_MAX _POSIX_BC_DIM_MAX)
      (valueof-BC_SCALE_MAX BC_SCALE_MAX)
      (valueof-_POSIX_BC_SCALE_MAX _POSIX_BC_SCALE_MAX)
      (valueof-BC_STRING_MAX BC_STRING_MAX)
      (valueof-_POSIX_BC_STRING_MAX _POSIX_BC_STRING_MAX)
      (valueof-COLL_WEIGHTS_MAX COLL_WEIGHTS_MAX)
      (valueof-_POSIX_COLL_WEIGHTS_MAX
        _POSIX_COLL_WEIGHTS_MAX)
      (valueof-EXPR_NEXT_MAX EXPR_NEXT_MAX)
      (valueof-_POSIX_EXPR_NEXT_MAX _POSIX_EXPR_NEXT_MAX)
      (valueof-LINE_MAX LINE_MAX)
      (valueof-_POSIX_LINE_MAX _POSIX_LINE_MAX)
      (valueof-EQUIV_CLASS_MAX EQUIV_CLASS_MAX)
      (valueof-_POSIX_EQUIV_CLASS_MAX _POSIX_EQUIV_CLASS_MAX)
      (valueof-_CS_PATH _CS_PATH)
      (valueof-_CS_LFS_CFLAGS _CS_LFS_CFLAGS)
      (valueof-_CS_LFS_LDFLAGS _CS_LFS_LDFLAGS)
      (valueof-_CS_LFS_LIBS _CS_LFS_LIBS)
      (valueof-_CS_LFS_LINTFLAGS _CS_LFS_LINTFLAGS)
      (valueof-_CS_LFS64_CFLAGS _CS_LFS64_CFLAGS)
      (valueof-_CS_LFS64_LDFLAGS _CS_LFS64_LDFLAGS)
      (valueof-_CS_LFS64_LIBS _CS_LFS64_LIBS)
      (valueof-_CS_LFS64_LINTFLAGS _CS_LFS64_LINTFLAGS)
      (valueof-MS_MGC_MASK MS_MGC_MASK)
      (valueof-MS_REMOUNT MS_REMOUNT)
      (valueof-MS_RDONLY MS_RDONLY)
      (valueof-S_IMMUTABLE S_IMMUTABLE)
      (valueof-S_APPEND S_APPEND)
      (valueof-MS_NOSUID MS_NOSUID)
      (valueof-MS_NOEXEC MS_NOEXEC)
      (valueof-MS_NODEV MS_NODEV)
      (valueof-MS_SYNCHRONOUS MS_SYNCHRONOUS)
      (valueof-MS_MANDLOCK MS_MANDLOCK)
      (valueof-MS_NOATIME MS_NOATIME)
      (valueof-MS_NODIRATIME MS_NODIRATIME)
      (valueof-MNT_FORCE MNT_FORCE) (valueof-NSIG NSIG)
      (valueof-SIGFPE SIGFPE) (valueof-SIGILL SIGILL)
      (valueof-SIGSEGV SIGSEGV) (valueof-SIGBUS SIGBUS)
      (valueof-SIGABRT SIGABRT) (valueof-SIGIOT SIGIOT)
      (valueof-SIGTRAP SIGTRAP) (valueof-SIGEMT SIGEMT)
      (valueof-SIGSYS SIGSYS) (valueof-SIGTERM SIGTERM)
      (valueof-SIGINT SIGINT) (valueof-SIGQUIT SIGQUIT)
      (valueof-SIGKILL SIGKILL) (valueof-SIGHUP SIGHUP)
      (valueof-SIGALRM SIGALRM)
      (valueof-SIGVRALRM SIGVRALRM)
      (valueof-SIGPROF SIGPROF) (valueof-SIGIO SIGIO)
      (valueof-SIGURG SIGURG) (valueof-SIGPOLL SIGPOLL)
      (valueof-SIGCHLD SIGCHLD) (valueof-SIGCLD SIGCLD)
      (valueof-SIGCONT SIGCONT) (valueof-SIGSTOP SIGSTOP)
      (valueof-SIGTSTP SIGTSTP) (valueof-SIGTTIN SIGTTIN)
      (valueof-SIGTTOU SIGTTOU) (valueof-SIGPIPE SIGPIPE)
      (valueof-SIGLOST SIGLOST) (valueof-SIGXCPU SIGXCPU)
      (valueof-SIGXSFZ SIGXSFZ) (valueof-SIGUSR1 SIGUSR1)
      (valueof-SIGUSR2 SIGUSR2) (valueof-SIGWINCH SIGWINCH)
      (valueof-SIGINFO SIGINFO)
      (valueof-SOCK_STREAM SOCK_STREAM)
      (valueof-SOCK_DGRAM SOCK_DGRAM)
      (valueof-SOCK_RAW SOCK_RAW)
      (valueof-SOCK_RDM SOCK_RDM)
      (valueof-SOCK_SEQPACKET SOCK_SEQPACKET)
      (valueof-AF_LOCAL AF_LOCAL)
      (valueof-PF_LOCAL PF_LOCAL) (valueof-AF_UNIX AF_UNIX)
      (valueof-PF_UNIX PF_UNIX) (valueof-AF_FILE AF_FILE)
      (valueof-PF_FILE PF_FILE) (valueof-AF_INET AF_INET)
      (valueof-PF_INET PF_INET) (valueof-AF_INET6 AF_INET6)
      (valueof-PF_INET6 PF_INET6)
      (valueof-AF_UNSPEC AF_UNSPEC)
      (valueof-PF_UNSPEC PF_UNSPEC)
      (valueof-SHUT_RD SHUT_RD) (valueof-SHUT_WR SHUT_WR)
      (valueof-SHUT_RDWR SHUT_RDWR)
      (valueof-IPPORT_RESERVED IPPORT_RESERVED)
      (valueof-IPPORT_USERRESERVED IPPORT_USERRESERVED)
      (valueof-IFNAMSIZ IFNAMSIZ) (valueof-MSG_OOB MSG_OOB)
      (valueof-MSG_PEEK MSG_PEEK)
      (valueof-MSG_DONTROUTE MSG_DONTROUTE)
      (valueof-SOL_SOCKET SOL_SOCKET)
      (valueof-SO_DEBUG SO_DEBUG)
      (valueof-SO_REUSEADDR SO_REUSEADDR)
      (valueof-SO_KEEPALIVE SO_KEEPALIVE)
      (valueof-SO_DONTROUTE SO_DONTROUTE)
      (valueof-SO_LINGER SO_LINGER)
      (valueof-SO_BROADCAST SO_BROADCAST)
      (valueof-SO_OOBINLINE SO_OOBINLINE)
      (valueof-SO_SNDBUF SO_SNDBUF)
      (valueof-SO_RCVBUF SO_RCVBUF)
      (valueof-SO_TYPE SO_TYPE) (valueof-SO_STYLE SO_STYLE)
      (valueof-SO_ERROR SO_ERROR)
      (valueof-INADDR_LOOPBACK INADDR_LOOPBACK)
      (valueof-INADDR_ANY INADDR_ANY)
      (valueof-INADDR_BROADCAST INADDR_BROADCAST)
      (valueof-INADDR_NONE INADDR_NONE)
      (valueof-INET_ADDRSTRLEN INET_ADDRSTRLEN)
      (valueof-INET6_ADDRSTRLEN INET6_ADDRSTRLEN)
      (valueof-HOST_NOT_FOUND HOST_NOT_FOUND)
      (valueof-TRY_AGAIN TRY_AGAIN)
      (valueof-NO_RECOVERY NO_RECOVERY)
      (valueof-NO_ADDRESS NO_ADDRESS)))
  (import
    (nausicaa)
    (nausicaa language makers)
    (for
      (prefix
        (rename
          (only (nausicaa posix clang type-translation)
            clang-maybe-foreign-type->clang-external-type
            clang-maybe-foreign-type->clang-external-type*)
          (clang-maybe-foreign-type->clang-external-type
            translate-type)
          (clang-maybe-foreign-type->clang-external-type*
            translate-type*))
        ffi.)
      expand)
    (nausicaa posix clang embedded-accessors-and-mutators)
    (for
      (prefix (only (nausicaa ffi syntax-helpers) %prepend)
        ffi.)
      expand)
    (prefix (only (nausicaa ffi memory) memcpy) mem.)
    (prefix (nausicaa ffi pointers) ffi.)
    (prefix (nausicaa ffi sizeof) ffi.)
    (prefix (nausicaa ffi peekers-and-pokers) ffi.))
  (define-auxiliary-syntaxes pointer: wrapper: mirror:
    malloc:)
  (define-syntax* (c-sizeof stx)
    (syntax-case stx ()
      ((_ ?type ?number-of-elements) (identifier? #'?type)
        #`(* ?number-of-elements
            #,(ffi.%prepend #'?c-sizeof "strideof-"
                (ffi.translate-type* #'?type))))
      ((_ ?type) (identifier? #'?type)
        (ffi.%prepend #'?c-sizeof "sizeof-"
          (ffi.translate-type* #'?type)))
      (_ (synner "invalid C language sizeof specification"))))
  (define-syntax* (c-strideof stx)
    (syntax-case stx ()
      ((_ ?type) (identifier? #'?type)
        (ffi.%prepend #'c-strideof "strideof-"
          (ffi.translate-type* #'?type)))
      (_
        (synner "invalid C language strideof specification"))))
  (define-syntax* (c-alignof stx)
    (syntax-case stx ()
      ((_ ?type) (identifier? #'?type)
        (ffi.%prepend #'c-alignof "alignof-"
          (ffi.translate-type* #'?type)))
      (_ (synner "invalid C language alignof specification"))))
  (define-syntax* (c-valueof stx)
    (syntax-case stx ()
      ((_ ?thing) (identifier? #'?thing)
        (ffi.%prepend #'c-valueof "valueof-" #'?thing))
      (_ (synner "invalid C language valueof specification"))))
  (define-syntax* (c-inspect stx)
    (syntax-case stx ()
      ((_ ?thing) (identifier? #'?thing)
        (ffi.%prepend #'c-inspect "inspect-" #'?thing))
      (_ (synner "invalid C language valueof specification"))))
  (define-syntax* (pointer-c-ref stx)
    (syntax-case stx ()
      ((_ ?type ?pointer ?offset)
        #`(ffi.pointer-c-ref
            #,(let ((type (ffi.translate-type #'?type)))
                (if type
                    (datum->syntax #'?type type)
                    #'?type))
            ?pointer ?offset))
      (_
        (synner
          "invalid syntax for C language raw memory getter"))))
  (define-syntax* (pointer-c-set! stx)
    (syntax-case stx ()
      ((_ ?type ?pointer ?offset ?value)
        #`(ffi.pointer-c-set!
            #,(let ((type (ffi.translate-type #'?type)))
                (if type
                    (datum->syntax #'?type type)
                    #'?type))
            ?pointer ?offset ?value))
      (_
        (synner
          "invalid syntax for C language raw memory setter"))))
  (define-syntax* (pointer-c-accessor stx)
    (syntax-case stx ()
      ((_ ?type)
        #`(ffi.pointer-c-accessor
            #,(let ((type (ffi.translate-type #'?type)))
                (if type
                    (datum->syntax #'?type type)
                    #'?type))))
      (_
        (synner
          "invalid syntax for C language raw memory getter"))))
  (define-syntax* (pointer-c-mutator stx)
    (syntax-case stx ()
      ((_ ?type)
        #`(ffi.pointer-c-mutator
            #,(let ((type (ffi.translate-type #'?type)))
                (if type
                    (datum->syntax #'?type type)
                    #'?type))))
      (_
        (synner
          "invalid syntax for C language raw memory setter"))))
  (define-inline (array-c-ref ?type ?pointer ?index)
    (pointer-c-ref ?type ?pointer
      (* ?index (c-strideof ?type))))
  (define-inline (array-c-set! ?type ?pointer ?index ?value)
    (pointer-c-set! ?type ?pointer
      (* ?index (c-strideof ?type)) ?value))
  (define-inline (array-c-pointer-to ?type ?pointer ?index)
    (ffi.pointer-add ?pointer (* ?index (c-strideof ?type))))
  (define sizeof-struct-flock @SIZEOF_FLOCK@)
  (define alignof-struct-flock @ALIGNOF_FLOCK@)
  (define strideof-struct-flock @STRIDEOF_FLOCK@)
  (define sizeof-struct-timeval @SIZEOF_TIMEVAL@)
  (define alignof-struct-timeval @ALIGNOF_TIMEVAL@)
  (define strideof-struct-timeval @STRIDEOF_TIMEVAL@)
  (define sizeof-struct-timespec @SIZEOF_TIMESPEC@)
  (define alignof-struct-timespec @ALIGNOF_TIMESPEC@)
  (define strideof-struct-timespec @STRIDEOF_TIMESPEC@)
  (define sizeof-struct-tms @SIZEOF_TMS@)
  (define alignof-struct-tms @ALIGNOF_TMS@)
  (define strideof-struct-tms @STRIDEOF_TMS@)
  (define sizeof-struct-dirent @SIZEOF_DIRENT@)
  (define alignof-struct-dirent @ALIGNOF_DIRENT@)
  (define strideof-struct-dirent @STRIDEOF_DIRENT@)
  (define sizeof-struct-utimbuf @SIZEOF_UTIMBUF@)
  (define alignof-struct-utimbuf @ALIGNOF_UTIMBUF@)
  (define strideof-struct-utimbuf @STRIDEOF_UTIMBUF@)
  (define sizeof-struct-timezone @SIZEOF_TIMEZONE@)
  (define alignof-struct-timezone @ALIGNOF_TIMEZONE@)
  (define strideof-struct-timezone @STRIDEOF_TIMEZONE@)
  (define sizeof-struct-tm @SIZEOF_TM@)
  (define alignof-struct-tm @ALIGNOF_TM@)
  (define strideof-struct-tm @STRIDEOF_TM@)
  (define sizeof-struct-ntptimeval @SIZEOF_NTPTIMEVAL@)
  (define alignof-struct-ntptimeval @ALIGNOF_NTPTIMEVAL@)
  (define strideof-struct-ntptimeval @STRIDEOF_NTPTIMEVAL@)
  (define sizeof-struct-timex @SIZEOF_TIMEX@)
  (define alignof-struct-timex @ALIGNOF_TIMEX@)
  (define strideof-struct-timex @STRIDEOF_TIMEX@)
  (define sizeof-struct-itimerval @SIZEOF_ITIMERVAL@)
  (define alignof-struct-itimerval @ALIGNOF_ITIMERVAL@)
  (define strideof-struct-itimerval @STRIDEOF_ITIMERVAL@)
  (define sizeof-struct-FTW @SIZEOF_FTW@)
  (define alignof-struct-FTW @ALIGNOF_FTW@)
  (define strideof-struct-FTW @STRIDEOF_FTW@)
  (define sizeof-struct-iovec @SIZEOF_IOVEC@)
  (define alignof-struct-iovec @ALIGNOF_IOVEC@)
  (define strideof-struct-iovec @STRIDEOF_IOVEC@)
  (define sizeof-struct-fdset @SIZEOF_FDSET@)
  (define alignof-struct-fdset @ALIGNOF_FDSET@)
  (define strideof-struct-fdset @STRIDEOF_FDSET@)
  (define sizeof-struct-passwd @SIZEOF_PASSWD@)
  (define alignof-struct-passwd @ALIGNOF_PASSWD@)
  (define strideof-struct-passwd @STRIDEOF_PASSWD@)
  (define sizeof-struct-group @SIZEOF_GROUP@)
  (define alignof-struct-group @ALIGNOF_GROUP@)
  (define strideof-struct-group @STRIDEOF_GROUP@)
  (define sizeof-struct-utsname @SIZEOF_UTSNAME@)
  (define alignof-struct-utsname @ALIGNOF_UTSNAME@)
  (define strideof-struct-utsname @STRIDEOF_UTSNAME@)
  (define sizeof-struct-fstab @SIZEOF_FSTAB@)
  (define alignof-struct-fstab @ALIGNOF_FSTAB@)
  (define strideof-struct-fstab @STRIDEOF_FSTAB@)
  (define sizeof-struct-mntent @SIZEOF_MNTENT@)
  (define alignof-struct-mntent @ALIGNOF_MNTENT@)
  (define strideof-struct-mntent @STRIDEOF_MNTENT@)
  (define sizeof-struct-sockaddr @SIZEOF_SOCKADDR@)
  (define alignof-struct-sockaddr @ALIGNOF_SOCKADDR@)
  (define strideof-struct-sockaddr @STRIDEOF_SOCKADDR@)
  (define sizeof-struct-sockaddr_in @SIZEOF_SOCKADDR_IN@)
  (define alignof-struct-sockaddr_in @ALIGNOF_SOCKADDR_IN@)
  (define strideof-struct-sockaddr_in @STRIDEOF_SOCKADDR_IN@)
  (define sizeof-struct-sockaddr_in6 @SIZEOF_SOCKADDR_IN6@)
  (define alignof-struct-sockaddr_in6 @ALIGNOF_SOCKADDR_IN6@)
  (define strideof-struct-sockaddr_in6
    @STRIDEOF_SOCKADDR_IN6@)
  (define sizeof-struct-sockaddr_un @SIZEOF_SOCKADDR_UN@)
  (define alignof-struct-sockaddr_un @ALIGNOF_SOCKADDR_UN@)
  (define strideof-struct-sockaddr_un @STRIDEOF_SOCKADDR_UN@)
  (define sizeof-struct-in_addr @SIZEOF_IN_ADDR@)
  (define alignof-struct-in_addr @ALIGNOF_IN_ADDR@)
  (define strideof-struct-in_addr @STRIDEOF_IN_ADDR@)
  (define sizeof-struct-in6_addr @SIZEOF_IN6_ADDR@)
  (define alignof-struct-in6_addr @ALIGNOF_IN6_ADDR@)
  (define strideof-struct-in6_addr @STRIDEOF_IN6_ADDR@)
  (define sizeof-struct-if_nameindex @SIZEOF_IF_NAMEINDEX@)
  (define alignof-struct-if_nameindex @ALIGNOF_IF_NAMEINDEX@)
  (define strideof-struct-if_nameindex
    @STRIDEOF_IF_NAMEINDEX@)
  (define sizeof-struct-netent @SIZEOF_NETENT@)
  (define alignof-struct-netent @ALIGNOF_NETENT@)
  (define strideof-struct-netent @STRIDEOF_NETENT@)
  (define sizeof-struct-linger @SIZEOF_LINGER@)
  (define alignof-struct-linger @ALIGNOF_LINGER@)
  (define strideof-struct-linger @STRIDEOF_LINGER@)
  (define sizeof-struct-hostent @SIZEOF_HOSTENT@)
  (define alignof-struct-hostent @ALIGNOF_HOSTENT@)
  (define strideof-struct-hostent @STRIDEOF_HOSTENT@)
  (define sizeof-struct-protoent @SIZEOF_PROTOENT@)
  (define alignof-struct-protoent @ALIGNOF_PROTOENT@)
  (define strideof-struct-protoent @STRIDEOF_PROTOENT@)
  (define sizeof-struct-servent @SIZEOF_SERVENT@)
  (define alignof-struct-servent @ALIGNOF_SERVENT@)
  (define strideof-struct-servent @STRIDEOF_SERVENT@)
  (define valueof-SEEK_SET @VALUEOF_SEEK_SET@)
  (define valueof-SEEK_CUR @VALUEOF_SEEK_CUR@)
  (define valueof-SEEK_END @VALUEOF_SEEK_END@)
  (define valueof-O_ACCMODE @VALUEOF_O_ACCMODE@)
  (define valueof-O_APPEND @VALUEOF_O_APPEND@)
  (define valueof-O_ASYNC @VALUEOF_O_ASYNC@)
  (define valueof-O_CREAT @VALUEOF_O_CREAT@)
  (define valueof-O_EXCL @VALUEOF_O_EXCL@)
  (define valueof-O_EXEC @VALUEOF_O_EXEC@)
  (define valueof-O_EXLOCK @VALUEOF_O_EXLOCK@)
  (define valueof-O_FSYNC @VALUEOF_O_FSYNC@)
  (define valueof-O_IGNORE_CTTY @VALUEOF_O_IGNORE_CTTY@)
  (define valueof-O_NDELAY @VALUEOF_O_NDELAY@)
  (define valueof-O_NOCTTY @VALUEOF_O_NOCTTY@)
  (define valueof-O_NOLINK @VALUEOF_O_NOLINK@)
  (define valueof-O_NONBLOCK @VALUEOF_O_NONBLOCK@)
  (define valueof-O_NOTRANS @VALUEOF_O_NOTRANS@)
  (define valueof-O_RDONLY @VALUEOF_O_RDONLY@)
  (define valueof-O_RDWR @VALUEOF_O_RDWR@)
  (define valueof-O_READ @VALUEOF_O_READ@)
  (define valueof-O_SHLOCK @VALUEOF_O_SHLOCK@)
  (define valueof-O_SYNC @VALUEOF_O_SYNC@)
  (define valueof-O_TRUNC @VALUEOF_O_TRUNC@)
  (define valueof-O_WRITE @VALUEOF_O_WRITE@)
  (define valueof-O_WRONLY @VALUEOF_O_WRONLY@)
  (define valueof-O_NOATIME @VALUEOF_O_NOATIME@)
  (define valueof-O_CLOEXEC @VALUEOF_O_CLOEXEC@)
  (define valueof-O_DIRECT @VALUEOF_O_DIRECT@)
  (define valueof-O_DIRECTORY @VALUEOF_O_DIRECTORY@)
  (define valueof-O_LARGEFILE @VALUEOF_O_LARGEFILE@)
  (define valueof-O_NOFOLLOW @VALUEOF_O_NOFOLLOW@)
  (define valueof-FD_CLOEXEC @VALUEOF_FD_CLOEXEC@)
  (define valueof-F_DUPFD @VALUEOF_F_DUPFD@)
  (define valueof-F_GETFD @VALUEOF_F_GETFD@)
  (define valueof-F_GETFL @VALUEOF_F_GETFL@)
  (define valueof-F_GETLK @VALUEOF_F_GETLK@)
  (define valueof-F_GETOWN @VALUEOF_F_GETOWN@)
  (define valueof-F_SETFD @VALUEOF_F_SETFD@)
  (define valueof-F_SETFL @VALUEOF_F_SETFL@)
  (define valueof-F_SETLKW @VALUEOF_F_SETLKW@)
  (define valueof-F_SETLK @VALUEOF_F_SETLK@)
  (define valueof-F_SETOWN @VALUEOF_F_SETOWN@)
  (define valueof-F_RDLCK @VALUEOF_F_RDLCK@)
  (define valueof-F_UNLCK @VALUEOF_F_UNLCK@)
  (define valueof-F_WRLCK @VALUEOF_F_WRLCK@)
  (define valueof-WNOHANG @VALUEOF_WNOHANG@)
  (define valueof-WUNTRACED @VALUEOF_WUNTRACED@)
  (define valueof-WCONTINUED @VALUEOF_WCONTINUED@)
  (define valueof-R_OK @VALUEOF_R_OK@)
  (define valueof-W_OK @VALUEOF_W_OK@)
  (define valueof-X_OK @VALUEOF_X_OK@)
  (define valueof-F_OK @VALUEOF_F_OK@)
  (define valueof-L_ctermid @VALUEOF_L_ctermid@)
  (define valueof-L_tmpnam @VALUEOF_L_tmpnam@)
  (define valueof-CLOCKS_PER_SEC @VALUEOF_CLOCKS_PER_SEC@)
  (define valueof-S_IRUSR @VALUEOF_S_IRUSR@)
  (define valueof-S_IWUSR @VALUEOF_S_IWUSR@)
  (define valueof-S_IXUSR @VALUEOF_S_IXUSR@)
  (define valueof-S_IRGRP @VALUEOF_S_IRGRP@)
  (define valueof-S_IWGRP @VALUEOF_S_IWGRP@)
  (define valueof-S_IXGRP @VALUEOF_S_IXGRP@)
  (define valueof-S_IROTH @VALUEOF_S_IROTH@)
  (define valueof-S_IWOTH @VALUEOF_S_IWOTH@)
  (define valueof-S_IXOTH @VALUEOF_S_IXOTH@)
  (define valueof-S_IRWXU @VALUEOF_S_IRWXU@)
  (define valueof-S_IRWXG @VALUEOF_S_IRWXG@)
  (define valueof-S_IRWXO @VALUEOF_S_IRWXO@)
  (define valueof-S_ISUID @VALUEOF_S_ISUID@)
  (define valueof-S_ISGID @VALUEOF_S_ISGID@)
  (define valueof-S_ISVTX @VALUEOF_S_ISVTX@)
  (define DIRENT_HAVE_D_NAMELEN @NAU_DIRENT_HAVE_D_NAMELEN@)
  (define DIRENT_HAVE_D_RECLEN @NAU_DIRENT_HAVE_D_RECLEN@)
  (define DIRENT_HAVE_D_OFF @NAU_DIRENT_HAVE_D_OFF@)
  (define DIRENT_HAVE_D_TYPE @NAU_DIRENT_HAVE_D_TYPE@)
  (define valueof-DT_BLK @VALUEOF_DT_BLK@)
  (define valueof-DT_CHR @VALUEOF_DT_CHR@)
  (define valueof-DT_DIR @VALUEOF_DT_DIR@)
  (define valueof-DT_FIFO @VALUEOF_DT_FIFO@)
  (define valueof-DT_LNK @VALUEOF_DT_LNK@)
  (define valueof-DT_REG @VALUEOF_DT_REG@)
  (define valueof-DT_SOCK @VALUEOF_DT_SOCK@)
  (define valueof-DT_UNKNOWN @VALUEOF_DT_UNKNOWN@)
  (define valueof-FTW_F @VALUEOF_FTW_F@)
  (define valueof-FTW_D @VALUEOF_FTW_D@)
  (define valueof-FTW_NS @VALUEOF_FTW_NS@)
  (define valueof-FTW_DNR @VALUEOF_FTW_DNR@)
  (define valueof-FTW_SL @VALUEOF_FTW_SL@)
  (define valueof-FTW_DP @VALUEOF_FTW_DP@)
  (define valueof-FTW_SLN @VALUEOF_FTW_SLN@)
  (define valueof-FTW_PHYS @VALUEOF_FTW_PHYS@)
  (define valueof-FTW_MOUNT @VALUEOF_FTW_MOUNT@)
  (define valueof-FTW_CHDIR @VALUEOF_FTW_CHDIR@)
  (define valueof-FTW_DEPTH @VALUEOF_FTW_DEPTH@)
  (define valueof-FTW_ACTIONRETVAL
    @VALUEOF_FTW_ACTIONRETVAL@)
  (define valueof-FTW_CONTINUE @VALUEOF_FTW_CONTINUE@)
  (define valueof-FTW_STOP @VALUEOF_FTW_STOP@)
  (define valueof-FTW_SKIP_SUBTREE
    @VALUEOF_FTW_SKIP_SUBTREE@)
  (define valueof-FTW_SKIP_SIBLINGS
    @VALUEOF_FTW_SKIP_SIBLINGS@)
  (define valueof-ITIMER_REAL @VALUEOF_ITIMER_REAL@)
  (define valueof-ITIMER_VIRTUAL @VALUEOF_ITIMER_VIRTUAL@)
  (define valueof-ITIMER_PROF @VALUEOF_ITIMER_PROF@)
  (define valueof-EOF @VALUEOF_EOF@)
  (define valueof-MAXSYMLINKS @VALUEOF_MAXSYMLINKS@)
  (define valueof-MAXPATHLEN @VALUEOF_MAXPATHLEN@)
  (define valueof-MAP_PRIVATE @VALUEOF_MAP_PRIVATE@)
  (define valueof-MAP_SHARED @VALUEOF_MAP_SHARED@)
  (define valueof-MAP_FIXED @VALUEOF_MAP_FIXED@)
  (define valueof-MAP_ANON @VALUEOF_MAP_ANON@)
  (define valueof-MAP_ANONYMOUS @VALUEOF_MAP_ANONYMOUS@)
  (define valueof-MAP_32BITS @VALUEOF_MAP_32BITS@)
  (define valueof-MAP_DENYWRITE @VALUEOF_MAP_DENYWRITE@)
  (define valueof-MAP_EXECUTABLE @VALUEOF_MAP_EXECUTABLE@)
  (define valueof-MAP_FILE @VALUEOF_MAP_FILE@)
  (define valueof-MAP_GROWSDOWN @VALUEOF_MAP_GROWSDOWN@)
  (define valueof-MAP_LOCKED @VALUEOF_MAP_LOCKED@)
  (define valueof-MAP_NONBLOCK @VALUEOF_MAP_NONBLOCK@)
  (define valueof-MAP_NORESERVE @VALUEOF_MAP_NORESERVE@)
  (define valueof-MAP_POPULATE @VALUEOF_MAP_POPULATE@)
  (define valueof-MAP_STACK @VALUEOF_MAP_STACK@)
  (define valueof-MAP_AUTOGROW @VALUEOF_MAP_AUTOGROW@)
  (define valueof-MAP_AUTORESRV @VALUEOF_MAP_AUTORESRV@)
  (define valueof-MAP_COPY @VALUEOF_MAP_COPY@)
  (define valueof-PROT_READ @VALUEOF_PROT_READ@)
  (define valueof-PROT_WRITE @VALUEOF_PROT_WRITE@)
  (define valueof-PROT_EXEC @VALUEOF_PROT_EXEC@)
  (define valueof-PROT_NONE @VALUEOF_PROT_NONE@)
  (define valueof-MS_SYNC @VALUEOF_MS_SYNC@)
  (define valueof-MS_ASYNC @VALUEOF_MS_ASYNC@)
  (define valueof-MREMAP_MAYMOVE @VALUEOF_MREMAP_MAYMOVE@)
  (define valueof-FD_SETSIZE @VALUEOF_FD_SETSIZE@)
  (define valueof-L_cuserid @VALUEOF_L_cuserid@)
  (define valueof-ARG_MAX @VALUEOF_ARG_MAX@)
  (define valueof-_POSIX_ARG_MAX @VALUEOF__POSIX_ARG_MAX@)
  (define valueof-CHILD_MAX @VALUEOF_CHILD_MAX@)
  (define valueof-_POSIX_CHILD_MAX
    @VALUEOF__POSIX_CHILD_MAX@)
  (define valueof-OPEN_MAX @VALUEOF_OPEN_MAX@)
  (define valueof-_POSIX_OPEN_MAX @VALUEOF__POSIX_OPEN_MAX@)
  (define valueof-STREAM_MAX @VALUEOF_STREAM_MAX@)
  (define valueof-_POSIX_STREAM_MAX
    @VALUEOF__POSIX_STREAM_MAX@)
  (define valueof-TZNAME_MAX @VALUEOF_TZNAME_MAX@)
  (define valueof-_POSIX_TZNAME_MAX
    @VALUEOF__POSIX_TZNAME_MAX@)
  (define valueof-NGROUPS_MAX @VALUEOF_NGROUPS_MAX@)
  (define valueof-SSIZE_MAX @VALUEOF_SSIZE_MAX@)
  (define valueof-RE_DUP_MAX @VALUEOF_RE_DUP_MAX@)
  (define valueof-_POSIX_JOB_CONTROL
    @VALUEOF__POSIX_JOB_CONTROL@)
  (define valueof-_POSIX_SAVED_IDS
    @VALUEOF__POSIX_SAVED_IDS@)
  (define valueof-_POSIX2_C_DEV @VALUEOF__POSIX2_C_DEV@)
  (define valueof-_POSIX2_FORT_DEV
    @VALUEOF__POSIX2_FORT_DEV@)
  (define valueof-_POSIX2_FORT_RUN
    @VALUEOF__POSIX2_FORT_RUN@)
  (define valueof-_POSIX2_LOCALEDEF
    @VALUEOF__POSIX2_LOCALEDEF@)
  (define valueof-_POSIX2_SW_DEV @VALUEOF__POSIX2_SW_DEV@)
  (define valueof-_POSIX_VERSION @VALUEOF__POSIX_VERSION@)
  (define valueof-_POSIX2_C_VERSION
    @VALUEOF__POSIX2_C_VERSION@)
  (define valueof-_SC_ARG_MAX @VALUEOF__SC_ARG_MAX@)
  (define valueof-_SC_CHILD_MAX @VALUEOF__SC_CHILD_MAX@)
  (define valueof-_SC_CLK_TCK @VALUEOF__SC_CLK_TCK@)
  (define valueof-_SC_NGROUPS_MAX @VALUEOF__SC_NGROUPS_MAX@)
  (define valueof-_SC_OPEN_MAX @VALUEOF__SC_OPEN_MAX@)
  (define valueof-_SC_STREAM_MAX @VALUEOF__SC_STREAM_MAX@)
  (define valueof-_SC_TZNAME_MAX @VALUEOF__SC_TZNAME_MAX@)
  (define valueof-_SC_JOB_CONTROL @VALUEOF__SC_JOB_CONTROL@)
  (define valueof-_SC_SAVED_IDS @VALUEOF__SC_SAVED_IDS@)
  (define valueof-_SC_REALTIME_SIGNALS
    @VALUEOF__SC_REALTIME_SIGNALS@)
  (define valueof-_SC_PRIORITY_SCHEDULING
    @VALUEOF__SC_PRIORITY_SCHEDULING@)
  (define valueof-_SC_TIMERS @VALUEOF__SC_TIMERS@)
  (define valueof-_SC_ASYNCHRONOUS_IO
    @VALUEOF__SC_ASYNCHRONOUS_IO@)
  (define valueof-_SC_PRIORITIZED_IO
    @VALUEOF__SC_PRIORITIZED_IO@)
  (define valueof-_SC_SYNCHRONIZED_IO
    @VALUEOF__SC_SYNCHRONIZED_IO@)
  (define valueof-_SC_FSYNC @VALUEOF__SC_FSYNC@)
  (define valueof-_SC_MAPPED_FILES
    @VALUEOF__SC_MAPPED_FILES@)
  (define valueof-_SC_MEMLOCK @VALUEOF__SC_MEMLOCK@)
  (define valueof-_SC_MEMLOCK_RANGE
    @VALUEOF__SC_MEMLOCK_RANGE@)
  (define valueof-_SC_MEMORY_PROTECTION
    @VALUEOF__SC_MEMORY_PROTECTION@)
  (define valueof-_SC_MESSAGE_PASSING
    @VALUEOF__SC_MESSAGE_PASSING@)
  (define valueof-_SC_SEMAPHORES @VALUEOF__SC_SEMAPHORES@)
  (define valueof-_SC_SHARED_MEMORY_OBJECTS
    @VALUEOF__SC_SHARED_MEMORY_OBJECTS@)
  (define valueof-_SC_AIO_LISTIO_MAX
    @VALUEOF__SC_AIO_LISTIO_MAX@)
  (define valueof-_SC_AIO_MAX @VALUEOF__SC_AIO_MAX@)
  (define valueof-_SC_AIO_PRIO_DELTA_MAX
    @VALUEOF__SC_AIO_PRIO_DELTA_MAX@)
  (define valueof-_SC_DELAYTIMER_MAX
    @VALUEOF__SC_DELAYTIMER_MAX@)
  (define valueof-_SC_MQ_OPEN_MAX @VALUEOF__SC_MQ_OPEN_MAX@)
  (define valueof-_SC_MQ_PRIO_MAX @VALUEOF__SC_MQ_PRIO_MAX@)
  (define valueof-_SC_VERSION @VALUEOF__SC_VERSION@)
  (define valueof-_SC_PAGESIZE @VALUEOF__SC_PAGESIZE@)
  (define valueof-_SC_PAGE_SIZE @VALUEOF__SC_PAGE_SIZE@)
  (define valueof-_SC_RTSIG_MAX @VALUEOF__SC_RTSIG_MAX@)
  (define valueof-_SC_SEM_NSEMS_MAX
    @VALUEOF__SC_SEM_NSEMS_MAX@)
  (define valueof-_SC_SEM_VALUE_MAX
    @VALUEOF__SC_SEM_VALUE_MAX@)
  (define valueof-_SC_SIGQUEUE_MAX
    @VALUEOF__SC_SIGQUEUE_MAX@)
  (define valueof-_SC_TIMER_MAX @VALUEOF__SC_TIMER_MAX@)
  (define valueof-_SC_BC_BASE_MAX @VALUEOF__SC_BC_BASE_MAX@)
  (define valueof-_SC_BC_DIM_MAX @VALUEOF__SC_BC_DIM_MAX@)
  (define valueof-_SC_BC_SCALE_MAX
    @VALUEOF__SC_BC_SCALE_MAX@)
  (define valueof-_SC_BC_STRING_MAX
    @VALUEOF__SC_BC_STRING_MAX@)
  (define valueof-_SC_COLL_WEIGHTS_MAX
    @VALUEOF__SC_COLL_WEIGHTS_MAX@)
  (define valueof-_SC_EQUIV_CLASS_MAX
    @VALUEOF__SC_EQUIV_CLASS_MAX@)
  (define valueof-_SC_EXPR_NEST_MAX
    @VALUEOF__SC_EXPR_NEST_MAX@)
  (define valueof-_SC_LINE_MAX @VALUEOF__SC_LINE_MAX@)
  (define valueof-_SC_RE_DUP_MAX @VALUEOF__SC_RE_DUP_MAX@)
  (define valueof-_SC_CHARCLASS_NAME_MAX
    @VALUEOF__SC_CHARCLASS_NAME_MAX@)
  (define valueof-_SC_2_VERSION @VALUEOF__SC_2_VERSION@)
  (define valueof-_SC_2_C_BIND @VALUEOF__SC_2_C_BIND@)
  (define valueof-_SC_2_C_DEV @VALUEOF__SC_2_C_DEV@)
  (define valueof-_SC_2_FORT_DEV @VALUEOF__SC_2_FORT_DEV@)
  (define valueof-_SC_2_FORT_RUN @VALUEOF__SC_2_FORT_RUN@)
  (define valueof-_SC_2_SW_DEV @VALUEOF__SC_2_SW_DEV@)
  (define valueof-_SC_2_LOCALEDEF @VALUEOF__SC_2_LOCALEDEF@)
  (define valueof-_SC_PII @VALUEOF__SC_PII@)
  (define valueof-_SC_PII_XTI @VALUEOF__SC_PII_XTI@)
  (define valueof-_SC_PII_SOCKET @VALUEOF__SC_PII_SOCKET@)
  (define valueof-_SC_PII_INTERNET
    @VALUEOF__SC_PII_INTERNET@)
  (define valueof-_SC_PII_OSI @VALUEOF__SC_PII_OSI@)
  (define valueof-_SC_POLL @VALUEOF__SC_POLL@)
  (define valueof-_SC_SELECT @VALUEOF__SC_SELECT@)
  (define valueof-_SC_UIO_MAXIOV @VALUEOF__SC_UIO_MAXIOV@)
  (define valueof-_SC_IOV_MAX @VALUEOF__SC_IOV_MAX@)
  (define valueof-_SC_PII_INTERNET_STREAM
    @VALUEOF__SC_PII_INTERNET_STREAM@)
  (define valueof-_SC_PII_INTERNET_DGRAM
    @VALUEOF__SC_PII_INTERNET_DGRAM@)
  (define valueof-_SC_PII_OSI_COTS
    @VALUEOF__SC_PII_OSI_COTS@)
  (define valueof-_SC_PII_OSI_CLTS
    @VALUEOF__SC_PII_OSI_CLTS@)
  (define valueof-_SC_PII_OSI_M @VALUEOF__SC_PII_OSI_M@)
  (define valueof-_SC_T_IOV_MAX @VALUEOF__SC_T_IOV_MAX@)
  (define valueof-_SC_THREADS @VALUEOF__SC_THREADS@)
  (define valueof-_SC_THREAD_SAFE_FUNCTIONS
    @VALUEOF__SC_THREAD_SAFE_FUNCTIONS@)
  (define valueof-_SC_GETGR_R_SIZE_MAX
    @VALUEOF__SC_GETGR_R_SIZE_MAX@)
  (define valueof-_SC_GETPW_R_SIZE_MAX
    @VALUEOF__SC_GETPW_R_SIZE_MAX@)
  (define valueof-_SC_LOGIN_NAME_MAX
    @VALUEOF__SC_LOGIN_NAME_MAX@)
  (define valueof-_SC_TTY_NAME_MAX
    @VALUEOF__SC_TTY_NAME_MAX@)
  (define valueof-_SC_THREAD_DESTRUCTOR_ITERATIONS
    @VALUEOF__SC_THREAD_DESTRUCTOR_ITERATIONS@)
  (define valueof-_SC_THREAD_KEYS_MAX
    @VALUEOF__SC_THREAD_KEYS_MAX@)
  (define valueof-_SC_THREAD_STACK_MIN
    @VALUEOF__SC_THREAD_STACK_MIN@)
  (define valueof-_SC_THREAD_THREADS_MAX
    @VALUEOF__SC_THREAD_THREADS_MAX@)
  (define valueof-_SC_THREAD_ATTR_STACKADDR
    @VALUEOF__SC_THREAD_ATTR_STACKADDR@)
  (define valueof-_SC_THREAD_ATTR_STACKSIZE
    @VALUEOF__SC_THREAD_ATTR_STACKSIZE@)
  (define valueof-_SC_THREAD_PRIORITY_SCHEDULING
    @VALUEOF__SC_THREAD_PRIORITY_SCHEDULING@)
  (define valueof-_SC_THREAD_PRIO_INHERIT
    @VALUEOF__SC_THREAD_PRIO_INHERIT@)
  (define valueof-_SC_THREAD_PRIO_PROTECT
    @VALUEOF__SC_THREAD_PRIO_PROTECT@)
  (define valueof-_SC_THREAD_PROCESS_SHARED
    @VALUEOF__SC_THREAD_PROCESS_SHARED@)
  (define valueof-_SC_NPROCESSORS_CONF
    @VALUEOF__SC_NPROCESSORS_CONF@)
  (define valueof-_SC_NPROCESSORS_ONLN
    @VALUEOF__SC_NPROCESSORS_ONLN@)
  (define valueof-_SC_PHYS_PAGES @VALUEOF__SC_PHYS_PAGES@)
  (define valueof-_SC_AVPHYS_PAGES
    @VALUEOF__SC_AVPHYS_PAGES@)
  (define valueof-_SC_ATEXIT_MAX @VALUEOF__SC_ATEXIT_MAX@)
  (define valueof-_SC_PASS_MAX @VALUEOF__SC_PASS_MAX@)
  (define valueof-_SC_XOPEN_VERSION
    @VALUEOF__SC_XOPEN_VERSION@)
  (define valueof-_SC_XOPEN_XCU_VERSION
    @VALUEOF__SC_XOPEN_XCU_VERSION@)
  (define valueof-_SC_XOPEN_UNIX @VALUEOF__SC_XOPEN_UNIX@)
  (define valueof-_SC_XOPEN_CRYPT @VALUEOF__SC_XOPEN_CRYPT@)
  (define valueof-_SC_XOPEN_ENH_I18N
    @VALUEOF__SC_XOPEN_ENH_I18N@)
  (define valueof-_SC_XOPEN_SHM @VALUEOF__SC_XOPEN_SHM@)
  (define valueof-_SC_2_CHAR_TERM @VALUEOF__SC_2_CHAR_TERM@)
  (define valueof-_SC_2_C_VERSION @VALUEOF__SC_2_C_VERSION@)
  (define valueof-_SC_2_UPE @VALUEOF__SC_2_UPE@)
  (define valueof-_SC_XOPEN_XPG2 @VALUEOF__SC_XOPEN_XPG2@)
  (define valueof-_SC_XOPEN_XPG3 @VALUEOF__SC_XOPEN_XPG3@)
  (define valueof-_SC_XOPEN_XPG4 @VALUEOF__SC_XOPEN_XPG4@)
  (define valueof-_SC_CHAR_BIT @VALUEOF__SC_CHAR_BIT@)
  (define valueof-_SC_CHAR_MAX @VALUEOF__SC_CHAR_MAX@)
  (define valueof-_SC_CHAR_MIN @VALUEOF__SC_CHAR_MIN@)
  (define valueof-_SC_INT_MAX @VALUEOF__SC_INT_MAX@)
  (define valueof-_SC_INT_MIN @VALUEOF__SC_INT_MIN@)
  (define valueof-_SC_LONG_BIT @VALUEOF__SC_LONG_BIT@)
  (define valueof-_SC_WORD_BIT @VALUEOF__SC_WORD_BIT@)
  (define valueof-_SC_MB_LEN_MAX @VALUEOF__SC_MB_LEN_MAX@)
  (define valueof-_SC_NZERO @VALUEOF__SC_NZERO@)
  (define valueof-_SC_SSIZE_MAX @VALUEOF__SC_SSIZE_MAX@)
  (define valueof-_SC_SCHAR_MAX @VALUEOF__SC_SCHAR_MAX@)
  (define valueof-_SC_SCHAR_MIN @VALUEOF__SC_SCHAR_MIN@)
  (define valueof-_SC_SHRT_MAX @VALUEOF__SC_SHRT_MAX@)
  (define valueof-_SC_SHRT_MIN @VALUEOF__SC_SHRT_MIN@)
  (define valueof-_SC_UCHAR_MAX @VALUEOF__SC_UCHAR_MAX@)
  (define valueof-_SC_UINT_MAX @VALUEOF__SC_UINT_MAX@)
  (define valueof-_SC_ULONG_MAX @VALUEOF__SC_ULONG_MAX@)
  (define valueof-_SC_USHRT_MAX @VALUEOF__SC_USHRT_MAX@)
  (define valueof-_SC_NL_ARGMAX @VALUEOF__SC_NL_ARGMAX@)
  (define valueof-_SC_NL_LANGMAX @VALUEOF__SC_NL_LANGMAX@)
  (define valueof-_SC_NL_MSGMAX @VALUEOF__SC_NL_MSGMAX@)
  (define valueof-_SC_NL_NMAX @VALUEOF__SC_NL_NMAX@)
  (define valueof-_SC_NL_SETMAX @VALUEOF__SC_NL_SETMAX@)
  (define valueof-_SC_NL_TEXTMAX @VALUEOF__SC_NL_TEXTMAX@)
  (define valueof-_SC_XBS5_ILP32_OFF32
    @VALUEOF__SC_XBS5_ILP32_OFF32@)
  (define valueof-_SC_XBS5_ILP32_OFFBIG
    @VALUEOF__SC_XBS5_ILP32_OFFBIG@)
  (define valueof-_SC_XBS5_LP64_OFF64
    @VALUEOF__SC_XBS5_LP64_OFF64@)
  (define valueof-_SC_XBS5_LPBIG_OFFBIG
    @VALUEOF__SC_XBS5_LPBIG_OFFBIG@)
  (define valueof-_SC_XOPEN_LEGACY
    @VALUEOF__SC_XOPEN_LEGACY@)
  (define valueof-_SC_XOPEN_REALTIME
    @VALUEOF__SC_XOPEN_REALTIME@)
  (define valueof-_SC_XOPEN_REALTIME_THREADS
    @VALUEOF__SC_XOPEN_REALTIME_THREADS@)
  (define valueof-_SC_ADVISORY_INFO
    @VALUEOF__SC_ADVISORY_INFO@)
  (define valueof-_SC_BARRIERS @VALUEOF__SC_BARRIERS@)
  (define valueof-_SC_BASE @VALUEOF__SC_BASE@)
  (define valueof-_SC_C_LANG_SUPPORT
    @VALUEOF__SC_C_LANG_SUPPORT@)
  (define valueof-_SC_C_LANG_SUPPORT_R
    @VALUEOF__SC_C_LANG_SUPPORT_R@)
  (define valueof-_SC_CLOCK_SELECTION
    @VALUEOF__SC_CLOCK_SELECTION@)
  (define valueof-_SC_CPUTIME @VALUEOF__SC_CPUTIME@)
  (define valueof-_SC_THREAD_CPUTIME
    @VALUEOF__SC_THREAD_CPUTIME@)
  (define valueof-_SC_DEVICE_IO @VALUEOF__SC_DEVICE_IO@)
  (define valueof-_SC_DEVICE_SPECIFIC
    @VALUEOF__SC_DEVICE_SPECIFIC@)
  (define valueof-_SC_DEVICE_SPECIFIC_R
    @VALUEOF__SC_DEVICE_SPECIFIC_R@)
  (define valueof-_SC_FD_MGMT @VALUEOF__SC_FD_MGMT@)
  (define valueof-_SC_FIFO @VALUEOF__SC_FIFO@)
  (define valueof-_SC_PIPE @VALUEOF__SC_PIPE@)
  (define valueof-_SC_FILE_ATTRIBUTES
    @VALUEOF__SC_FILE_ATTRIBUTES@)
  (define valueof-_SC_FILE_LOCKING
    @VALUEOF__SC_FILE_LOCKING@)
  (define valueof-_SC_FILE_SYSTEM @VALUEOF__SC_FILE_SYSTEM@)
  (define valueof-_SC_MONOTONIC_CLOCK
    @VALUEOF__SC_MONOTONIC_CLOCK@)
  (define valueof-_SC_MULTI_PROCESS
    @VALUEOF__SC_MULTI_PROCESS@)
  (define valueof-_SC_SINGLE_PROCESS
    @VALUEOF__SC_SINGLE_PROCESS@)
  (define valueof-_SC_NETWORKING @VALUEOF__SC_NETWORKING@)
  (define valueof-_SC_READER_WRITER_LOCKS
    @VALUEOF__SC_READER_WRITER_LOCKS@)
  (define valueof-_SC_SPIN_LOCKS @VALUEOF__SC_SPIN_LOCKS@)
  (define valueof-_SC_REGEXP @VALUEOF__SC_REGEXP@)
  (define valueof-_SC_REGEX_VERSION
    @VALUEOF__SC_REGEX_VERSION@)
  (define valueof-_SC_SHELL @VALUEOF__SC_SHELL@)
  (define valueof-_SC_SIGNALS @VALUEOF__SC_SIGNALS@)
  (define valueof-_SC_SPAWN @VALUEOF__SC_SPAWN@)
  (define valueof-_SC_SPORADIC_SERVER
    @VALUEOF__SC_SPORADIC_SERVER@)
  (define valueof-_SC_THREAD_SPORADIC_SERVER
    @VALUEOF__SC_THREAD_SPORADIC_SERVER@)
  (define valueof-_SC_SYSTEM_DATABASE
    @VALUEOF__SC_SYSTEM_DATABASE@)
  (define valueof-_SC_SYSTEM_DATABASE_R
    @VALUEOF__SC_SYSTEM_DATABASE_R@)
  (define valueof-_SC_TIMEOUTS @VALUEOF__SC_TIMEOUTS@)
  (define valueof-_SC_TYPED_MEMORY_OBJECTS
    @VALUEOF__SC_TYPED_MEMORY_OBJECTS@)
  (define valueof-_SC_USER_GROUPS @VALUEOF__SC_USER_GROUPS@)
  (define valueof-_SC_USER_GROUPS_R
    @VALUEOF__SC_USER_GROUPS_R@)
  (define valueof-_SC_2_PBS @VALUEOF__SC_2_PBS@)
  (define valueof-_SC_2_PBS_ACCOUNTING
    @VALUEOF__SC_2_PBS_ACCOUNTING@)
  (define valueof-_SC_2_PBS_LOCATE
    @VALUEOF__SC_2_PBS_LOCATE@)
  (define valueof-_SC_2_PBS_MESSAGE
    @VALUEOF__SC_2_PBS_MESSAGE@)
  (define valueof-_SC_2_PBS_TRACK @VALUEOF__SC_2_PBS_TRACK@)
  (define valueof-_SC_SYMLOOP_MAX @VALUEOF__SC_SYMLOOP_MAX@)
  (define valueof-_SC_STREAMS @VALUEOF__SC_STREAMS@)
  (define valueof-_SC_2_PBS_CHECKPOINT
    @VALUEOF__SC_2_PBS_CHECKPOINT@)
  (define valueof-_SC_V6_ILP32_OFF32
    @VALUEOF__SC_V6_ILP32_OFF32@)
  (define valueof-_SC_V6_ILP32_OFFBIG
    @VALUEOF__SC_V6_ILP32_OFFBIG@)
  (define valueof-_SC_V6_LP64_OFF64
    @VALUEOF__SC_V6_LP64_OFF64@)
  (define valueof-_SC_V6_LPBIG_OFFBIG
    @VALUEOF__SC_V6_LPBIG_OFFBIG@)
  (define valueof-_SC_HOST_NAME_MAX
    @VALUEOF__SC_HOST_NAME_MAX@)
  (define valueof-_SC_TRACE @VALUEOF__SC_TRACE@)
  (define valueof-_SC_TRACE_EVENT_FILTER
    @VALUEOF__SC_TRACE_EVENT_FILTER@)
  (define valueof-_SC_TRACE_INHERIT
    @VALUEOF__SC_TRACE_INHERIT@)
  (define valueof-_SC_TRACE_LOG @VALUEOF__SC_TRACE_LOG@)
  (define valueof-_SC_LEVEL1_ICACHE_SIZE
    @VALUEOF__SC_LEVEL1_ICACHE_SIZE@)
  (define valueof-_SC_LEVEL1_ICACHE_ASSOC
    @VALUEOF__SC_LEVEL1_ICACHE_ASSOC@)
  (define valueof-_SC_LEVEL1_ICACHE_LINESIZE
    @VALUEOF__SC_LEVEL1_ICACHE_LINESIZE@)
  (define valueof-_SC_LEVEL1_DCACHE_SIZE
    @VALUEOF__SC_LEVEL1_DCACHE_SIZE@)
  (define valueof-_SC_LEVEL1_DCACHE_ASSOC
    @VALUEOF__SC_LEVEL1_DCACHE_ASSOC@)
  (define valueof-_SC_LEVEL1_DCACHE_LINESIZE
    @VALUEOF__SC_LEVEL1_DCACHE_LINESIZE@)
  (define valueof-_SC_LEVEL2_CACHE_SIZE
    @VALUEOF__SC_LEVEL2_CACHE_SIZE@)
  (define valueof-_SC_LEVEL2_CACHE_ASSOC
    @VALUEOF__SC_LEVEL2_CACHE_ASSOC@)
  (define valueof-_SC_LEVEL2_CACHE_LINESIZE
    @VALUEOF__SC_LEVEL2_CACHE_LINESIZE@)
  (define valueof-_SC_LEVEL3_CACHE_SIZE
    @VALUEOF__SC_LEVEL3_CACHE_SIZE@)
  (define valueof-_SC_LEVEL3_CACHE_ASSOC
    @VALUEOF__SC_LEVEL3_CACHE_ASSOC@)
  (define valueof-_SC_LEVEL3_CACHE_LINESIZE
    @VALUEOF__SC_LEVEL3_CACHE_LINESIZE@)
  (define valueof-_SC_LEVEL4_CACHE_SIZE
    @VALUEOF__SC_LEVEL4_CACHE_SIZE@)
  (define valueof-_SC_LEVEL4_CACHE_ASSOC
    @VALUEOF__SC_LEVEL4_CACHE_ASSOC@)
  (define valueof-_SC_LEVEL4_CACHE_LINESIZE
    @VALUEOF__SC_LEVEL4_CACHE_LINESIZE@)
  (define valueof-_SC_IPV6 @VALUEOF__SC_IPV6@)
  (define valueof-_SC_RAW_SOCKETS @VALUEOF__SC_RAW_SOCKETS@)
  (define valueof-LINK_MAX @VALUEOF_LINK_MAX@)
  (define valueof-MAX_CANON @VALUEOF_MAX_CANON@)
  (define valueof-MAX_INPUT @VALUEOF_MAX_INPUT@)
  (define valueof-NAME_MAX @VALUEOF_NAME_MAX@)
  (define valueof-PATH_MAX @VALUEOF_PATH_MAX@)
  (define valueof-PIPE_BUF @VALUEOF_PIPE_BUF@)
  (define valueof-MAXNAMLEN @VALUEOF_MAXNAMLEN@)
  (define valueof-FILENAME_MAX @VALUEOF_FILENAME_MAX@)
  (define valueof-_POSIX_CHOWN_RESTRICTED
    @VALUEOF__POSIX_CHOWN_RESTRICTED@)
  (define valueof-_POSIX_NO_TRUNC @VALUEOF__POSIX_NO_TRUNC@)
  (define valueof-_POSIX_VDISABLE @VALUEOF__POSIX_VDISABLE@)
  (define valueof-_POSIX_LINK_MAX @VALUEOF__POSIX_LINK_MAX@)
  (define valueof-_POSIX_MAX_CANON
    @VALUEOF__POSIX_MAX_CANON@)
  (define valueof-_POSIX_MAX_INPUT
    @VALUEOF__POSIX_MAX_INPUT@)
  (define valueof-_POSIX_NAME_MAX @VALUEOF__POSIX_NAME_MAX@)
  (define valueof-_POSIX_PATH_MAX @VALUEOF__POSIX_PATH_MAX@)
  (define valueof-_POSIX_PIPE_BUF @VALUEOF__POSIX_PIPE_BUF@)
  (define valueof-SYMLINK_MAX @VALUEOF_SYMLINK_MAX@)
  (define valueof-POSIX_REC_INCR_XFER_SIZE
    @VALUEOF_POSIX_REC_INCR_XFER_SIZE@)
  (define valueof-POSIX_REC_MAX_XFER_SIZE
    @VALUEOF_POSIX_REC_MAX_XFER_SIZE@)
  (define valueof-POSIX_REC_MIN_XFER_SIZE
    @VALUEOF_POSIX_REC_MIN_XFER_SIZE@)
  (define valueof-POSIX_REC_XFER_ALIGN
    @VALUEOF_POSIX_REC_XFER_ALIGN@)
  (define valueof-_PC_LINK_MAX @VALUEOF__PC_LINK_MAX@)
  (define valueof-_PC_MAX_CANON @VALUEOF__PC_MAX_CANON@)
  (define valueof-_PC_MAX_INPUT @VALUEOF__PC_MAX_INPUT@)
  (define valueof-_PC_NAME_MAX @VALUEOF__PC_NAME_MAX@)
  (define valueof-_PC_PATH_MAX @VALUEOF__PC_PATH_MAX@)
  (define valueof-_PC_PIPE_BUF @VALUEOF__PC_PIPE_BUF@)
  (define valueof-_PC_CHOWN_RESTRICTED
    @VALUEOF__PC_CHOWN_RESTRICTED@)
  (define valueof-_PC_NO_TRUNC @VALUEOF__PC_NO_TRUNC@)
  (define valueof-_PC_VDISABLE @VALUEOF__PC_VDISABLE@)
  (define valueof-_PC_SYNC_IO @VALUEOF__PC_SYNC_IO@)
  (define valueof-_PC_ASYNC_IO @VALUEOF__PC_ASYNC_IO@)
  (define valueof-_PC_PRIO_IO @VALUEOF__PC_PRIO_IO@)
  (define valueof-_PC_FILESIZEBITS
    @VALUEOF__PC_FILESIZEBITS@)
  (define valueof-_PC_REC_INCR_XFER_SIZE
    @VALUEOF__PC_REC_INCR_XFER_SIZE@)
  (define valueof-_PC_REC_MAX_XFER_SIZE
    @VALUEOF__PC_REC_MAX_XFER_SIZE@)
  (define valueof-_PC_REC_MIN_XFER_SIZE
    @VALUEOF__PC_REC_MIN_XFER_SIZE@)
  (define valueof-_PC_REC_XFER_ALIGN
    @VALUEOF__PC_REC_XFER_ALIGN@)
  (define valueof-BC_BASE_MAX @VALUEOF_BC_BASE_MAX@)
  (define valueof-_POSIX_BC_BASE_MAX
    @VALUEOF__POSIX_BC_BASE_MAX@)
  (define valueof-BC_DIM_MAX @VALUEOF_BC_DIM_MAX@)
  (define valueof-_POSIX_BC_DIM_MAX
    @VALUEOF__POSIX_BC_DIM_MAX@)
  (define valueof-BC_SCALE_MAX @VALUEOF_BC_SCALE_MAX@)
  (define valueof-_POSIX_BC_SCALE_MAX
    @VALUEOF__POSIX_BC_SCALE_MAX@)
  (define valueof-BC_STRING_MAX @VALUEOF_BC_STRING_MAX@)
  (define valueof-_POSIX_BC_STRING_MAX
    @VALUEOF__POSIX_BC_STRING_MAX@)
  (define valueof-COLL_WEIGHTS_MAX
    @VALUEOF_COLL_WEIGHTS_MAX@)
  (define valueof-_POSIX_COLL_WEIGHTS_MAX
    @VALUEOF__POSIX_COLL_WEIGHTS_MAX@)
  (define valueof-EXPR_NEXT_MAX @VALUEOF_EXPR_NEXT_MAX@)
  (define valueof-_POSIX_EXPR_NEXT_MAX
    @VALUEOF__POSIX_EXPR_NEXT_MAX@)
  (define valueof-LINE_MAX @VALUEOF_LINE_MAX@)
  (define valueof-_POSIX_LINE_MAX @VALUEOF__POSIX_LINE_MAX@)
  (define valueof-EQUIV_CLASS_MAX @VALUEOF_EQUIV_CLASS_MAX@)
  (define valueof-_POSIX_EQUIV_CLASS_MAX
    @VALUEOF__POSIX_EQUIV_CLASS_MAX@)
  (define valueof-_CS_PATH @VALUEOF__CS_PATH@)
  (define valueof-_CS_LFS_CFLAGS @VALUEOF__CS_LFS_CFLAGS@)
  (define valueof-_CS_LFS_LDFLAGS @VALUEOF__CS_LFS_LDFLAGS@)
  (define valueof-_CS_LFS_LIBS @VALUEOF__CS_LFS_LIBS@)
  (define valueof-_CS_LFS_LINTFLAGS
    @VALUEOF__CS_LFS_LINTFLAGS@)
  (define valueof-_CS_LFS64_CFLAGS
    @VALUEOF__CS_LFS64_CFLAGS@)
  (define valueof-_CS_LFS64_LDFLAGS
    @VALUEOF__CS_LFS64_LDFLAGS@)
  (define valueof-_CS_LFS64_LIBS @VALUEOF__CS_LFS64_LIBS@)
  (define valueof-_CS_LFS64_LINTFLAGS
    @VALUEOF__CS_LFS64_LINTFLAGS@)
  (define valueof-_PATH_MNTTAB "@STRINGOF__PATH_MNTTAB@")
  (define valueof-_PATH_FSTAB "@STRINGOF__PATH_FSTAB@")
  (define valueof-_PATH_MOUNTED "@STRINGOF__PATH_MOUNTED@")
  (define valueof-FSTAB_RW "@STRINGOF_FSTAB_RW@")
  (define valueof-FSTAB_RQ "@STRINGOF_FSTAB_RQ@")
  (define valueof-FSTAB_RO "@STRINGOF_FSTAB_RO@")
  (define valueof-FSTAB_SW "@STRINGOF_FSTAB_SW@")
  (define valueof-FSTAB_XX "@STRINGOF_FSTAB_XX@")
  (define valueof-MNTTYPE_IGNORE "@STRINGOF_MNTTYPE_IGNORE@")
  (define valueof-MNTTYPE_NFS "@STRINGOF_MNTTYPE_NFS@")
  (define valueof-MNTTYPE_SWAP "@STRINGOF_MNTTYPE_SWAP@")
  (define valueof-MNTOPT_DEFAULTS
    "@STRINGOF_MNTOPT_DEFAULTS@")
  (define valueof-MNTOPT_RO "@STRINGOF_MNTOPT_RO@")
  (define valueof-MNTOPT_RW "@STRINGOF_MNTOPT_RW@")
  (define valueof-MNTOPT_SUID "@STRINGOF_MNTOPT_SUID@")
  (define valueof-MNTOPT_NOSUID "@STRINGOF_MNTOPT_NOSUID@")
  (define valueof-MNTOPT_NOAUTO "@STRINGOF_MNTOPT_NOAUTO@")
  (define valueof-MS_MGC_MASK @VALUEOF_MS_MGC_MASK@)
  (define valueof-MS_REMOUNT @VALUEOF_MS_REMOUNT@)
  (define valueof-MS_RDONLY @VALUEOF_MS_RDONLY@)
  (define valueof-S_IMMUTABLE @VALUEOF_S_IMMUTABLE@)
  (define valueof-S_APPEND @VALUEOF_S_APPEND@)
  (define valueof-MS_NOSUID @VALUEOF_MS_NOSUID@)
  (define valueof-MS_NOEXEC @VALUEOF_MS_NOEXEC@)
  (define valueof-MS_NODEV @VALUEOF_MS_NODEV@)
  (define valueof-MS_SYNCHRONOUS @VALUEOF_MS_SYNCHRONOUS@)
  (define valueof-MS_MANDLOCK @VALUEOF_MS_MANDLOCK@)
  (define valueof-MS_NOATIME @VALUEOF_MS_NOATIME@)
  (define valueof-MS_NODIRATIME @VALUEOF_MS_NODIRATIME@)
  (define valueof-MNT_FORCE @VALUEOF_MNT_FORCE@)
  (define valueof-NSIG @VALUEOF_NSIG@)
  (define valueof-SIGFPE @VALUEOF_SIGFPE@)
  (define valueof-SIGILL @VALUEOF_SIGILL@)
  (define valueof-SIGSEGV @VALUEOF_SIGSEGV@)
  (define valueof-SIGBUS @VALUEOF_SIGBUS@)
  (define valueof-SIGABRT @VALUEOF_SIGABRT@)
  (define valueof-SIGIOT @VALUEOF_SIGIOT@)
  (define valueof-SIGTRAP @VALUEOF_SIGTRAP@)
  (define valueof-SIGEMT @VALUEOF_SIGEMT@)
  (define valueof-SIGSYS @VALUEOF_SIGSYS@)
  (define valueof-SIGTERM @VALUEOF_SIGTERM@)
  (define valueof-SIGINT @VALUEOF_SIGINT@)
  (define valueof-SIGQUIT @VALUEOF_SIGQUIT@)
  (define valueof-SIGKILL @VALUEOF_SIGKILL@)
  (define valueof-SIGHUP @VALUEOF_SIGHUP@)
  (define valueof-SIGALRM @VALUEOF_SIGALRM@)
  (define valueof-SIGVRALRM @VALUEOF_SIGVRALRM@)
  (define valueof-SIGPROF @VALUEOF_SIGPROF@)
  (define valueof-SIGIO @VALUEOF_SIGIO@)
  (define valueof-SIGURG @VALUEOF_SIGURG@)
  (define valueof-SIGPOLL @VALUEOF_SIGPOLL@)
  (define valueof-SIGCHLD @VALUEOF_SIGCHLD@)
  (define valueof-SIGCLD @VALUEOF_SIGCLD@)
  (define valueof-SIGCONT @VALUEOF_SIGCONT@)
  (define valueof-SIGSTOP @VALUEOF_SIGSTOP@)
  (define valueof-SIGTSTP @VALUEOF_SIGTSTP@)
  (define valueof-SIGTTIN @VALUEOF_SIGTTIN@)
  (define valueof-SIGTTOU @VALUEOF_SIGTTOU@)
  (define valueof-SIGPIPE @VALUEOF_SIGPIPE@)
  (define valueof-SIGLOST @VALUEOF_SIGLOST@)
  (define valueof-SIGXCPU @VALUEOF_SIGXCPU@)
  (define valueof-SIGXSFZ @VALUEOF_SIGXSFZ@)
  (define valueof-SIGUSR1 @VALUEOF_SIGUSR1@)
  (define valueof-SIGUSR2 @VALUEOF_SIGUSR2@)
  (define valueof-SIGWINCH @VALUEOF_SIGWINCH@)
  (define valueof-SIGINFO @VALUEOF_SIGINFO@)
  (define valueof-SOCK_STREAM @VALUEOF_SOCK_STREAM@)
  (define valueof-SOCK_DGRAM @VALUEOF_SOCK_DGRAM@)
  (define valueof-SOCK_RAW @VALUEOF_SOCK_RAW@)
  (define valueof-SOCK_RDM @VALUEOF_SOCK_RDM@)
  (define valueof-SOCK_SEQPACKET @VALUEOF_SOCK_SEQPACKET@)
  (define valueof-AF_LOCAL @VALUEOF_AF_LOCAL@)
  (define valueof-PF_LOCAL @VALUEOF_PF_LOCAL@)
  (define valueof-AF_UNIX @VALUEOF_AF_UNIX@)
  (define valueof-PF_UNIX @VALUEOF_PF_UNIX@)
  (define valueof-AF_FILE @VALUEOF_AF_FILE@)
  (define valueof-PF_FILE @VALUEOF_PF_FILE@)
  (define valueof-AF_INET @VALUEOF_AF_INET@)
  (define valueof-PF_INET @VALUEOF_PF_INET@)
  (define valueof-AF_INET6 @VALUEOF_AF_INET6@)
  (define valueof-PF_INET6 @VALUEOF_PF_INET6@)
  (define valueof-AF_UNSPEC @VALUEOF_AF_UNSPEC@)
  (define valueof-PF_UNSPEC @VALUEOF_PF_UNSPEC@)
  (define valueof-SHUT_RD @VALUEOF_SHUT_RD@)
  (define valueof-SHUT_WR @VALUEOF_SHUT_WR@)
  (define valueof-SHUT_RDWR @VALUEOF_SHUT_RDWR@)
  (define valueof-IPPORT_RESERVED @VALUEOF_IPPORT_RESERVED@)
  (define valueof-IPPORT_USERRESERVED
    @VALUEOF_IPPORT_USERRESERVED@)
  (define valueof-IFNAMSIZ @VALUEOF_IFNAMSIZ@)
  (define valueof-MSG_OOB @VALUEOF_MSG_OOB@)
  (define valueof-MSG_PEEK @VALUEOF_MSG_PEEK@)
  (define valueof-MSG_DONTROUTE @VALUEOF_MSG_DONTROUTE@)
  (define valueof-SOL_SOCKET @VALUEOF_SOL_SOCKET@)
  (define valueof-SO_DEBUG @VALUEOF_SO_DEBUG@)
  (define valueof-SO_REUSEADDR @VALUEOF_SO_REUSEADDR@)
  (define valueof-SO_KEEPALIVE @VALUEOF_SO_KEEPALIVE@)
  (define valueof-SO_DONTROUTE @VALUEOF_SO_DONTROUTE@)
  (define valueof-SO_LINGER @VALUEOF_SO_LINGER@)
  (define valueof-SO_BROADCAST @VALUEOF_SO_BROADCAST@)
  (define valueof-SO_OOBINLINE @VALUEOF_SO_OOBINLINE@)
  (define valueof-SO_SNDBUF @VALUEOF_SO_SNDBUF@)
  (define valueof-SO_RCVBUF @VALUEOF_SO_RCVBUF@)
  (define valueof-SO_TYPE @VALUEOF_SO_TYPE@)
  (define valueof-SO_STYLE @VALUEOF_SO_STYLE@)
  (define valueof-SO_ERROR @VALUEOF_SO_ERROR@)
  (define valueof-INADDR_LOOPBACK @VALUEOF_INADDR_LOOPBACK@)
  (define valueof-INADDR_ANY @VALUEOF_INADDR_ANY@)
  (define valueof-INADDR_BROADCAST
    @VALUEOF_INADDR_BROADCAST@)
  (define valueof-INADDR_NONE @VALUEOF_INADDR_NONE@)
  (define valueof-INET_ADDRSTRLEN @VALUEOF_INET_ADDRSTRLEN@)
  (define valueof-INET6_ADDRSTRLEN
    @VALUEOF_INET6_ADDRSTRLEN@)
  (define valueof-HOST_NOT_FOUND @VALUEOF_HOST_NOT_FOUND@)
  (define valueof-TRY_AGAIN @VALUEOF_TRY_AGAIN@)
  (define valueof-NO_RECOVERY @VALUEOF_NO_RECOVERY@)
  (define valueof-NO_ADDRESS @VALUEOF_NO_ADDRESS@)
  (define-label <pointer-to-flock>
    (custom-maker <pointer-to-flock>-maker)
    (virtual-fields (mutable l_pid) (mutable l_len)
      (mutable l_start) (mutable l_whence) (mutable l_type)))
  (define-inline
    (<pointer-to-flock>-l_pid-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FLOCK_L_PID@ ?pointer
      @OFFSETOF_FLOCK_L_PID@ ?value))
  (define-inline (<pointer-to-flock>-l_pid ?pointer)
    (pointer-c-ref @TYPEOF_FLOCK_L_PID@ ?pointer
      @OFFSETOF_FLOCK_L_PID@))
  (define-inline
    (<pointer-to-flock>-l_len-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FLOCK_L_LEN@ ?pointer
      @OFFSETOF_FLOCK_L_LEN@ ?value))
  (define-inline (<pointer-to-flock>-l_len ?pointer)
    (pointer-c-ref @TYPEOF_FLOCK_L_LEN@ ?pointer
      @OFFSETOF_FLOCK_L_LEN@))
  (define-inline
    (<pointer-to-flock>-l_start-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FLOCK_L_START@ ?pointer
      @OFFSETOF_FLOCK_L_START@ ?value))
  (define-inline (<pointer-to-flock>-l_start ?pointer)
    (pointer-c-ref @TYPEOF_FLOCK_L_START@ ?pointer
      @OFFSETOF_FLOCK_L_START@))
  (define-inline
    (<pointer-to-flock>-l_whence-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FLOCK_L_WHENCE@ ?pointer
      @OFFSETOF_FLOCK_L_WHENCE@ ?value))
  (define-inline (<pointer-to-flock>-l_whence ?pointer)
    (pointer-c-ref @TYPEOF_FLOCK_L_WHENCE@ ?pointer
      @OFFSETOF_FLOCK_L_WHENCE@))
  (define-inline
    (<pointer-to-flock>-l_type-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FLOCK_L_TYPE@ ?pointer
      @OFFSETOF_FLOCK_L_TYPE@ ?value))
  (define-inline (<pointer-to-flock>-l_type ?pointer)
    (pointer-c-ref @TYPEOF_FLOCK_L_TYPE@ ?pointer
      @OFFSETOF_FLOCK_L_TYPE@))
  (define-maker <pointer-to-flock>-maker
    %<pointer-to-flock>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-flock>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-flock)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (flock-pointer->flock-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (flock-wrapper->flock-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (flock-mirror->flock-pointer ?mirror ?malloc))))
  (define (flock-pointer->flock-pointer
            (src <pointer-to-flock>) malloc)
    (let (((dst <pointer-to-flock>)
           (malloc (c-sizeof struct-flock))))
      (mem.memcpy dst src (c-sizeof struct-flock))
      dst))
  (define (flock-wrapper->flock-pointer (src <struct-flock>)
            malloc)
    (let (((dst <pointer-to-flock>)
           (malloc (c-sizeof struct-flock))))
      (mem.memcpy dst src (c-sizeof struct-flock))
      dst))
  (define (flock-mirror->flock-pointer (src <flock>) malloc)
    (let (((dst <pointer-to-flock>)
           (malloc (c-sizeof struct-flock))))
      (set! dst.l_type src.l_type)
      (set! dst.l_whence src.l_whence)
      (set! dst.l_start src.l_start)
      (set! dst.l_len src.l_len)
      (set! dst.l_pid src.l_pid)
      dst))
  (define-class <struct-flock>
    (nongenerative nausicaa:posix:<struct-flock>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-flock>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-flock))))))
    (fields (immutable pointer))
    (virtual-fields (mutable l_pid) (mutable l_len)
      (mutable l_start) (mutable l_whence) (mutable l_type)))
  (define-inline (<struct-flock>-l_pid-set! ?wrapper ?value)
    (<pointer-to-flock>-l_pid-set!
      (<struct-flock>-pointer ?wrapper) ?value))
  (define-inline (<struct-flock>-l_pid ?wrapper)
    (<pointer-to-flock>-l_pid
      (<struct-flock>-pointer ?wrapper)))
  (define-inline (<struct-flock>-l_len-set! ?wrapper ?value)
    (<pointer-to-flock>-l_len-set!
      (<struct-flock>-pointer ?wrapper) ?value))
  (define-inline (<struct-flock>-l_len ?wrapper)
    (<pointer-to-flock>-l_len
      (<struct-flock>-pointer ?wrapper)))
  (define-inline
    (<struct-flock>-l_start-set! ?wrapper ?value)
    (<pointer-to-flock>-l_start-set!
      (<struct-flock>-pointer ?wrapper) ?value))
  (define-inline (<struct-flock>-l_start ?wrapper)
    (<pointer-to-flock>-l_start
      (<struct-flock>-pointer ?wrapper)))
  (define-inline
    (<struct-flock>-l_whence-set! ?wrapper ?value)
    (<pointer-to-flock>-l_whence-set!
      (<struct-flock>-pointer ?wrapper) ?value))
  (define-inline (<struct-flock>-l_whence ?wrapper)
    (<pointer-to-flock>-l_whence
      (<struct-flock>-pointer ?wrapper)))
  (define-inline
    (<struct-flock>-l_type-set! ?wrapper ?value)
    (<pointer-to-flock>-l_type-set!
      (<struct-flock>-pointer ?wrapper) ?value))
  (define-inline (<struct-flock>-l_type ?wrapper)
    (<pointer-to-flock>-l_type
      (<struct-flock>-pointer ?wrapper)))
  (define-syntax <struct-flock>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-flock))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (flock-pointer->flock-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (flock-wrapper->flock-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (flock-mirror->flock-wrapper ?constructor ?mirror
         ?malloc))))
  (define (flock-pointer->flock-wrapper constructor pointer
            malloc)
    (constructor
      (flock-pointer->flock-pointer pointer malloc)))
  (define (flock-wrapper->flock-wrapper constructor wrapper
            malloc)
    (constructor
      (flock-wrapper->flock-pointer wrapper malloc)))
  (define (flock-mirror->flock-wrapper constructor mirror
            malloc)
    (constructor (flock-mirror->flock-pointer mirror malloc)))
  (define-class <flock>
    (nongenerative nausicaa:posix:<flock>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <flock>-maker-transformer)
    (fields (mutable l_type) (mutable l_whence)
      (mutable l_start) (mutable l_len) (mutable l_pid)))
  (define-syntax <flock>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (flock-pointer->flock-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (flock-wrapper->flock-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (flock-mirror->flock-mirror ?constructor ?mirror))))
  (define (flock-pointer->flock-mirror constructor
            (src <pointer-to-flock>))
    (constructor src.l_type src.l_whence src.l_start
      src.l_len src.l_pid))
  (define (flock-wrapper->flock-mirror constructor
            (src <struct-flock>))
    (constructor src.l_type src.l_whence src.l_start
      src.l_len src.l_pid))
  (define (flock-mirror->flock-mirror constructor
            (src <flock>))
    (constructor src.l_type src.l_whence src.l_start
      src.l_len src.l_pid))
  (define-label <pointer-to-timeval>
    (custom-maker <pointer-to-timeval>-maker)
    (virtual-fields (mutable tv_usec) (mutable tv_sec)))
  (define-inline
    (<pointer-to-timeval>-tv_usec-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEVAL_TV_USEC@ ?pointer
      @OFFSETOF_TIMEVAL_TV_USEC@ ?value))
  (define-inline (<pointer-to-timeval>-tv_usec ?pointer)
    (pointer-c-ref @TYPEOF_TIMEVAL_TV_USEC@ ?pointer
      @OFFSETOF_TIMEVAL_TV_USEC@))
  (define-inline
    (<pointer-to-timeval>-tv_sec-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEVAL_TV_SEC@ ?pointer
      @OFFSETOF_TIMEVAL_TV_SEC@ ?value))
  (define-inline (<pointer-to-timeval>-tv_sec ?pointer)
    (pointer-c-ref @TYPEOF_TIMEVAL_TV_SEC@ ?pointer
      @OFFSETOF_TIMEVAL_TV_SEC@))
  (define-maker <pointer-to-timeval>-maker
    %<pointer-to-timeval>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-timeval>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-timeval)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (timeval-pointer->timeval-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (timeval-wrapper->timeval-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (timeval-mirror->timeval-pointer ?mirror ?malloc))))
  (define (timeval-pointer->timeval-pointer
            (src <pointer-to-timeval>) malloc)
    (let (((dst <pointer-to-timeval>)
           (malloc (c-sizeof struct-timeval))))
      (mem.memcpy dst src (c-sizeof struct-timeval))
      dst))
  (define (timeval-wrapper->timeval-pointer
            (src <struct-timeval>) malloc)
    (let (((dst <pointer-to-timeval>)
           (malloc (c-sizeof struct-timeval))))
      (mem.memcpy dst src (c-sizeof struct-timeval))
      dst))
  (define (timeval-mirror->timeval-pointer (src <timeval>)
            malloc)
    (let (((dst <pointer-to-timeval>)
           (malloc (c-sizeof struct-timeval))))
      (set! dst.tv_sec src.tv_sec)
      (set! dst.tv_usec src.tv_usec)
      dst))
  (define-class <struct-timeval>
    (nongenerative nausicaa:posix:<struct-timeval>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-timeval>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-timeval))))))
    (fields (immutable pointer))
    (virtual-fields (mutable tv_usec) (mutable tv_sec)))
  (define-inline
    (<struct-timeval>-tv_usec-set! ?wrapper ?value)
    (<pointer-to-timeval>-tv_usec-set!
      (<struct-timeval>-pointer ?wrapper) ?value))
  (define-inline (<struct-timeval>-tv_usec ?wrapper)
    (<pointer-to-timeval>-tv_usec
      (<struct-timeval>-pointer ?wrapper)))
  (define-inline
    (<struct-timeval>-tv_sec-set! ?wrapper ?value)
    (<pointer-to-timeval>-tv_sec-set!
      (<struct-timeval>-pointer ?wrapper) ?value))
  (define-inline (<struct-timeval>-tv_sec ?wrapper)
    (<pointer-to-timeval>-tv_sec
      (<struct-timeval>-pointer ?wrapper)))
  (define-syntax <struct-timeval>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-timeval))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (timeval-pointer->timeval-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (timeval-wrapper->timeval-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (timeval-mirror->timeval-wrapper ?constructor ?mirror
         ?malloc))))
  (define (timeval-pointer->timeval-wrapper constructor
            pointer malloc)
    (constructor
      (timeval-pointer->timeval-pointer pointer malloc)))
  (define (timeval-wrapper->timeval-wrapper constructor
            wrapper malloc)
    (constructor
      (timeval-wrapper->timeval-pointer wrapper malloc)))
  (define (timeval-mirror->timeval-wrapper constructor
            mirror malloc)
    (constructor
      (timeval-mirror->timeval-pointer mirror malloc)))
  (define-class <timeval>
    (nongenerative nausicaa:posix:<timeval>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <timeval>-maker-transformer)
    (fields (mutable tv_sec) (mutable tv_usec)))
  (define-syntax <timeval>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (timeval-pointer->timeval-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (timeval-wrapper->timeval-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (timeval-mirror->timeval-mirror ?constructor ?mirror))))
  (define (timeval-pointer->timeval-mirror constructor
            (src <pointer-to-timeval>))
    (constructor src.tv_sec src.tv_usec))
  (define (timeval-wrapper->timeval-mirror constructor
            (src <struct-timeval>))
    (constructor src.tv_sec src.tv_usec))
  (define (timeval-mirror->timeval-mirror constructor
            (src <timeval>))
    (constructor src.tv_sec src.tv_usec))
  (define-label <pointer-to-timespec>
    (custom-maker <pointer-to-timespec>-maker)
    (virtual-fields (mutable tv_nsec) (mutable tv_sec)))
  (define-inline
    (<pointer-to-timespec>-tv_nsec-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMESPEC_TV_NSEC@ ?pointer
      @OFFSETOF_TIMESPEC_TV_NSEC@ ?value))
  (define-inline (<pointer-to-timespec>-tv_nsec ?pointer)
    (pointer-c-ref @TYPEOF_TIMESPEC_TV_NSEC@ ?pointer
      @OFFSETOF_TIMESPEC_TV_NSEC@))
  (define-inline
    (<pointer-to-timespec>-tv_sec-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMESPEC_TV_SEC@ ?pointer
      @OFFSETOF_TIMESPEC_TV_SEC@ ?value))
  (define-inline (<pointer-to-timespec>-tv_sec ?pointer)
    (pointer-c-ref @TYPEOF_TIMESPEC_TV_SEC@ ?pointer
      @OFFSETOF_TIMESPEC_TV_SEC@))
  (define-maker <pointer-to-timespec>-maker
    %<pointer-to-timespec>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-timespec>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-timespec)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (timespec-pointer->timespec-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (timespec-wrapper->timespec-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (timespec-mirror->timespec-pointer ?mirror ?malloc))))
  (define (timespec-pointer->timespec-pointer
            (src <pointer-to-timespec>) malloc)
    (let (((dst <pointer-to-timespec>)
           (malloc (c-sizeof struct-timespec))))
      (mem.memcpy dst src (c-sizeof struct-timespec))
      dst))
  (define (timespec-wrapper->timespec-pointer
            (src <struct-timespec>) malloc)
    (let (((dst <pointer-to-timespec>)
           (malloc (c-sizeof struct-timespec))))
      (mem.memcpy dst src (c-sizeof struct-timespec))
      dst))
  (define (timespec-mirror->timespec-pointer
            (src <timespec>) malloc)
    (let (((dst <pointer-to-timespec>)
           (malloc (c-sizeof struct-timespec))))
      (set! dst.tv_sec src.tv_sec)
      (set! dst.tv_nsec src.tv_nsec)
      dst))
  (define-class <struct-timespec>
    (nongenerative nausicaa:posix:<struct-timespec>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-timespec>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-timespec))))))
    (fields (immutable pointer))
    (virtual-fields (mutable tv_nsec) (mutable tv_sec)))
  (define-inline
    (<struct-timespec>-tv_nsec-set! ?wrapper ?value)
    (<pointer-to-timespec>-tv_nsec-set!
      (<struct-timespec>-pointer ?wrapper) ?value))
  (define-inline (<struct-timespec>-tv_nsec ?wrapper)
    (<pointer-to-timespec>-tv_nsec
      (<struct-timespec>-pointer ?wrapper)))
  (define-inline
    (<struct-timespec>-tv_sec-set! ?wrapper ?value)
    (<pointer-to-timespec>-tv_sec-set!
      (<struct-timespec>-pointer ?wrapper) ?value))
  (define-inline (<struct-timespec>-tv_sec ?wrapper)
    (<pointer-to-timespec>-tv_sec
      (<struct-timespec>-pointer ?wrapper)))
  (define-syntax <struct-timespec>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-timespec))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (timespec-pointer->timespec-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (timespec-wrapper->timespec-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (timespec-mirror->timespec-wrapper ?constructor
         ?mirror ?malloc))))
  (define (timespec-pointer->timespec-wrapper constructor
            pointer malloc)
    (constructor
      (timespec-pointer->timespec-pointer pointer malloc)))
  (define (timespec-wrapper->timespec-wrapper constructor
            wrapper malloc)
    (constructor
      (timespec-wrapper->timespec-pointer wrapper malloc)))
  (define (timespec-mirror->timespec-wrapper constructor
            mirror malloc)
    (constructor
      (timespec-mirror->timespec-pointer mirror malloc)))
  (define-class <timespec>
    (nongenerative nausicaa:posix:<timespec>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <timespec>-maker-transformer)
    (fields (mutable tv_sec) (mutable tv_nsec)))
  (define-syntax <timespec>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (timespec-pointer->timespec-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (timespec-wrapper->timespec-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (timespec-mirror->timespec-mirror ?constructor
         ?mirror))))
  (define (timespec-pointer->timespec-mirror constructor
            (src <pointer-to-timespec>))
    (constructor src.tv_sec src.tv_nsec))
  (define (timespec-wrapper->timespec-mirror constructor
            (src <struct-timespec>))
    (constructor src.tv_sec src.tv_nsec))
  (define (timespec-mirror->timespec-mirror constructor
            (src <timespec>))
    (constructor src.tv_sec src.tv_nsec))
  (define-label <pointer-to-dirent>
    (custom-maker <pointer-to-dirent>-maker)
    (virtual-fields (mutable d_name) (mutable d_type)
      (mutable d_reclen) (mutable d_off) (mutable d_ino)))
  (define-inline
    (<pointer-to-dirent>-d_name-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_DIRENT_D_NAME@ ?value))
  (define-inline (<pointer-to-dirent>-d_name ?pointer)
    (null-accessor ?pointer @OFFSETOF_DIRENT_D_NAME@))
  (define-inline
    (<pointer-to-dirent>-d_type-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_DIRENT_D_TYPE@ ?pointer
      @OFFSETOF_DIRENT_D_TYPE@ ?value))
  (define-inline (<pointer-to-dirent>-d_type ?pointer)
    (pointer-c-ref @TYPEOF_DIRENT_D_TYPE@ ?pointer
      @OFFSETOF_DIRENT_D_TYPE@))
  (define-inline
    (<pointer-to-dirent>-d_reclen-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_DIRENT_D_RECLEN@ ?pointer
      @OFFSETOF_DIRENT_D_RECLEN@ ?value))
  (define-inline (<pointer-to-dirent>-d_reclen ?pointer)
    (pointer-c-ref @TYPEOF_DIRENT_D_RECLEN@ ?pointer
      @OFFSETOF_DIRENT_D_RECLEN@))
  (define-inline
    (<pointer-to-dirent>-d_off-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_DIRENT_D_OFF@ ?pointer
      @OFFSETOF_DIRENT_D_OFF@ ?value))
  (define-inline (<pointer-to-dirent>-d_off ?pointer)
    (pointer-c-ref @TYPEOF_DIRENT_D_OFF@ ?pointer
      @OFFSETOF_DIRENT_D_OFF@))
  (define-inline
    (<pointer-to-dirent>-d_ino-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_DIRENT_D_INO@ ?pointer
      @OFFSETOF_DIRENT_D_INO@ ?value))
  (define-inline (<pointer-to-dirent>-d_ino ?pointer)
    (pointer-c-ref @TYPEOF_DIRENT_D_INO@ ?pointer
      @OFFSETOF_DIRENT_D_INO@))
  (define-maker <pointer-to-dirent>-maker
    %<pointer-to-dirent>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-dirent>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-dirent)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (dirent-pointer->dirent-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (dirent-wrapper->dirent-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (dirent-mirror->dirent-pointer ?mirror ?malloc))))
  (define (dirent-pointer->dirent-pointer
            (src <pointer-to-dirent>) malloc)
    (let (((dst <pointer-to-dirent>)
           (malloc (c-sizeof struct-dirent))))
      (mem.memcpy dst src (c-sizeof struct-dirent))
      dst))
  (define (dirent-wrapper->dirent-pointer
            (src <struct-dirent>) malloc)
    (let (((dst <pointer-to-dirent>)
           (malloc (c-sizeof struct-dirent))))
      (mem.memcpy dst src (c-sizeof struct-dirent))
      dst))
  (define (dirent-mirror->dirent-pointer (src <dirent>)
            malloc)
    (let (((dst <pointer-to-dirent>)
           (malloc (c-sizeof struct-dirent))))
      (set! dst.d_ino src.d_ino)
      (set! dst.d_off src.d_off)
      (set! dst.d_reclen src.d_reclen)
      (set! dst.d_type src.d_type)
      (set! dst.d_name src.d_name)
      dst))
  (define-class <struct-dirent>
    (nongenerative nausicaa:posix:<struct-dirent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-dirent>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-dirent))))))
    (fields (immutable pointer))
    (virtual-fields (immutable d_name) (mutable d_type)
      (mutable d_reclen) (mutable d_off) (mutable d_ino)))
  (define-inline (<struct-dirent>-d_name ?wrapper)
    (<pointer-to-dirent>-d_name
      (<struct-dirent>-pointer ?wrapper)))
  (define-inline
    (<struct-dirent>-d_type-set! ?wrapper ?value)
    (<pointer-to-dirent>-d_type-set!
      (<struct-dirent>-pointer ?wrapper) ?value))
  (define-inline (<struct-dirent>-d_type ?wrapper)
    (<pointer-to-dirent>-d_type
      (<struct-dirent>-pointer ?wrapper)))
  (define-inline
    (<struct-dirent>-d_reclen-set! ?wrapper ?value)
    (<pointer-to-dirent>-d_reclen-set!
      (<struct-dirent>-pointer ?wrapper) ?value))
  (define-inline (<struct-dirent>-d_reclen ?wrapper)
    (<pointer-to-dirent>-d_reclen
      (<struct-dirent>-pointer ?wrapper)))
  (define-inline
    (<struct-dirent>-d_off-set! ?wrapper ?value)
    (<pointer-to-dirent>-d_off-set!
      (<struct-dirent>-pointer ?wrapper) ?value))
  (define-inline (<struct-dirent>-d_off ?wrapper)
    (<pointer-to-dirent>-d_off
      (<struct-dirent>-pointer ?wrapper)))
  (define-inline
    (<struct-dirent>-d_ino-set! ?wrapper ?value)
    (<pointer-to-dirent>-d_ino-set!
      (<struct-dirent>-pointer ?wrapper) ?value))
  (define-inline (<struct-dirent>-d_ino ?wrapper)
    (<pointer-to-dirent>-d_ino
      (<struct-dirent>-pointer ?wrapper)))
  (define-syntax <struct-dirent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-dirent))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (dirent-pointer->dirent-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (dirent-wrapper->dirent-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (dirent-mirror->dirent-wrapper ?constructor ?mirror
         ?malloc))))
  (define (dirent-pointer->dirent-wrapper constructor
            pointer malloc)
    (constructor
      (dirent-pointer->dirent-pointer pointer malloc)))
  (define (dirent-wrapper->dirent-wrapper constructor
            wrapper malloc)
    (constructor
      (dirent-wrapper->dirent-pointer wrapper malloc)))
  (define (dirent-mirror->dirent-wrapper constructor mirror
            malloc)
    (constructor
      (dirent-mirror->dirent-pointer mirror malloc)))
  (define-class <dirent>
    (nongenerative nausicaa:posix:<dirent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <dirent>-maker-transformer)
    (fields (mutable d_ino) (mutable d_off)
      (mutable d_reclen) (mutable d_type) (mutable d_name)))
  (define-syntax <dirent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (dirent-pointer->dirent-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (dirent-wrapper->dirent-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (dirent-mirror->dirent-mirror ?constructor ?mirror))))
  (define (dirent-pointer->dirent-mirror constructor
            (src <pointer-to-dirent>))
    (constructor src.d_ino src.d_off src.d_reclen src.d_type
      src.d_name))
  (define (dirent-wrapper->dirent-mirror constructor
            (src <struct-dirent>))
    (constructor src.d_ino src.d_off src.d_reclen src.d_type
      src.d_name))
  (define (dirent-mirror->dirent-mirror constructor
            (src <dirent>))
    (constructor src.d_ino src.d_off src.d_reclen src.d_type
      src.d_name))
  (define-label <pointer-to-utimbuf>
    (custom-maker <pointer-to-utimbuf>-maker)
    (virtual-fields (mutable modtime) (mutable actime)))
  (define-inline
    (<pointer-to-utimbuf>-modtime-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_UTIMBUF_MODTIME@ ?pointer
      @OFFSETOF_UTIMBUF_MODTIME@ ?value))
  (define-inline (<pointer-to-utimbuf>-modtime ?pointer)
    (pointer-c-ref @TYPEOF_UTIMBUF_MODTIME@ ?pointer
      @OFFSETOF_UTIMBUF_MODTIME@))
  (define-inline
    (<pointer-to-utimbuf>-actime-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_UTIMBUF_ACTIME@ ?pointer
      @OFFSETOF_UTIMBUF_ACTIME@ ?value))
  (define-inline (<pointer-to-utimbuf>-actime ?pointer)
    (pointer-c-ref @TYPEOF_UTIMBUF_ACTIME@ ?pointer
      @OFFSETOF_UTIMBUF_ACTIME@))
  (define-maker <pointer-to-utimbuf>-maker
    %<pointer-to-utimbuf>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-utimbuf>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-utimbuf)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (utimbuf-pointer->utimbuf-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (utimbuf-wrapper->utimbuf-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (utimbuf-mirror->utimbuf-pointer ?mirror ?malloc))))
  (define (utimbuf-pointer->utimbuf-pointer
            (src <pointer-to-utimbuf>) malloc)
    (let (((dst <pointer-to-utimbuf>)
           (malloc (c-sizeof struct-utimbuf))))
      (mem.memcpy dst src (c-sizeof struct-utimbuf))
      dst))
  (define (utimbuf-wrapper->utimbuf-pointer
            (src <struct-utimbuf>) malloc)
    (let (((dst <pointer-to-utimbuf>)
           (malloc (c-sizeof struct-utimbuf))))
      (mem.memcpy dst src (c-sizeof struct-utimbuf))
      dst))
  (define (utimbuf-mirror->utimbuf-pointer (src <utimbuf>)
            malloc)
    (let (((dst <pointer-to-utimbuf>)
           (malloc (c-sizeof struct-utimbuf))))
      (set! dst.actime src.actime)
      (set! dst.modtime src.modtime)
      dst))
  (define-class <struct-utimbuf>
    (nongenerative nausicaa:posix:<struct-utimbuf>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-utimbuf>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-utimbuf))))))
    (fields (immutable pointer))
    (virtual-fields (mutable modtime) (mutable actime)))
  (define-inline
    (<struct-utimbuf>-modtime-set! ?wrapper ?value)
    (<pointer-to-utimbuf>-modtime-set!
      (<struct-utimbuf>-pointer ?wrapper) ?value))
  (define-inline (<struct-utimbuf>-modtime ?wrapper)
    (<pointer-to-utimbuf>-modtime
      (<struct-utimbuf>-pointer ?wrapper)))
  (define-inline
    (<struct-utimbuf>-actime-set! ?wrapper ?value)
    (<pointer-to-utimbuf>-actime-set!
      (<struct-utimbuf>-pointer ?wrapper) ?value))
  (define-inline (<struct-utimbuf>-actime ?wrapper)
    (<pointer-to-utimbuf>-actime
      (<struct-utimbuf>-pointer ?wrapper)))
  (define-syntax <struct-utimbuf>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-utimbuf))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (utimbuf-pointer->utimbuf-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (utimbuf-wrapper->utimbuf-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (utimbuf-mirror->utimbuf-wrapper ?constructor ?mirror
         ?malloc))))
  (define (utimbuf-pointer->utimbuf-wrapper constructor
            pointer malloc)
    (constructor
      (utimbuf-pointer->utimbuf-pointer pointer malloc)))
  (define (utimbuf-wrapper->utimbuf-wrapper constructor
            wrapper malloc)
    (constructor
      (utimbuf-wrapper->utimbuf-pointer wrapper malloc)))
  (define (utimbuf-mirror->utimbuf-wrapper constructor
            mirror malloc)
    (constructor
      (utimbuf-mirror->utimbuf-pointer mirror malloc)))
  (define-class <utimbuf>
    (nongenerative nausicaa:posix:<utimbuf>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <utimbuf>-maker-transformer)
    (fields (mutable actime) (mutable modtime)))
  (define-syntax <utimbuf>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (utimbuf-pointer->utimbuf-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (utimbuf-wrapper->utimbuf-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (utimbuf-mirror->utimbuf-mirror ?constructor ?mirror))))
  (define (utimbuf-pointer->utimbuf-mirror constructor
            (src <pointer-to-utimbuf>))
    (constructor src.actime src.modtime))
  (define (utimbuf-wrapper->utimbuf-mirror constructor
            (src <struct-utimbuf>))
    (constructor src.actime src.modtime))
  (define (utimbuf-mirror->utimbuf-mirror constructor
            (src <utimbuf>))
    (constructor src.actime src.modtime))
  (define-label <pointer-to-timezone>
    (custom-maker <pointer-to-timezone>-maker)
    (virtual-fields (mutable tz_dsttime)
      (mutable tz_minuteswest)))
  (define-inline
    (<pointer-to-timezone>-tz_dsttime-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEZONE_TZ_DSTTIME@ ?pointer
      @OFFSETOF_TIMEZONE_TZ_DSTTIME@ ?value))
  (define-inline (<pointer-to-timezone>-tz_dsttime ?pointer)
    (pointer-c-ref @TYPEOF_TIMEZONE_TZ_DSTTIME@ ?pointer
      @OFFSETOF_TIMEZONE_TZ_DSTTIME@))
  (define-inline
    (<pointer-to-timezone>-tz_minuteswest-set! ?pointer
      ?value)
    (pointer-c-set! @TYPEOF_TIMEZONE_TZ_MINUTESWEST@
      ?pointer @OFFSETOF_TIMEZONE_TZ_MINUTESWEST@ ?value))
  (define-inline
    (<pointer-to-timezone>-tz_minuteswest ?pointer)
    (pointer-c-ref @TYPEOF_TIMEZONE_TZ_MINUTESWEST@ ?pointer
      @OFFSETOF_TIMEZONE_TZ_MINUTESWEST@))
  (define-maker <pointer-to-timezone>-maker
    %<pointer-to-timezone>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-timezone>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-timezone)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (timezone-pointer->timezone-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (timezone-wrapper->timezone-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (timezone-mirror->timezone-pointer ?mirror ?malloc))))
  (define (timezone-pointer->timezone-pointer
            (src <pointer-to-timezone>) malloc)
    (let (((dst <pointer-to-timezone>)
           (malloc (c-sizeof struct-timezone))))
      (mem.memcpy dst src (c-sizeof struct-timezone))
      dst))
  (define (timezone-wrapper->timezone-pointer
            (src <struct-timezone>) malloc)
    (let (((dst <pointer-to-timezone>)
           (malloc (c-sizeof struct-timezone))))
      (mem.memcpy dst src (c-sizeof struct-timezone))
      dst))
  (define (timezone-mirror->timezone-pointer
            (src <timezone>) malloc)
    (let (((dst <pointer-to-timezone>)
           (malloc (c-sizeof struct-timezone))))
      (set! dst.tz_minuteswest src.tz_minuteswest)
      (set! dst.tz_dsttime src.tz_dsttime)
      dst))
  (define-class <struct-timezone>
    (nongenerative nausicaa:posix:<struct-timezone>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-timezone>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-timezone))))))
    (fields (immutable pointer))
    (virtual-fields (mutable tz_dsttime)
      (mutable tz_minuteswest)))
  (define-inline
    (<struct-timezone>-tz_dsttime-set! ?wrapper ?value)
    (<pointer-to-timezone>-tz_dsttime-set!
      (<struct-timezone>-pointer ?wrapper) ?value))
  (define-inline (<struct-timezone>-tz_dsttime ?wrapper)
    (<pointer-to-timezone>-tz_dsttime
      (<struct-timezone>-pointer ?wrapper)))
  (define-inline
    (<struct-timezone>-tz_minuteswest-set! ?wrapper ?value)
    (<pointer-to-timezone>-tz_minuteswest-set!
      (<struct-timezone>-pointer ?wrapper) ?value))
  (define-inline (<struct-timezone>-tz_minuteswest ?wrapper)
    (<pointer-to-timezone>-tz_minuteswest
      (<struct-timezone>-pointer ?wrapper)))
  (define-syntax <struct-timezone>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-timezone))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (timezone-pointer->timezone-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (timezone-wrapper->timezone-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (timezone-mirror->timezone-wrapper ?constructor
         ?mirror ?malloc))))
  (define (timezone-pointer->timezone-wrapper constructor
            pointer malloc)
    (constructor
      (timezone-pointer->timezone-pointer pointer malloc)))
  (define (timezone-wrapper->timezone-wrapper constructor
            wrapper malloc)
    (constructor
      (timezone-wrapper->timezone-pointer wrapper malloc)))
  (define (timezone-mirror->timezone-wrapper constructor
            mirror malloc)
    (constructor
      (timezone-mirror->timezone-pointer mirror malloc)))
  (define-class <timezone>
    (nongenerative nausicaa:posix:<timezone>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <timezone>-maker-transformer)
    (fields (mutable tz_minuteswest) (mutable tz_dsttime)))
  (define-syntax <timezone>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (timezone-pointer->timezone-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (timezone-wrapper->timezone-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (timezone-mirror->timezone-mirror ?constructor
         ?mirror))))
  (define (timezone-pointer->timezone-mirror constructor
            (src <pointer-to-timezone>))
    (constructor src.tz_minuteswest src.tz_dsttime))
  (define (timezone-wrapper->timezone-mirror constructor
            (src <struct-timezone>))
    (constructor src.tz_minuteswest src.tz_dsttime))
  (define (timezone-mirror->timezone-mirror constructor
            (src <timezone>))
    (constructor src.tz_minuteswest src.tz_dsttime))
  (define-label <pointer-to-tm>
    (custom-maker <pointer-to-tm>-maker)
    (virtual-fields (mutable tm_zone) (mutable tm_gmtoff)
      (mutable tm_isdst) (mutable tm_yday) (mutable tm_wday)
      (mutable tm_year) (mutable tm_mon) (mutable tm_mday)
      (mutable tm_hour) (mutable tm_min) (mutable tm_sec)))
  (define-inline
    (<pointer-to-tm>-tm_zone-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_ZONE@ ?pointer
      @OFFSETOF_TM_TM_ZONE@ ?value))
  (define-inline (<pointer-to-tm>-tm_zone ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_ZONE@ ?pointer
      @OFFSETOF_TM_TM_ZONE@))
  (define-inline
    (<pointer-to-tm>-tm_gmtoff-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_GMTOFF@ ?pointer
      @OFFSETOF_TM_TM_GMTOFF@ ?value))
  (define-inline (<pointer-to-tm>-tm_gmtoff ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_GMTOFF@ ?pointer
      @OFFSETOF_TM_TM_GMTOFF@))
  (define-inline
    (<pointer-to-tm>-tm_isdst-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_ISDST@ ?pointer
      @OFFSETOF_TM_TM_ISDST@ ?value))
  (define-inline (<pointer-to-tm>-tm_isdst ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_ISDST@ ?pointer
      @OFFSETOF_TM_TM_ISDST@))
  (define-inline
    (<pointer-to-tm>-tm_yday-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_YDAY@ ?pointer
      @OFFSETOF_TM_TM_YDAY@ ?value))
  (define-inline (<pointer-to-tm>-tm_yday ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_YDAY@ ?pointer
      @OFFSETOF_TM_TM_YDAY@))
  (define-inline
    (<pointer-to-tm>-tm_wday-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_WDAY@ ?pointer
      @OFFSETOF_TM_TM_WDAY@ ?value))
  (define-inline (<pointer-to-tm>-tm_wday ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_WDAY@ ?pointer
      @OFFSETOF_TM_TM_WDAY@))
  (define-inline
    (<pointer-to-tm>-tm_year-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_YEAR@ ?pointer
      @OFFSETOF_TM_TM_YEAR@ ?value))
  (define-inline (<pointer-to-tm>-tm_year ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_YEAR@ ?pointer
      @OFFSETOF_TM_TM_YEAR@))
  (define-inline
    (<pointer-to-tm>-tm_mon-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_MON@ ?pointer
      @OFFSETOF_TM_TM_MON@ ?value))
  (define-inline (<pointer-to-tm>-tm_mon ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_MON@ ?pointer
      @OFFSETOF_TM_TM_MON@))
  (define-inline
    (<pointer-to-tm>-tm_mday-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_MDAY@ ?pointer
      @OFFSETOF_TM_TM_MDAY@ ?value))
  (define-inline (<pointer-to-tm>-tm_mday ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_MDAY@ ?pointer
      @OFFSETOF_TM_TM_MDAY@))
  (define-inline
    (<pointer-to-tm>-tm_hour-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_HOUR@ ?pointer
      @OFFSETOF_TM_TM_HOUR@ ?value))
  (define-inline (<pointer-to-tm>-tm_hour ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_HOUR@ ?pointer
      @OFFSETOF_TM_TM_HOUR@))
  (define-inline
    (<pointer-to-tm>-tm_min-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_MIN@ ?pointer
      @OFFSETOF_TM_TM_MIN@ ?value))
  (define-inline (<pointer-to-tm>-tm_min ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_MIN@ ?pointer
      @OFFSETOF_TM_TM_MIN@))
  (define-inline
    (<pointer-to-tm>-tm_sec-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TM_TM_SEC@ ?pointer
      @OFFSETOF_TM_TM_SEC@ ?value))
  (define-inline (<pointer-to-tm>-tm_sec ?pointer)
    (pointer-c-ref @TYPEOF_TM_TM_SEC@ ?pointer
      @OFFSETOF_TM_TM_SEC@))
  (define-maker <pointer-to-tm>-maker %<pointer-to-tm>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-tm>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-tm)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (tm-pointer->tm-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (tm-wrapper->tm-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (tm-mirror->tm-pointer ?mirror ?malloc))))
  (define (tm-pointer->tm-pointer (src <pointer-to-tm>)
            malloc)
    (let (((dst <pointer-to-tm>)
           (malloc (c-sizeof struct-tm))))
      (mem.memcpy dst src (c-sizeof struct-tm))
      dst))
  (define (tm-wrapper->tm-pointer (src <struct-tm>) malloc)
    (let (((dst <pointer-to-tm>)
           (malloc (c-sizeof struct-tm))))
      (mem.memcpy dst src (c-sizeof struct-tm))
      dst))
  (define (tm-mirror->tm-pointer (src <tm>) malloc)
    (let (((dst <pointer-to-tm>)
           (malloc (c-sizeof struct-tm))))
      (set! dst.tm_sec src.tm_sec)
      (set! dst.tm_min src.tm_min)
      (set! dst.tm_hour src.tm_hour)
      (set! dst.tm_mday src.tm_mday)
      (set! dst.tm_mon src.tm_mon)
      (set! dst.tm_year src.tm_year)
      (set! dst.tm_wday src.tm_wday)
      (set! dst.tm_yday src.tm_yday)
      (set! dst.tm_isdst src.tm_isdst)
      (set! dst.tm_gmtoff src.tm_gmtoff)
      (set! dst.tm_zone src.tm_zone)
      dst))
  (define-class <struct-tm>
    (nongenerative nausicaa:posix:<struct-tm>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-tm>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-tm))))))
    (fields (immutable pointer))
    (virtual-fields (mutable tm_zone) (mutable tm_gmtoff)
      (mutable tm_isdst) (mutable tm_yday) (mutable tm_wday)
      (mutable tm_year) (mutable tm_mon) (mutable tm_mday)
      (mutable tm_hour) (mutable tm_min) (mutable tm_sec)))
  (define-inline (<struct-tm>-tm_zone-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_zone-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_zone ?wrapper)
    (<pointer-to-tm>-tm_zone (<struct-tm>-pointer ?wrapper)))
  (define-inline
    (<struct-tm>-tm_gmtoff-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_gmtoff-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_gmtoff ?wrapper)
    (<pointer-to-tm>-tm_gmtoff
      (<struct-tm>-pointer ?wrapper)))
  (define-inline (<struct-tm>-tm_isdst-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_isdst-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_isdst ?wrapper)
    (<pointer-to-tm>-tm_isdst (<struct-tm>-pointer ?wrapper)))
  (define-inline (<struct-tm>-tm_yday-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_yday-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_yday ?wrapper)
    (<pointer-to-tm>-tm_yday (<struct-tm>-pointer ?wrapper)))
  (define-inline (<struct-tm>-tm_wday-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_wday-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_wday ?wrapper)
    (<pointer-to-tm>-tm_wday (<struct-tm>-pointer ?wrapper)))
  (define-inline (<struct-tm>-tm_year-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_year-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_year ?wrapper)
    (<pointer-to-tm>-tm_year (<struct-tm>-pointer ?wrapper)))
  (define-inline (<struct-tm>-tm_mon-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_mon-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_mon ?wrapper)
    (<pointer-to-tm>-tm_mon (<struct-tm>-pointer ?wrapper)))
  (define-inline (<struct-tm>-tm_mday-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_mday-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_mday ?wrapper)
    (<pointer-to-tm>-tm_mday (<struct-tm>-pointer ?wrapper)))
  (define-inline (<struct-tm>-tm_hour-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_hour-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_hour ?wrapper)
    (<pointer-to-tm>-tm_hour (<struct-tm>-pointer ?wrapper)))
  (define-inline (<struct-tm>-tm_min-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_min-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_min ?wrapper)
    (<pointer-to-tm>-tm_min (<struct-tm>-pointer ?wrapper)))
  (define-inline (<struct-tm>-tm_sec-set! ?wrapper ?value)
    (<pointer-to-tm>-tm_sec-set!
      (<struct-tm>-pointer ?wrapper) ?value))
  (define-inline (<struct-tm>-tm_sec ?wrapper)
    (<pointer-to-tm>-tm_sec (<struct-tm>-pointer ?wrapper)))
  (define-syntax <struct-tm>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-tm))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (tm-pointer->tm-wrapper ?constructor ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (tm-wrapper->tm-wrapper ?constructor ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (tm-mirror->tm-wrapper ?constructor ?mirror ?malloc))))
  (define (tm-pointer->tm-wrapper constructor pointer malloc)
    (constructor (tm-pointer->tm-pointer pointer malloc)))
  (define (tm-wrapper->tm-wrapper constructor wrapper malloc)
    (constructor (tm-wrapper->tm-pointer wrapper malloc)))
  (define (tm-mirror->tm-wrapper constructor mirror malloc)
    (constructor (tm-mirror->tm-pointer mirror malloc)))
  (define-class <tm> (nongenerative nausicaa:posix:<tm>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <tm>-maker-transformer)
    (fields (mutable tm_sec) (mutable tm_min)
      (mutable tm_hour) (mutable tm_mday) (mutable tm_mon)
      (mutable tm_year) (mutable tm_wday) (mutable tm_yday)
      (mutable tm_isdst) (mutable tm_gmtoff)
      (mutable tm_zone)))
  (define-syntax <tm>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (tm-pointer->tm-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (tm-wrapper->tm-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (tm-mirror->tm-mirror ?constructor ?mirror))))
  (define (tm-pointer->tm-mirror constructor
            (src <pointer-to-tm>))
    (constructor src.tm_sec src.tm_min src.tm_hour
      src.tm_mday src.tm_mon src.tm_year src.tm_wday
      src.tm_yday src.tm_isdst src.tm_gmtoff src.tm_zone))
  (define (tm-wrapper->tm-mirror constructor
            (src <struct-tm>))
    (constructor src.tm_sec src.tm_min src.tm_hour
      src.tm_mday src.tm_mon src.tm_year src.tm_wday
      src.tm_yday src.tm_isdst src.tm_gmtoff src.tm_zone))
  (define (tm-mirror->tm-mirror constructor (src <tm>))
    (constructor src.tm_sec src.tm_min src.tm_hour
      src.tm_mday src.tm_mon src.tm_year src.tm_wday
      src.tm_yday src.tm_isdst src.tm_gmtoff src.tm_zone))
  (define-label <pointer-to-ntptimeval>
    (custom-maker <pointer-to-ntptimeval>-maker)
    (virtual-fields (mutable esterror) (mutable maxerror)
      (mutable time)))
  (define-inline
    (<pointer-to-ntptimeval>-esterror-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_NTPTIMEVAL_ESTERROR@ ?pointer
      @OFFSETOF_NTPTIMEVAL_ESTERROR@ ?value))
  (define-inline (<pointer-to-ntptimeval>-esterror ?pointer)
    (pointer-c-ref @TYPEOF_NTPTIMEVAL_ESTERROR@ ?pointer
      @OFFSETOF_NTPTIMEVAL_ESTERROR@))
  (define-inline
    (<pointer-to-ntptimeval>-maxerror-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_NTPTIMEVAL_MAXERROR@ ?pointer
      @OFFSETOF_NTPTIMEVAL_MAXERROR@ ?value))
  (define-inline (<pointer-to-ntptimeval>-maxerror ?pointer)
    (pointer-c-ref @TYPEOF_NTPTIMEVAL_MAXERROR@ ?pointer
      @OFFSETOF_NTPTIMEVAL_MAXERROR@))
  (define-inline
    (<pointer-to-ntptimeval>-time-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_NTPTIMEVAL_TIME@ ?value))
  (define-inline (<pointer-to-ntptimeval>-time ?pointer)
    (null-accessor ?pointer @OFFSETOF_NTPTIMEVAL_TIME@))
  (define-maker <pointer-to-ntptimeval>-maker
    %<pointer-to-ntptimeval>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-ntptimeval>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-ntptimeval)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (ntptimeval-pointer->ntptimeval-pointer ?pointer
         ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (ntptimeval-wrapper->ntptimeval-pointer ?wrapper
         ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (ntptimeval-mirror->ntptimeval-pointer ?mirror
         ?malloc))))
  (define (ntptimeval-pointer->ntptimeval-pointer
            (src <pointer-to-ntptimeval>) malloc)
    (let (((dst <pointer-to-ntptimeval>)
           (malloc (c-sizeof struct-ntptimeval))))
      (mem.memcpy dst src (c-sizeof struct-ntptimeval))
      dst))
  (define (ntptimeval-wrapper->ntptimeval-pointer
            (src <struct-ntptimeval>) malloc)
    (let (((dst <pointer-to-ntptimeval>)
           (malloc (c-sizeof struct-ntptimeval))))
      (mem.memcpy dst src (c-sizeof struct-ntptimeval))
      dst))
  (define (ntptimeval-mirror->ntptimeval-pointer
            (src <ntptimeval>) malloc)
    (let (((dst <pointer-to-ntptimeval>)
           (malloc (c-sizeof struct-ntptimeval))))
      (set! dst.time src.time)
      (set! dst.maxerror src.maxerror)
      (set! dst.esterror src.esterror)
      dst))
  (define-class <struct-ntptimeval>
    (nongenerative nausicaa:posix:<struct-ntptimeval>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-ntptimeval>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-ntptimeval))))))
    (fields (immutable pointer))
    (virtual-fields (mutable esterror) (mutable maxerror)
      (immutable time)))
  (define-inline
    (<struct-ntptimeval>-esterror-set! ?wrapper ?value)
    (<pointer-to-ntptimeval>-esterror-set!
      (<struct-ntptimeval>-pointer ?wrapper) ?value))
  (define-inline (<struct-ntptimeval>-esterror ?wrapper)
    (<pointer-to-ntptimeval>-esterror
      (<struct-ntptimeval>-pointer ?wrapper)))
  (define-inline
    (<struct-ntptimeval>-maxerror-set! ?wrapper ?value)
    (<pointer-to-ntptimeval>-maxerror-set!
      (<struct-ntptimeval>-pointer ?wrapper) ?value))
  (define-inline (<struct-ntptimeval>-maxerror ?wrapper)
    (<pointer-to-ntptimeval>-maxerror
      (<struct-ntptimeval>-pointer ?wrapper)))
  (define-inline (<struct-ntptimeval>-time ?wrapper)
    (<pointer-to-ntptimeval>-time
      (<struct-ntptimeval>-pointer ?wrapper)))
  (define-syntax <struct-ntptimeval>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-ntptimeval))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (ntptimeval-pointer->ntptimeval-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (ntptimeval-wrapper->ntptimeval-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (ntptimeval-mirror->ntptimeval-wrapper ?constructor
         ?mirror ?malloc))))
  (define (ntptimeval-pointer->ntptimeval-wrapper
            constructor pointer malloc)
    (constructor
      (ntptimeval-pointer->ntptimeval-pointer pointer malloc)))
  (define (ntptimeval-wrapper->ntptimeval-wrapper
            constructor wrapper malloc)
    (constructor
      (ntptimeval-wrapper->ntptimeval-pointer wrapper malloc)))
  (define (ntptimeval-mirror->ntptimeval-wrapper constructor
            mirror malloc)
    (constructor
      (ntptimeval-mirror->ntptimeval-pointer mirror malloc)))
  (define-class <ntptimeval>
    (nongenerative nausicaa:posix:<ntptimeval>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <ntptimeval>-maker-transformer)
    (fields (mutable time) (mutable maxerror)
      (mutable esterror)))
  (define-syntax <ntptimeval>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (ntptimeval-pointer->ntptimeval-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (ntptimeval-wrapper->ntptimeval-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (ntptimeval-mirror->ntptimeval-mirror ?constructor
         ?mirror))))
  (define (ntptimeval-pointer->ntptimeval-mirror constructor
            (src <pointer-to-ntptimeval>))
    (constructor src.time src.maxerror src.esterror))
  (define (ntptimeval-wrapper->ntptimeval-mirror constructor
            (src <struct-ntptimeval>))
    (constructor src.time src.maxerror src.esterror))
  (define (ntptimeval-mirror->ntptimeval-mirror constructor
            (src <ntptimeval>))
    (constructor src.time src.maxerror src.esterror))
  (define-label <pointer-to-timex>
    (custom-maker <pointer-to-timex>-maker)
    (virtual-fields (mutable stbcnt) (mutable errcnt)
      (mutable calcnt) (mutable jitcnt) (mutable stabil)
      (mutable shift) (mutable jitter) (mutable ppsfreq)
      (mutable tick) (mutable time) (mutable tolerance)
      (mutable precision) (mutable constant)
      (mutable status) (mutable esterror) (mutable maxerror)
      (mutable freq) (mutable offset) (mutable modes)))
  (define-inline
    (<pointer-to-timex>-stbcnt-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_STBCNT@ ?pointer
      @OFFSETOF_TIMEX_STBCNT@ ?value))
  (define-inline (<pointer-to-timex>-stbcnt ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_STBCNT@ ?pointer
      @OFFSETOF_TIMEX_STBCNT@))
  (define-inline
    (<pointer-to-timex>-errcnt-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_ERRCNT@ ?pointer
      @OFFSETOF_TIMEX_ERRCNT@ ?value))
  (define-inline (<pointer-to-timex>-errcnt ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_ERRCNT@ ?pointer
      @OFFSETOF_TIMEX_ERRCNT@))
  (define-inline
    (<pointer-to-timex>-calcnt-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_CALCNT@ ?pointer
      @OFFSETOF_TIMEX_CALCNT@ ?value))
  (define-inline (<pointer-to-timex>-calcnt ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_CALCNT@ ?pointer
      @OFFSETOF_TIMEX_CALCNT@))
  (define-inline
    (<pointer-to-timex>-jitcnt-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_JITCNT@ ?pointer
      @OFFSETOF_TIMEX_JITCNT@ ?value))
  (define-inline (<pointer-to-timex>-jitcnt ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_JITCNT@ ?pointer
      @OFFSETOF_TIMEX_JITCNT@))
  (define-inline
    (<pointer-to-timex>-stabil-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_STABIL@ ?pointer
      @OFFSETOF_TIMEX_STABIL@ ?value))
  (define-inline (<pointer-to-timex>-stabil ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_STABIL@ ?pointer
      @OFFSETOF_TIMEX_STABIL@))
  (define-inline
    (<pointer-to-timex>-shift-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_SHIFT@ ?pointer
      @OFFSETOF_TIMEX_SHIFT@ ?value))
  (define-inline (<pointer-to-timex>-shift ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_SHIFT@ ?pointer
      @OFFSETOF_TIMEX_SHIFT@))
  (define-inline
    (<pointer-to-timex>-jitter-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_JITTER@ ?pointer
      @OFFSETOF_TIMEX_JITTER@ ?value))
  (define-inline (<pointer-to-timex>-jitter ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_JITTER@ ?pointer
      @OFFSETOF_TIMEX_JITTER@))
  (define-inline
    (<pointer-to-timex>-ppsfreq-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_PPSFREQ@ ?pointer
      @OFFSETOF_TIMEX_PPSFREQ@ ?value))
  (define-inline (<pointer-to-timex>-ppsfreq ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_PPSFREQ@ ?pointer
      @OFFSETOF_TIMEX_PPSFREQ@))
  (define-inline
    (<pointer-to-timex>-tick-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_TICK@ ?pointer
      @OFFSETOF_TIMEX_TICK@ ?value))
  (define-inline (<pointer-to-timex>-tick ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_TICK@ ?pointer
      @OFFSETOF_TIMEX_TICK@))
  (define-inline
    (<pointer-to-timex>-time-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_TIMEX_TIME@ ?value))
  (define-inline (<pointer-to-timex>-time ?pointer)
    (null-accessor ?pointer @OFFSETOF_TIMEX_TIME@))
  (define-inline
    (<pointer-to-timex>-tolerance-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_TOLERANCE@ ?pointer
      @OFFSETOF_TIMEX_TOLERANCE@ ?value))
  (define-inline (<pointer-to-timex>-tolerance ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_TOLERANCE@ ?pointer
      @OFFSETOF_TIMEX_TOLERANCE@))
  (define-inline
    (<pointer-to-timex>-precision-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_PRECISION@ ?pointer
      @OFFSETOF_TIMEX_PRECISION@ ?value))
  (define-inline (<pointer-to-timex>-precision ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_PRECISION@ ?pointer
      @OFFSETOF_TIMEX_PRECISION@))
  (define-inline
    (<pointer-to-timex>-constant-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_CONSTANT@ ?pointer
      @OFFSETOF_TIMEX_CONSTANT@ ?value))
  (define-inline (<pointer-to-timex>-constant ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_CONSTANT@ ?pointer
      @OFFSETOF_TIMEX_CONSTANT@))
  (define-inline
    (<pointer-to-timex>-status-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_STATUS@ ?pointer
      @OFFSETOF_TIMEX_STATUS@ ?value))
  (define-inline (<pointer-to-timex>-status ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_STATUS@ ?pointer
      @OFFSETOF_TIMEX_STATUS@))
  (define-inline
    (<pointer-to-timex>-esterror-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_ESTERROR@ ?pointer
      @OFFSETOF_TIMEX_ESTERROR@ ?value))
  (define-inline (<pointer-to-timex>-esterror ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_ESTERROR@ ?pointer
      @OFFSETOF_TIMEX_ESTERROR@))
  (define-inline
    (<pointer-to-timex>-maxerror-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_MAXERROR@ ?pointer
      @OFFSETOF_TIMEX_MAXERROR@ ?value))
  (define-inline (<pointer-to-timex>-maxerror ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_MAXERROR@ ?pointer
      @OFFSETOF_TIMEX_MAXERROR@))
  (define-inline
    (<pointer-to-timex>-freq-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_FREQ@ ?pointer
      @OFFSETOF_TIMEX_FREQ@ ?value))
  (define-inline (<pointer-to-timex>-freq ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_FREQ@ ?pointer
      @OFFSETOF_TIMEX_FREQ@))
  (define-inline
    (<pointer-to-timex>-offset-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_OFFSET@ ?pointer
      @OFFSETOF_TIMEX_OFFSET@ ?value))
  (define-inline (<pointer-to-timex>-offset ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_OFFSET@ ?pointer
      @OFFSETOF_TIMEX_OFFSET@))
  (define-inline
    (<pointer-to-timex>-modes-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_TIMEX_MODES@ ?pointer
      @OFFSETOF_TIMEX_MODES@ ?value))
  (define-inline (<pointer-to-timex>-modes ?pointer)
    (pointer-c-ref @TYPEOF_TIMEX_MODES@ ?pointer
      @OFFSETOF_TIMEX_MODES@))
  (define-maker <pointer-to-timex>-maker
    %<pointer-to-timex>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-timex>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-timex)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (timex-pointer->timex-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (timex-wrapper->timex-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (timex-mirror->timex-pointer ?mirror ?malloc))))
  (define (timex-pointer->timex-pointer
            (src <pointer-to-timex>) malloc)
    (let (((dst <pointer-to-timex>)
           (malloc (c-sizeof struct-timex))))
      (mem.memcpy dst src (c-sizeof struct-timex))
      dst))
  (define (timex-wrapper->timex-pointer (src <struct-timex>)
            malloc)
    (let (((dst <pointer-to-timex>)
           (malloc (c-sizeof struct-timex))))
      (mem.memcpy dst src (c-sizeof struct-timex))
      dst))
  (define (timex-mirror->timex-pointer (src <timex>) malloc)
    (let (((dst <pointer-to-timex>)
           (malloc (c-sizeof struct-timex))))
      (set! dst.modes src.modes)
      (set! dst.offset src.offset)
      (set! dst.freq src.freq)
      (set! dst.maxerror src.maxerror)
      (set! dst.esterror src.esterror)
      (set! dst.status src.status)
      (set! dst.constant src.constant)
      (set! dst.precision src.precision)
      (set! dst.tolerance src.tolerance)
      (set! dst.time src.time)
      (set! dst.tick src.tick)
      (set! dst.ppsfreq src.ppsfreq)
      (set! dst.jitter src.jitter)
      (set! dst.shift src.shift)
      (set! dst.stabil src.stabil)
      (set! dst.jitcnt src.jitcnt)
      (set! dst.calcnt src.calcnt)
      (set! dst.errcnt src.errcnt)
      (set! dst.stbcnt src.stbcnt)
      dst))
  (define-class <struct-timex>
    (nongenerative nausicaa:posix:<struct-timex>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-timex>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-timex))))))
    (fields (immutable pointer))
    (virtual-fields (mutable stbcnt) (mutable errcnt)
      (mutable calcnt) (mutable jitcnt) (mutable stabil)
      (mutable shift) (mutable jitter) (mutable ppsfreq)
      (mutable tick) (immutable time) (mutable tolerance)
      (mutable precision) (mutable constant)
      (mutable status) (mutable esterror) (mutable maxerror)
      (mutable freq) (mutable offset) (mutable modes)))
  (define-inline
    (<struct-timex>-stbcnt-set! ?wrapper ?value)
    (<pointer-to-timex>-stbcnt-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-stbcnt ?wrapper)
    (<pointer-to-timex>-stbcnt
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-errcnt-set! ?wrapper ?value)
    (<pointer-to-timex>-errcnt-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-errcnt ?wrapper)
    (<pointer-to-timex>-errcnt
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-calcnt-set! ?wrapper ?value)
    (<pointer-to-timex>-calcnt-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-calcnt ?wrapper)
    (<pointer-to-timex>-calcnt
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-jitcnt-set! ?wrapper ?value)
    (<pointer-to-timex>-jitcnt-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-jitcnt ?wrapper)
    (<pointer-to-timex>-jitcnt
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-stabil-set! ?wrapper ?value)
    (<pointer-to-timex>-stabil-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-stabil ?wrapper)
    (<pointer-to-timex>-stabil
      (<struct-timex>-pointer ?wrapper)))
  (define-inline (<struct-timex>-shift-set! ?wrapper ?value)
    (<pointer-to-timex>-shift-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-shift ?wrapper)
    (<pointer-to-timex>-shift
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-jitter-set! ?wrapper ?value)
    (<pointer-to-timex>-jitter-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-jitter ?wrapper)
    (<pointer-to-timex>-jitter
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-ppsfreq-set! ?wrapper ?value)
    (<pointer-to-timex>-ppsfreq-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-ppsfreq ?wrapper)
    (<pointer-to-timex>-ppsfreq
      (<struct-timex>-pointer ?wrapper)))
  (define-inline (<struct-timex>-tick-set! ?wrapper ?value)
    (<pointer-to-timex>-tick-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-tick ?wrapper)
    (<pointer-to-timex>-tick
      (<struct-timex>-pointer ?wrapper)))
  (define-inline (<struct-timex>-time ?wrapper)
    (<pointer-to-timex>-time
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-tolerance-set! ?wrapper ?value)
    (<pointer-to-timex>-tolerance-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-tolerance ?wrapper)
    (<pointer-to-timex>-tolerance
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-precision-set! ?wrapper ?value)
    (<pointer-to-timex>-precision-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-precision ?wrapper)
    (<pointer-to-timex>-precision
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-constant-set! ?wrapper ?value)
    (<pointer-to-timex>-constant-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-constant ?wrapper)
    (<pointer-to-timex>-constant
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-status-set! ?wrapper ?value)
    (<pointer-to-timex>-status-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-status ?wrapper)
    (<pointer-to-timex>-status
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-esterror-set! ?wrapper ?value)
    (<pointer-to-timex>-esterror-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-esterror ?wrapper)
    (<pointer-to-timex>-esterror
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-maxerror-set! ?wrapper ?value)
    (<pointer-to-timex>-maxerror-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-maxerror ?wrapper)
    (<pointer-to-timex>-maxerror
      (<struct-timex>-pointer ?wrapper)))
  (define-inline (<struct-timex>-freq-set! ?wrapper ?value)
    (<pointer-to-timex>-freq-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-freq ?wrapper)
    (<pointer-to-timex>-freq
      (<struct-timex>-pointer ?wrapper)))
  (define-inline
    (<struct-timex>-offset-set! ?wrapper ?value)
    (<pointer-to-timex>-offset-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-offset ?wrapper)
    (<pointer-to-timex>-offset
      (<struct-timex>-pointer ?wrapper)))
  (define-inline (<struct-timex>-modes-set! ?wrapper ?value)
    (<pointer-to-timex>-modes-set!
      (<struct-timex>-pointer ?wrapper) ?value))
  (define-inline (<struct-timex>-modes ?wrapper)
    (<pointer-to-timex>-modes
      (<struct-timex>-pointer ?wrapper)))
  (define-syntax <struct-timex>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-timex))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (timex-pointer->timex-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (timex-wrapper->timex-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (timex-mirror->timex-wrapper ?constructor ?mirror
         ?malloc))))
  (define (timex-pointer->timex-wrapper constructor pointer
            malloc)
    (constructor
      (timex-pointer->timex-pointer pointer malloc)))
  (define (timex-wrapper->timex-wrapper constructor wrapper
            malloc)
    (constructor
      (timex-wrapper->timex-pointer wrapper malloc)))
  (define (timex-mirror->timex-wrapper constructor mirror
            malloc)
    (constructor (timex-mirror->timex-pointer mirror malloc)))
  (define-class <timex>
    (nongenerative nausicaa:posix:<timex>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <timex>-maker-transformer)
    (fields (mutable modes) (mutable offset) (mutable freq)
      (mutable maxerror) (mutable esterror) (mutable status)
      (mutable constant) (mutable precision)
      (mutable tolerance) (mutable time) (mutable tick)
      (mutable ppsfreq) (mutable jitter) (mutable shift)
      (mutable stabil) (mutable jitcnt) (mutable calcnt)
      (mutable errcnt) (mutable stbcnt)))
  (define-syntax <timex>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (timex-pointer->timex-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (timex-wrapper->timex-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (timex-mirror->timex-mirror ?constructor ?mirror))))
  (define (timex-pointer->timex-mirror constructor
            (src <pointer-to-timex>))
    (constructor src.modes src.offset src.freq src.maxerror
      src.esterror src.status src.constant src.precision
      src.tolerance src.time src.tick src.ppsfreq src.jitter
      src.shift src.stabil src.jitcnt src.calcnt src.errcnt
      src.stbcnt))
  (define (timex-wrapper->timex-mirror constructor
            (src <struct-timex>))
    (constructor src.modes src.offset src.freq src.maxerror
      src.esterror src.status src.constant src.precision
      src.tolerance src.time src.tick src.ppsfreq src.jitter
      src.shift src.stabil src.jitcnt src.calcnt src.errcnt
      src.stbcnt))
  (define (timex-mirror->timex-mirror constructor
            (src <timex>))
    (constructor src.modes src.offset src.freq src.maxerror
      src.esterror src.status src.constant src.precision
      src.tolerance src.time src.tick src.ppsfreq src.jitter
      src.shift src.stabil src.jitcnt src.calcnt src.errcnt
      src.stbcnt))
  (define-label <pointer-to-itimerval>
    (custom-maker <pointer-to-itimerval>-maker)
    (virtual-fields (mutable it_value) (mutable it_interval)))
  (define-inline
    (<pointer-to-itimerval>-it_value-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_ITIMERVAL_IT_VALUE@
      ?value))
  (define-inline (<pointer-to-itimerval>-it_value ?pointer)
    (null-accessor ?pointer @OFFSETOF_ITIMERVAL_IT_VALUE@))
  (define-inline
    (<pointer-to-itimerval>-it_interval-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_ITIMERVAL_IT_INTERVAL@
      ?value))
  (define-inline
    (<pointer-to-itimerval>-it_interval ?pointer)
    (null-accessor ?pointer @OFFSETOF_ITIMERVAL_IT_INTERVAL@))
  (define-maker <pointer-to-itimerval>-maker
    %<pointer-to-itimerval>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-itimerval>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-itimerval)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (itimerval-pointer->itimerval-pointer ?pointer
         ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (itimerval-wrapper->itimerval-pointer ?wrapper
         ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (itimerval-mirror->itimerval-pointer ?mirror ?malloc))))
  (define (itimerval-pointer->itimerval-pointer
            (src <pointer-to-itimerval>) malloc)
    (let (((dst <pointer-to-itimerval>)
           (malloc (c-sizeof struct-itimerval))))
      (mem.memcpy dst src (c-sizeof struct-itimerval))
      dst))
  (define (itimerval-wrapper->itimerval-pointer
            (src <struct-itimerval>) malloc)
    (let (((dst <pointer-to-itimerval>)
           (malloc (c-sizeof struct-itimerval))))
      (mem.memcpy dst src (c-sizeof struct-itimerval))
      dst))
  (define (itimerval-mirror->itimerval-pointer
            (src <itimerval>) malloc)
    (let (((dst <pointer-to-itimerval>)
           (malloc (c-sizeof struct-itimerval))))
      (set! dst.it_interval src.it_interval)
      (set! dst.it_value src.it_value)
      dst))
  (define-class <struct-itimerval>
    (nongenerative nausicaa:posix:<struct-itimerval>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-itimerval>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-itimerval))))))
    (fields (immutable pointer))
    (virtual-fields (immutable it_value)
      (immutable it_interval)))
  (define-inline (<struct-itimerval>-it_value ?wrapper)
    (<pointer-to-itimerval>-it_value
      (<struct-itimerval>-pointer ?wrapper)))
  (define-inline (<struct-itimerval>-it_interval ?wrapper)
    (<pointer-to-itimerval>-it_interval
      (<struct-itimerval>-pointer ?wrapper)))
  (define-syntax <struct-itimerval>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-itimerval))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (itimerval-pointer->itimerval-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (itimerval-wrapper->itimerval-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (itimerval-mirror->itimerval-wrapper ?constructor
         ?mirror ?malloc))))
  (define (itimerval-pointer->itimerval-wrapper constructor
            pointer malloc)
    (constructor
      (itimerval-pointer->itimerval-pointer pointer malloc)))
  (define (itimerval-wrapper->itimerval-wrapper constructor
            wrapper malloc)
    (constructor
      (itimerval-wrapper->itimerval-pointer wrapper malloc)))
  (define (itimerval-mirror->itimerval-wrapper constructor
            mirror malloc)
    (constructor
      (itimerval-mirror->itimerval-pointer mirror malloc)))
  (define-class <itimerval>
    (nongenerative nausicaa:posix:<itimerval>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <itimerval>-maker-transformer)
    (fields (mutable it_interval) (mutable it_value)))
  (define-syntax <itimerval>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (itimerval-pointer->itimerval-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (itimerval-wrapper->itimerval-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (itimerval-mirror->itimerval-mirror ?constructor
         ?mirror))))
  (define (itimerval-pointer->itimerval-mirror constructor
            (src <pointer-to-itimerval>))
    (constructor src.it_interval src.it_value))
  (define (itimerval-wrapper->itimerval-mirror constructor
            (src <struct-itimerval>))
    (constructor src.it_interval src.it_value))
  (define (itimerval-mirror->itimerval-mirror constructor
            (src <itimerval>))
    (constructor src.it_interval src.it_value))
  (define-label <pointer-to-FTW>
    (custom-maker <pointer-to-FTW>-maker)
    (virtual-fields (mutable level) (mutable base)))
  (define-inline
    (<pointer-to-FTW>-level-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FTW_LEVEL@ ?pointer
      @OFFSETOF_FTW_LEVEL@ ?value))
  (define-inline (<pointer-to-FTW>-level ?pointer)
    (pointer-c-ref @TYPEOF_FTW_LEVEL@ ?pointer
      @OFFSETOF_FTW_LEVEL@))
  (define-inline
    (<pointer-to-FTW>-base-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FTW_BASE@ ?pointer
      @OFFSETOF_FTW_BASE@ ?value))
  (define-inline (<pointer-to-FTW>-base ?pointer)
    (pointer-c-ref @TYPEOF_FTW_BASE@ ?pointer
      @OFFSETOF_FTW_BASE@))
  (define-maker <pointer-to-FTW>-maker
    %<pointer-to-FTW>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-FTW>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-FTW)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (FTW-pointer->FTW-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (FTW-wrapper->FTW-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (FTW-mirror->FTW-pointer ?mirror ?malloc))))
  (define (FTW-pointer->FTW-pointer (src <pointer-to-FTW>)
            malloc)
    (let (((dst <pointer-to-FTW>)
           (malloc (c-sizeof struct-FTW))))
      (mem.memcpy dst src (c-sizeof struct-FTW))
      dst))
  (define (FTW-wrapper->FTW-pointer (src <struct-FTW>)
            malloc)
    (let (((dst <pointer-to-FTW>)
           (malloc (c-sizeof struct-FTW))))
      (mem.memcpy dst src (c-sizeof struct-FTW))
      dst))
  (define (FTW-mirror->FTW-pointer (src <FTW>) malloc)
    (let (((dst <pointer-to-FTW>)
           (malloc (c-sizeof struct-FTW))))
      (set! dst.base src.base)
      (set! dst.level src.level)
      dst))
  (define-class <struct-FTW>
    (nongenerative nausicaa:posix:<struct-FTW>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-FTW>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-FTW))))))
    (fields (immutable pointer))
    (virtual-fields (mutable level) (mutable base)))
  (define-inline (<struct-FTW>-level-set! ?wrapper ?value)
    (<pointer-to-FTW>-level-set!
      (<struct-FTW>-pointer ?wrapper) ?value))
  (define-inline (<struct-FTW>-level ?wrapper)
    (<pointer-to-FTW>-level (<struct-FTW>-pointer ?wrapper)))
  (define-inline (<struct-FTW>-base-set! ?wrapper ?value)
    (<pointer-to-FTW>-base-set!
      (<struct-FTW>-pointer ?wrapper) ?value))
  (define-inline (<struct-FTW>-base ?wrapper)
    (<pointer-to-FTW>-base (<struct-FTW>-pointer ?wrapper)))
  (define-syntax <struct-FTW>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-FTW))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (FTW-pointer->FTW-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (FTW-wrapper->FTW-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (FTW-mirror->FTW-wrapper ?constructor ?mirror ?malloc))))
  (define (FTW-pointer->FTW-wrapper constructor pointer
            malloc)
    (constructor (FTW-pointer->FTW-pointer pointer malloc)))
  (define (FTW-wrapper->FTW-wrapper constructor wrapper
            malloc)
    (constructor (FTW-wrapper->FTW-pointer wrapper malloc)))
  (define (FTW-mirror->FTW-wrapper constructor mirror malloc)
    (constructor (FTW-mirror->FTW-pointer mirror malloc)))
  (define-class <FTW> (nongenerative nausicaa:posix:<FTW>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <FTW>-maker-transformer)
    (fields (mutable base) (mutable level)))
  (define-syntax <FTW>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (FTW-pointer->FTW-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (FTW-wrapper->FTW-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (FTW-mirror->FTW-mirror ?constructor ?mirror))))
  (define (FTW-pointer->FTW-mirror constructor
            (src <pointer-to-FTW>))
    (constructor src.base src.level))
  (define (FTW-wrapper->FTW-mirror constructor
            (src <struct-FTW>))
    (constructor src.base src.level))
  (define (FTW-mirror->FTW-mirror constructor (src <FTW>))
    (constructor src.base src.level))
  (define-label <pointer-to-iovec>
    (custom-maker <pointer-to-iovec>-maker)
    (virtual-fields (mutable iov_len) (mutable iov_base)))
  (define-inline
    (<pointer-to-iovec>-iov_len-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_IOVEC_IOV_LEN@ ?pointer
      @OFFSETOF_IOVEC_IOV_LEN@ ?value))
  (define-inline (<pointer-to-iovec>-iov_len ?pointer)
    (pointer-c-ref @TYPEOF_IOVEC_IOV_LEN@ ?pointer
      @OFFSETOF_IOVEC_IOV_LEN@))
  (define-inline
    (<pointer-to-iovec>-iov_base-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_IOVEC_IOV_BASE@ ?pointer
      @OFFSETOF_IOVEC_IOV_BASE@ ?value))
  (define-inline (<pointer-to-iovec>-iov_base ?pointer)
    (pointer-c-ref @TYPEOF_IOVEC_IOV_BASE@ ?pointer
      @OFFSETOF_IOVEC_IOV_BASE@))
  (define-maker <pointer-to-iovec>-maker
    %<pointer-to-iovec>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-iovec>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-iovec)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (iovec-pointer->iovec-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (iovec-wrapper->iovec-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (iovec-mirror->iovec-pointer ?mirror ?malloc))))
  (define (iovec-pointer->iovec-pointer
            (src <pointer-to-iovec>) malloc)
    (let (((dst <pointer-to-iovec>)
           (malloc (c-sizeof struct-iovec))))
      (mem.memcpy dst src (c-sizeof struct-iovec))
      dst))
  (define (iovec-wrapper->iovec-pointer (src <struct-iovec>)
            malloc)
    (let (((dst <pointer-to-iovec>)
           (malloc (c-sizeof struct-iovec))))
      (mem.memcpy dst src (c-sizeof struct-iovec))
      dst))
  (define (iovec-mirror->iovec-pointer (src <iovec>) malloc)
    (let (((dst <pointer-to-iovec>)
           (malloc (c-sizeof struct-iovec))))
      (set! dst.iov_base src.iov_base)
      (set! dst.iov_len src.iov_len)
      dst))
  (define-class <struct-iovec>
    (nongenerative nausicaa:posix:<struct-iovec>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-iovec>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-iovec))))))
    (fields (immutable pointer))
    (virtual-fields (mutable iov_len) (mutable iov_base)))
  (define-inline
    (<struct-iovec>-iov_len-set! ?wrapper ?value)
    (<pointer-to-iovec>-iov_len-set!
      (<struct-iovec>-pointer ?wrapper) ?value))
  (define-inline (<struct-iovec>-iov_len ?wrapper)
    (<pointer-to-iovec>-iov_len
      (<struct-iovec>-pointer ?wrapper)))
  (define-inline
    (<struct-iovec>-iov_base-set! ?wrapper ?value)
    (<pointer-to-iovec>-iov_base-set!
      (<struct-iovec>-pointer ?wrapper) ?value))
  (define-inline (<struct-iovec>-iov_base ?wrapper)
    (<pointer-to-iovec>-iov_base
      (<struct-iovec>-pointer ?wrapper)))
  (define-syntax <struct-iovec>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-iovec))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (iovec-pointer->iovec-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (iovec-wrapper->iovec-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (iovec-mirror->iovec-wrapper ?constructor ?mirror
         ?malloc))))
  (define (iovec-pointer->iovec-wrapper constructor pointer
            malloc)
    (constructor
      (iovec-pointer->iovec-pointer pointer malloc)))
  (define (iovec-wrapper->iovec-wrapper constructor wrapper
            malloc)
    (constructor
      (iovec-wrapper->iovec-pointer wrapper malloc)))
  (define (iovec-mirror->iovec-wrapper constructor mirror
            malloc)
    (constructor (iovec-mirror->iovec-pointer mirror malloc)))
  (define-class <iovec>
    (nongenerative nausicaa:posix:<iovec>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <iovec>-maker-transformer)
    (fields (mutable iov_base) (mutable iov_len)))
  (define-syntax <iovec>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (iovec-pointer->iovec-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (iovec-wrapper->iovec-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (iovec-mirror->iovec-mirror ?constructor ?mirror))))
  (define (iovec-pointer->iovec-mirror constructor
            (src <pointer-to-iovec>))
    (constructor src.iov_base src.iov_len))
  (define (iovec-wrapper->iovec-mirror constructor
            (src <struct-iovec>))
    (constructor src.iov_base src.iov_len))
  (define (iovec-mirror->iovec-mirror constructor
            (src <iovec>))
    (constructor src.iov_base src.iov_len))
  (define-label <pointer-to-fdset>
    (custom-maker <pointer-to-fdset>-maker) (virtual-fields))
  (define-maker <pointer-to-fdset>-maker
    %<pointer-to-fdset>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-fdset>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-fdset)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (fdset-pointer->fdset-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (fdset-wrapper->fdset-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (fdset-mirror->fdset-pointer ?mirror ?malloc))))
  (define (fdset-pointer->fdset-pointer
            (src <pointer-to-fdset>) malloc)
    (let (((dst <pointer-to-fdset>)
           (malloc (c-sizeof struct-fdset))))
      (mem.memcpy dst src (c-sizeof struct-fdset))
      dst))
  (define (fdset-wrapper->fdset-pointer (src <struct-fdset>)
            malloc)
    (let (((dst <pointer-to-fdset>)
           (malloc (c-sizeof struct-fdset))))
      (mem.memcpy dst src (c-sizeof struct-fdset))
      dst))
  (define (fdset-mirror->fdset-pointer (src <fdset>) malloc)
    (let (((dst <pointer-to-fdset>)
           (malloc (c-sizeof struct-fdset))))
      dst))
  (define-class <struct-fdset>
    (nongenerative nausicaa:posix:<struct-fdset>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-fdset>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-fdset))))))
    (fields (immutable pointer)) (virtual-fields))
  (define-syntax <struct-fdset>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-fdset))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (fdset-pointer->fdset-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (fdset-wrapper->fdset-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (fdset-mirror->fdset-wrapper ?constructor ?mirror
         ?malloc))))
  (define (fdset-pointer->fdset-wrapper constructor pointer
            malloc)
    (constructor
      (fdset-pointer->fdset-pointer pointer malloc)))
  (define (fdset-wrapper->fdset-wrapper constructor wrapper
            malloc)
    (constructor
      (fdset-wrapper->fdset-pointer wrapper malloc)))
  (define (fdset-mirror->fdset-wrapper constructor mirror
            malloc)
    (constructor (fdset-mirror->fdset-pointer mirror malloc)))
  (define-class <fdset>
    (nongenerative nausicaa:posix:<fdset>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <fdset>-maker-transformer) (fields))
  (define-syntax <fdset>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (fdset-pointer->fdset-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (fdset-wrapper->fdset-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (fdset-mirror->fdset-mirror ?constructor ?mirror))))
  (define (fdset-pointer->fdset-mirror constructor
            (src <pointer-to-fdset>))
    (constructor))
  (define (fdset-wrapper->fdset-mirror constructor
            (src <struct-fdset>))
    (constructor))
  (define (fdset-mirror->fdset-mirror constructor
            (src <fdset>))
    (constructor))
  (define-label <pointer-to-passwd>
    (custom-maker <pointer-to-passwd>-maker)
    (virtual-fields (mutable pw_shell) (mutable pw_dir)
      (mutable pw_gecos) (mutable pw_gid) (mutable pw_uid)
      (mutable pw_passwd) (mutable pw_name)))
  (define-inline
    (<pointer-to-passwd>-pw_shell-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_PASSWD_PW_SHELL@ ?pointer
      @OFFSETOF_PASSWD_PW_SHELL@ ?value))
  (define-inline (<pointer-to-passwd>-pw_shell ?pointer)
    (pointer-c-ref @TYPEOF_PASSWD_PW_SHELL@ ?pointer
      @OFFSETOF_PASSWD_PW_SHELL@))
  (define-inline
    (<pointer-to-passwd>-pw_dir-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_PASSWD_PW_DIR@ ?pointer
      @OFFSETOF_PASSWD_PW_DIR@ ?value))
  (define-inline (<pointer-to-passwd>-pw_dir ?pointer)
    (pointer-c-ref @TYPEOF_PASSWD_PW_DIR@ ?pointer
      @OFFSETOF_PASSWD_PW_DIR@))
  (define-inline
    (<pointer-to-passwd>-pw_gecos-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_PASSWD_PW_GECOS@ ?pointer
      @OFFSETOF_PASSWD_PW_GECOS@ ?value))
  (define-inline (<pointer-to-passwd>-pw_gecos ?pointer)
    (pointer-c-ref @TYPEOF_PASSWD_PW_GECOS@ ?pointer
      @OFFSETOF_PASSWD_PW_GECOS@))
  (define-inline
    (<pointer-to-passwd>-pw_gid-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_PASSWD_PW_GID@ ?pointer
      @OFFSETOF_PASSWD_PW_GID@ ?value))
  (define-inline (<pointer-to-passwd>-pw_gid ?pointer)
    (pointer-c-ref @TYPEOF_PASSWD_PW_GID@ ?pointer
      @OFFSETOF_PASSWD_PW_GID@))
  (define-inline
    (<pointer-to-passwd>-pw_uid-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_PASSWD_PW_UID@ ?pointer
      @OFFSETOF_PASSWD_PW_UID@ ?value))
  (define-inline (<pointer-to-passwd>-pw_uid ?pointer)
    (pointer-c-ref @TYPEOF_PASSWD_PW_UID@ ?pointer
      @OFFSETOF_PASSWD_PW_UID@))
  (define-inline
    (<pointer-to-passwd>-pw_passwd-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_PASSWD_PW_PASSWD@ ?pointer
      @OFFSETOF_PASSWD_PW_PASSWD@ ?value))
  (define-inline (<pointer-to-passwd>-pw_passwd ?pointer)
    (pointer-c-ref @TYPEOF_PASSWD_PW_PASSWD@ ?pointer
      @OFFSETOF_PASSWD_PW_PASSWD@))
  (define-inline
    (<pointer-to-passwd>-pw_name-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_PASSWD_PW_NAME@ ?pointer
      @OFFSETOF_PASSWD_PW_NAME@ ?value))
  (define-inline (<pointer-to-passwd>-pw_name ?pointer)
    (pointer-c-ref @TYPEOF_PASSWD_PW_NAME@ ?pointer
      @OFFSETOF_PASSWD_PW_NAME@))
  (define-maker <pointer-to-passwd>-maker
    %<pointer-to-passwd>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-passwd>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-passwd)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (passwd-pointer->passwd-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (passwd-wrapper->passwd-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (passwd-mirror->passwd-pointer ?mirror ?malloc))))
  (define (passwd-pointer->passwd-pointer
            (src <pointer-to-passwd>) malloc)
    (let (((dst <pointer-to-passwd>)
           (malloc (c-sizeof struct-passwd))))
      (mem.memcpy dst src (c-sizeof struct-passwd))
      dst))
  (define (passwd-wrapper->passwd-pointer
            (src <struct-passwd>) malloc)
    (let (((dst <pointer-to-passwd>)
           (malloc (c-sizeof struct-passwd))))
      (mem.memcpy dst src (c-sizeof struct-passwd))
      dst))
  (define (passwd-mirror->passwd-pointer (src <passwd>)
            malloc)
    (let (((dst <pointer-to-passwd>)
           (malloc (c-sizeof struct-passwd))))
      (set! dst.pw_name src.pw_name)
      (set! dst.pw_passwd src.pw_passwd)
      (set! dst.pw_uid src.pw_uid)
      (set! dst.pw_gid src.pw_gid)
      (set! dst.pw_gecos src.pw_gecos)
      (set! dst.pw_dir src.pw_dir)
      (set! dst.pw_shell src.pw_shell)
      dst))
  (define-class <struct-passwd>
    (nongenerative nausicaa:posix:<struct-passwd>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-passwd>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-passwd))))))
    (fields (immutable pointer))
    (virtual-fields (mutable pw_shell) (mutable pw_dir)
      (mutable pw_gecos) (mutable pw_gid) (mutable pw_uid)
      (mutable pw_passwd) (mutable pw_name)))
  (define-inline
    (<struct-passwd>-pw_shell-set! ?wrapper ?value)
    (<pointer-to-passwd>-pw_shell-set!
      (<struct-passwd>-pointer ?wrapper) ?value))
  (define-inline (<struct-passwd>-pw_shell ?wrapper)
    (<pointer-to-passwd>-pw_shell
      (<struct-passwd>-pointer ?wrapper)))
  (define-inline
    (<struct-passwd>-pw_dir-set! ?wrapper ?value)
    (<pointer-to-passwd>-pw_dir-set!
      (<struct-passwd>-pointer ?wrapper) ?value))
  (define-inline (<struct-passwd>-pw_dir ?wrapper)
    (<pointer-to-passwd>-pw_dir
      (<struct-passwd>-pointer ?wrapper)))
  (define-inline
    (<struct-passwd>-pw_gecos-set! ?wrapper ?value)
    (<pointer-to-passwd>-pw_gecos-set!
      (<struct-passwd>-pointer ?wrapper) ?value))
  (define-inline (<struct-passwd>-pw_gecos ?wrapper)
    (<pointer-to-passwd>-pw_gecos
      (<struct-passwd>-pointer ?wrapper)))
  (define-inline
    (<struct-passwd>-pw_gid-set! ?wrapper ?value)
    (<pointer-to-passwd>-pw_gid-set!
      (<struct-passwd>-pointer ?wrapper) ?value))
  (define-inline (<struct-passwd>-pw_gid ?wrapper)
    (<pointer-to-passwd>-pw_gid
      (<struct-passwd>-pointer ?wrapper)))
  (define-inline
    (<struct-passwd>-pw_uid-set! ?wrapper ?value)
    (<pointer-to-passwd>-pw_uid-set!
      (<struct-passwd>-pointer ?wrapper) ?value))
  (define-inline (<struct-passwd>-pw_uid ?wrapper)
    (<pointer-to-passwd>-pw_uid
      (<struct-passwd>-pointer ?wrapper)))
  (define-inline
    (<struct-passwd>-pw_passwd-set! ?wrapper ?value)
    (<pointer-to-passwd>-pw_passwd-set!
      (<struct-passwd>-pointer ?wrapper) ?value))
  (define-inline (<struct-passwd>-pw_passwd ?wrapper)
    (<pointer-to-passwd>-pw_passwd
      (<struct-passwd>-pointer ?wrapper)))
  (define-inline
    (<struct-passwd>-pw_name-set! ?wrapper ?value)
    (<pointer-to-passwd>-pw_name-set!
      (<struct-passwd>-pointer ?wrapper) ?value))
  (define-inline (<struct-passwd>-pw_name ?wrapper)
    (<pointer-to-passwd>-pw_name
      (<struct-passwd>-pointer ?wrapper)))
  (define-syntax <struct-passwd>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-passwd))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (passwd-pointer->passwd-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (passwd-wrapper->passwd-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (passwd-mirror->passwd-wrapper ?constructor ?mirror
         ?malloc))))
  (define (passwd-pointer->passwd-wrapper constructor
            pointer malloc)
    (constructor
      (passwd-pointer->passwd-pointer pointer malloc)))
  (define (passwd-wrapper->passwd-wrapper constructor
            wrapper malloc)
    (constructor
      (passwd-wrapper->passwd-pointer wrapper malloc)))
  (define (passwd-mirror->passwd-wrapper constructor mirror
            malloc)
    (constructor
      (passwd-mirror->passwd-pointer mirror malloc)))
  (define-class <passwd>
    (nongenerative nausicaa:posix:<passwd>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <passwd>-maker-transformer)
    (fields (mutable pw_name) (mutable pw_passwd)
      (mutable pw_uid) (mutable pw_gid) (mutable pw_gecos)
      (mutable pw_dir) (mutable pw_shell)))
  (define-syntax <passwd>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (passwd-pointer->passwd-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (passwd-wrapper->passwd-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (passwd-mirror->passwd-mirror ?constructor ?mirror))))
  (define (passwd-pointer->passwd-mirror constructor
            (src <pointer-to-passwd>))
    (constructor src.pw_name src.pw_passwd src.pw_uid
      src.pw_gid src.pw_gecos src.pw_dir src.pw_shell))
  (define (passwd-wrapper->passwd-mirror constructor
            (src <struct-passwd>))
    (constructor src.pw_name src.pw_passwd src.pw_uid
      src.pw_gid src.pw_gecos src.pw_dir src.pw_shell))
  (define (passwd-mirror->passwd-mirror constructor
            (src <passwd>))
    (constructor src.pw_name src.pw_passwd src.pw_uid
      src.pw_gid src.pw_gecos src.pw_dir src.pw_shell))
  (define-label <pointer-to-group>
    (custom-maker <pointer-to-group>-maker)
    (virtual-fields (mutable gr_mem) (mutable gr_gid)
      (mutable gr_name)))
  (define-inline
    (<pointer-to-group>-gr_mem-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_GROUP_GR_MEM@ ?pointer
      @OFFSETOF_GROUP_GR_MEM@ ?value))
  (define-inline (<pointer-to-group>-gr_mem ?pointer)
    (pointer-c-ref @TYPEOF_GROUP_GR_MEM@ ?pointer
      @OFFSETOF_GROUP_GR_MEM@))
  (define-inline
    (<pointer-to-group>-gr_gid-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_GROUP_GR_GID@ ?pointer
      @OFFSETOF_GROUP_GR_GID@ ?value))
  (define-inline (<pointer-to-group>-gr_gid ?pointer)
    (pointer-c-ref @TYPEOF_GROUP_GR_GID@ ?pointer
      @OFFSETOF_GROUP_GR_GID@))
  (define-inline
    (<pointer-to-group>-gr_name-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_GROUP_GR_NAME@ ?pointer
      @OFFSETOF_GROUP_GR_NAME@ ?value))
  (define-inline (<pointer-to-group>-gr_name ?pointer)
    (pointer-c-ref @TYPEOF_GROUP_GR_NAME@ ?pointer
      @OFFSETOF_GROUP_GR_NAME@))
  (define-maker <pointer-to-group>-maker
    %<pointer-to-group>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-group>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-group)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (group-pointer->group-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (group-wrapper->group-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (group-mirror->group-pointer ?mirror ?malloc))))
  (define (group-pointer->group-pointer
            (src <pointer-to-group>) malloc)
    (let (((dst <pointer-to-group>)
           (malloc (c-sizeof struct-group))))
      (mem.memcpy dst src (c-sizeof struct-group))
      dst))
  (define (group-wrapper->group-pointer (src <struct-group>)
            malloc)
    (let (((dst <pointer-to-group>)
           (malloc (c-sizeof struct-group))))
      (mem.memcpy dst src (c-sizeof struct-group))
      dst))
  (define (group-mirror->group-pointer (src <group>) malloc)
    (let (((dst <pointer-to-group>)
           (malloc (c-sizeof struct-group))))
      (set! dst.gr_name src.gr_name)
      (set! dst.gr_gid src.gr_gid)
      (set! dst.gr_mem src.gr_mem)
      dst))
  (define-class <struct-group>
    (nongenerative nausicaa:posix:<struct-group>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-group>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-group))))))
    (fields (immutable pointer))
    (virtual-fields (mutable gr_mem) (mutable gr_gid)
      (mutable gr_name)))
  (define-inline
    (<struct-group>-gr_mem-set! ?wrapper ?value)
    (<pointer-to-group>-gr_mem-set!
      (<struct-group>-pointer ?wrapper) ?value))
  (define-inline (<struct-group>-gr_mem ?wrapper)
    (<pointer-to-group>-gr_mem
      (<struct-group>-pointer ?wrapper)))
  (define-inline
    (<struct-group>-gr_gid-set! ?wrapper ?value)
    (<pointer-to-group>-gr_gid-set!
      (<struct-group>-pointer ?wrapper) ?value))
  (define-inline (<struct-group>-gr_gid ?wrapper)
    (<pointer-to-group>-gr_gid
      (<struct-group>-pointer ?wrapper)))
  (define-inline
    (<struct-group>-gr_name-set! ?wrapper ?value)
    (<pointer-to-group>-gr_name-set!
      (<struct-group>-pointer ?wrapper) ?value))
  (define-inline (<struct-group>-gr_name ?wrapper)
    (<pointer-to-group>-gr_name
      (<struct-group>-pointer ?wrapper)))
  (define-syntax <struct-group>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-group))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (group-pointer->group-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (group-wrapper->group-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (group-mirror->group-wrapper ?constructor ?mirror
         ?malloc))))
  (define (group-pointer->group-wrapper constructor pointer
            malloc)
    (constructor
      (group-pointer->group-pointer pointer malloc)))
  (define (group-wrapper->group-wrapper constructor wrapper
            malloc)
    (constructor
      (group-wrapper->group-pointer wrapper malloc)))
  (define (group-mirror->group-wrapper constructor mirror
            malloc)
    (constructor (group-mirror->group-pointer mirror malloc)))
  (define-class <group>
    (nongenerative nausicaa:posix:<group>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <group>-maker-transformer)
    (fields (mutable gr_name) (mutable gr_gid)
      (mutable gr_mem)))
  (define-syntax <group>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (group-pointer->group-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (group-wrapper->group-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (group-mirror->group-mirror ?constructor ?mirror))))
  (define (group-pointer->group-mirror constructor
            (src <pointer-to-group>))
    (constructor src.gr_name src.gr_gid src.gr_mem))
  (define (group-wrapper->group-mirror constructor
            (src <struct-group>))
    (constructor src.gr_name src.gr_gid src.gr_mem))
  (define (group-mirror->group-mirror constructor
            (src <group>))
    (constructor src.gr_name src.gr_gid src.gr_mem))
  (define-label <pointer-to-utsname>
    (custom-maker <pointer-to-utsname>-maker)
    (virtual-fields (mutable domainname) (mutable nodename)
      (mutable machine) (mutable version) (mutable release)
      (mutable sysname)))
  (define-inline
    (<pointer-to-utsname>-domainname-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_UTSNAME_DOMAINNAME@
      ?value))
  (define-inline (<pointer-to-utsname>-domainname ?pointer)
    (null-accessor ?pointer @OFFSETOF_UTSNAME_DOMAINNAME@))
  (define-inline
    (<pointer-to-utsname>-nodename-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_UTSNAME_NODENAME@
      ?value))
  (define-inline (<pointer-to-utsname>-nodename ?pointer)
    (null-accessor ?pointer @OFFSETOF_UTSNAME_NODENAME@))
  (define-inline
    (<pointer-to-utsname>-machine-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_UTSNAME_MACHINE@ ?value))
  (define-inline (<pointer-to-utsname>-machine ?pointer)
    (null-accessor ?pointer @OFFSETOF_UTSNAME_MACHINE@))
  (define-inline
    (<pointer-to-utsname>-version-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_UTSNAME_VERSION@ ?value))
  (define-inline (<pointer-to-utsname>-version ?pointer)
    (null-accessor ?pointer @OFFSETOF_UTSNAME_VERSION@))
  (define-inline
    (<pointer-to-utsname>-release-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_UTSNAME_RELEASE@ ?value))
  (define-inline (<pointer-to-utsname>-release ?pointer)
    (null-accessor ?pointer @OFFSETOF_UTSNAME_RELEASE@))
  (define-inline
    (<pointer-to-utsname>-sysname-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_UTSNAME_SYSNAME@ ?value))
  (define-inline (<pointer-to-utsname>-sysname ?pointer)
    (null-accessor ?pointer @OFFSETOF_UTSNAME_SYSNAME@))
  (define-maker <pointer-to-utsname>-maker
    %<pointer-to-utsname>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-utsname>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-utsname)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (utsname-pointer->utsname-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (utsname-wrapper->utsname-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (utsname-mirror->utsname-pointer ?mirror ?malloc))))
  (define (utsname-pointer->utsname-pointer
            (src <pointer-to-utsname>) malloc)
    (let (((dst <pointer-to-utsname>)
           (malloc (c-sizeof struct-utsname))))
      (mem.memcpy dst src (c-sizeof struct-utsname))
      dst))
  (define (utsname-wrapper->utsname-pointer
            (src <struct-utsname>) malloc)
    (let (((dst <pointer-to-utsname>)
           (malloc (c-sizeof struct-utsname))))
      (mem.memcpy dst src (c-sizeof struct-utsname))
      dst))
  (define (utsname-mirror->utsname-pointer (src <utsname>)
            malloc)
    (let (((dst <pointer-to-utsname>)
           (malloc (c-sizeof struct-utsname))))
      (set! dst.sysname src.sysname)
      (set! dst.release src.release)
      (set! dst.version src.version)
      (set! dst.machine src.machine)
      (set! dst.nodename src.nodename)
      (set! dst.domainname src.domainname)
      dst))
  (define-class <struct-utsname>
    (nongenerative nausicaa:posix:<struct-utsname>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-utsname>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-utsname))))))
    (fields (immutable pointer))
    (virtual-fields (immutable domainname)
      (immutable nodename) (immutable machine)
      (immutable version) (immutable release)
      (immutable sysname)))
  (define-inline (<struct-utsname>-domainname ?wrapper)
    (<pointer-to-utsname>-domainname
      (<struct-utsname>-pointer ?wrapper)))
  (define-inline (<struct-utsname>-nodename ?wrapper)
    (<pointer-to-utsname>-nodename
      (<struct-utsname>-pointer ?wrapper)))
  (define-inline (<struct-utsname>-machine ?wrapper)
    (<pointer-to-utsname>-machine
      (<struct-utsname>-pointer ?wrapper)))
  (define-inline (<struct-utsname>-version ?wrapper)
    (<pointer-to-utsname>-version
      (<struct-utsname>-pointer ?wrapper)))
  (define-inline (<struct-utsname>-release ?wrapper)
    (<pointer-to-utsname>-release
      (<struct-utsname>-pointer ?wrapper)))
  (define-inline (<struct-utsname>-sysname ?wrapper)
    (<pointer-to-utsname>-sysname
      (<struct-utsname>-pointer ?wrapper)))
  (define-syntax <struct-utsname>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-utsname))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (utsname-pointer->utsname-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (utsname-wrapper->utsname-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (utsname-mirror->utsname-wrapper ?constructor ?mirror
         ?malloc))))
  (define (utsname-pointer->utsname-wrapper constructor
            pointer malloc)
    (constructor
      (utsname-pointer->utsname-pointer pointer malloc)))
  (define (utsname-wrapper->utsname-wrapper constructor
            wrapper malloc)
    (constructor
      (utsname-wrapper->utsname-pointer wrapper malloc)))
  (define (utsname-mirror->utsname-wrapper constructor
            mirror malloc)
    (constructor
      (utsname-mirror->utsname-pointer mirror malloc)))
  (define-class <utsname>
    (nongenerative nausicaa:posix:<utsname>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <utsname>-maker-transformer)
    (fields (mutable sysname) (mutable release)
      (mutable version) (mutable machine) (mutable nodename)
      (mutable domainname)))
  (define-syntax <utsname>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (utsname-pointer->utsname-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (utsname-wrapper->utsname-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (utsname-mirror->utsname-mirror ?constructor ?mirror))))
  (define (utsname-pointer->utsname-mirror constructor
            (src <pointer-to-utsname>))
    (constructor src.sysname src.release src.version
      src.machine src.nodename src.domainname))
  (define (utsname-wrapper->utsname-mirror constructor
            (src <struct-utsname>))
    (constructor src.sysname src.release src.version
      src.machine src.nodename src.domainname))
  (define (utsname-mirror->utsname-mirror constructor
            (src <utsname>))
    (constructor src.sysname src.release src.version
      src.machine src.nodename src.domainname))
  (define-label <pointer-to-fstab>
    (custom-maker <pointer-to-fstab>-maker)
    (virtual-fields (mutable fs_passno) (mutable fs_freq)
      (mutable fs_type) (mutable fs_mntops)
      (mutable fs_vfstype) (mutable fs_file)
      (mutable fs_spec)))
  (define-inline
    (<pointer-to-fstab>-fs_passno-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FSTAB_FS_PASSNO@ ?pointer
      @OFFSETOF_FSTAB_FS_PASSNO@ ?value))
  (define-inline (<pointer-to-fstab>-fs_passno ?pointer)
    (pointer-c-ref @TYPEOF_FSTAB_FS_PASSNO@ ?pointer
      @OFFSETOF_FSTAB_FS_PASSNO@))
  (define-inline
    (<pointer-to-fstab>-fs_freq-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FSTAB_FS_FREQ@ ?pointer
      @OFFSETOF_FSTAB_FS_FREQ@ ?value))
  (define-inline (<pointer-to-fstab>-fs_freq ?pointer)
    (pointer-c-ref @TYPEOF_FSTAB_FS_FREQ@ ?pointer
      @OFFSETOF_FSTAB_FS_FREQ@))
  (define-inline
    (<pointer-to-fstab>-fs_type-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FSTAB_FS_TYPE@ ?pointer
      @OFFSETOF_FSTAB_FS_TYPE@ ?value))
  (define-inline (<pointer-to-fstab>-fs_type ?pointer)
    (pointer-c-ref @TYPEOF_FSTAB_FS_TYPE@ ?pointer
      @OFFSETOF_FSTAB_FS_TYPE@))
  (define-inline
    (<pointer-to-fstab>-fs_mntops-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FSTAB_FS_MNTOPS@ ?pointer
      @OFFSETOF_FSTAB_FS_MNTOPS@ ?value))
  (define-inline (<pointer-to-fstab>-fs_mntops ?pointer)
    (pointer-c-ref @TYPEOF_FSTAB_FS_MNTOPS@ ?pointer
      @OFFSETOF_FSTAB_FS_MNTOPS@))
  (define-inline
    (<pointer-to-fstab>-fs_vfstype-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FSTAB_FS_VFSTYPE@ ?pointer
      @OFFSETOF_FSTAB_FS_VFSTYPE@ ?value))
  (define-inline (<pointer-to-fstab>-fs_vfstype ?pointer)
    (pointer-c-ref @TYPEOF_FSTAB_FS_VFSTYPE@ ?pointer
      @OFFSETOF_FSTAB_FS_VFSTYPE@))
  (define-inline
    (<pointer-to-fstab>-fs_file-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FSTAB_FS_FILE@ ?pointer
      @OFFSETOF_FSTAB_FS_FILE@ ?value))
  (define-inline (<pointer-to-fstab>-fs_file ?pointer)
    (pointer-c-ref @TYPEOF_FSTAB_FS_FILE@ ?pointer
      @OFFSETOF_FSTAB_FS_FILE@))
  (define-inline
    (<pointer-to-fstab>-fs_spec-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_FSTAB_FS_SPEC@ ?pointer
      @OFFSETOF_FSTAB_FS_SPEC@ ?value))
  (define-inline (<pointer-to-fstab>-fs_spec ?pointer)
    (pointer-c-ref @TYPEOF_FSTAB_FS_SPEC@ ?pointer
      @OFFSETOF_FSTAB_FS_SPEC@))
  (define-maker <pointer-to-fstab>-maker
    %<pointer-to-fstab>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-fstab>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-fstab)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (fstab-pointer->fstab-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (fstab-wrapper->fstab-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (fstab-mirror->fstab-pointer ?mirror ?malloc))))
  (define (fstab-pointer->fstab-pointer
            (src <pointer-to-fstab>) malloc)
    (let (((dst <pointer-to-fstab>)
           (malloc (c-sizeof struct-fstab))))
      (mem.memcpy dst src (c-sizeof struct-fstab))
      dst))
  (define (fstab-wrapper->fstab-pointer (src <struct-fstab>)
            malloc)
    (let (((dst <pointer-to-fstab>)
           (malloc (c-sizeof struct-fstab))))
      (mem.memcpy dst src (c-sizeof struct-fstab))
      dst))
  (define (fstab-mirror->fstab-pointer (src <fstab>) malloc)
    (let (((dst <pointer-to-fstab>)
           (malloc (c-sizeof struct-fstab))))
      (set! dst.fs_spec src.fs_spec)
      (set! dst.fs_file src.fs_file)
      (set! dst.fs_vfstype src.fs_vfstype)
      (set! dst.fs_mntops src.fs_mntops)
      (set! dst.fs_type src.fs_type)
      (set! dst.fs_freq src.fs_freq)
      (set! dst.fs_passno src.fs_passno)
      dst))
  (define-class <struct-fstab>
    (nongenerative nausicaa:posix:<struct-fstab>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-fstab>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-fstab))))))
    (fields (immutable pointer))
    (virtual-fields (mutable fs_passno) (mutable fs_freq)
      (mutable fs_type) (mutable fs_mntops)
      (mutable fs_vfstype) (mutable fs_file)
      (mutable fs_spec)))
  (define-inline
    (<struct-fstab>-fs_passno-set! ?wrapper ?value)
    (<pointer-to-fstab>-fs_passno-set!
      (<struct-fstab>-pointer ?wrapper) ?value))
  (define-inline (<struct-fstab>-fs_passno ?wrapper)
    (<pointer-to-fstab>-fs_passno
      (<struct-fstab>-pointer ?wrapper)))
  (define-inline
    (<struct-fstab>-fs_freq-set! ?wrapper ?value)
    (<pointer-to-fstab>-fs_freq-set!
      (<struct-fstab>-pointer ?wrapper) ?value))
  (define-inline (<struct-fstab>-fs_freq ?wrapper)
    (<pointer-to-fstab>-fs_freq
      (<struct-fstab>-pointer ?wrapper)))
  (define-inline
    (<struct-fstab>-fs_type-set! ?wrapper ?value)
    (<pointer-to-fstab>-fs_type-set!
      (<struct-fstab>-pointer ?wrapper) ?value))
  (define-inline (<struct-fstab>-fs_type ?wrapper)
    (<pointer-to-fstab>-fs_type
      (<struct-fstab>-pointer ?wrapper)))
  (define-inline
    (<struct-fstab>-fs_mntops-set! ?wrapper ?value)
    (<pointer-to-fstab>-fs_mntops-set!
      (<struct-fstab>-pointer ?wrapper) ?value))
  (define-inline (<struct-fstab>-fs_mntops ?wrapper)
    (<pointer-to-fstab>-fs_mntops
      (<struct-fstab>-pointer ?wrapper)))
  (define-inline
    (<struct-fstab>-fs_vfstype-set! ?wrapper ?value)
    (<pointer-to-fstab>-fs_vfstype-set!
      (<struct-fstab>-pointer ?wrapper) ?value))
  (define-inline (<struct-fstab>-fs_vfstype ?wrapper)
    (<pointer-to-fstab>-fs_vfstype
      (<struct-fstab>-pointer ?wrapper)))
  (define-inline
    (<struct-fstab>-fs_file-set! ?wrapper ?value)
    (<pointer-to-fstab>-fs_file-set!
      (<struct-fstab>-pointer ?wrapper) ?value))
  (define-inline (<struct-fstab>-fs_file ?wrapper)
    (<pointer-to-fstab>-fs_file
      (<struct-fstab>-pointer ?wrapper)))
  (define-inline
    (<struct-fstab>-fs_spec-set! ?wrapper ?value)
    (<pointer-to-fstab>-fs_spec-set!
      (<struct-fstab>-pointer ?wrapper) ?value))
  (define-inline (<struct-fstab>-fs_spec ?wrapper)
    (<pointer-to-fstab>-fs_spec
      (<struct-fstab>-pointer ?wrapper)))
  (define-syntax <struct-fstab>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-fstab))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (fstab-pointer->fstab-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (fstab-wrapper->fstab-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (fstab-mirror->fstab-wrapper ?constructor ?mirror
         ?malloc))))
  (define (fstab-pointer->fstab-wrapper constructor pointer
            malloc)
    (constructor
      (fstab-pointer->fstab-pointer pointer malloc)))
  (define (fstab-wrapper->fstab-wrapper constructor wrapper
            malloc)
    (constructor
      (fstab-wrapper->fstab-pointer wrapper malloc)))
  (define (fstab-mirror->fstab-wrapper constructor mirror
            malloc)
    (constructor (fstab-mirror->fstab-pointer mirror malloc)))
  (define-class <fstab>
    (nongenerative nausicaa:posix:<fstab>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <fstab>-maker-transformer)
    (fields (mutable fs_spec) (mutable fs_file)
      (mutable fs_vfstype) (mutable fs_mntops)
      (mutable fs_type) (mutable fs_freq)
      (mutable fs_passno)))
  (define-syntax <fstab>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (fstab-pointer->fstab-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (fstab-wrapper->fstab-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (fstab-mirror->fstab-mirror ?constructor ?mirror))))
  (define (fstab-pointer->fstab-mirror constructor
            (src <pointer-to-fstab>))
    (constructor src.fs_spec src.fs_file src.fs_vfstype
      src.fs_mntops src.fs_type src.fs_freq src.fs_passno))
  (define (fstab-wrapper->fstab-mirror constructor
            (src <struct-fstab>))
    (constructor src.fs_spec src.fs_file src.fs_vfstype
      src.fs_mntops src.fs_type src.fs_freq src.fs_passno))
  (define (fstab-mirror->fstab-mirror constructor
            (src <fstab>))
    (constructor src.fs_spec src.fs_file src.fs_vfstype
      src.fs_mntops src.fs_type src.fs_freq src.fs_passno))
  (define-label <pointer-to-mntent>
    (custom-maker <pointer-to-mntent>-maker)
    (virtual-fields (mutable mnt_passno) (mutable mnt_freq)
      (mutable mnt_opts) (mutable mnt_type)
      (mutable mnt_dir) (mutable mnt_fsname)))
  (define-inline
    (<pointer-to-mntent>-mnt_passno-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_MNTENT_MNT_PASSNO@ ?pointer
      @OFFSETOF_MNTENT_MNT_PASSNO@ ?value))
  (define-inline (<pointer-to-mntent>-mnt_passno ?pointer)
    (pointer-c-ref @TYPEOF_MNTENT_MNT_PASSNO@ ?pointer
      @OFFSETOF_MNTENT_MNT_PASSNO@))
  (define-inline
    (<pointer-to-mntent>-mnt_freq-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_MNTENT_MNT_FREQ@ ?pointer
      @OFFSETOF_MNTENT_MNT_FREQ@ ?value))
  (define-inline (<pointer-to-mntent>-mnt_freq ?pointer)
    (pointer-c-ref @TYPEOF_MNTENT_MNT_FREQ@ ?pointer
      @OFFSETOF_MNTENT_MNT_FREQ@))
  (define-inline
    (<pointer-to-mntent>-mnt_opts-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_MNTENT_MNT_OPTS@ ?pointer
      @OFFSETOF_MNTENT_MNT_OPTS@ ?value))
  (define-inline (<pointer-to-mntent>-mnt_opts ?pointer)
    (pointer-c-ref @TYPEOF_MNTENT_MNT_OPTS@ ?pointer
      @OFFSETOF_MNTENT_MNT_OPTS@))
  (define-inline
    (<pointer-to-mntent>-mnt_type-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_MNTENT_MNT_TYPE@ ?pointer
      @OFFSETOF_MNTENT_MNT_TYPE@ ?value))
  (define-inline (<pointer-to-mntent>-mnt_type ?pointer)
    (pointer-c-ref @TYPEOF_MNTENT_MNT_TYPE@ ?pointer
      @OFFSETOF_MNTENT_MNT_TYPE@))
  (define-inline
    (<pointer-to-mntent>-mnt_dir-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_MNTENT_MNT_DIR@ ?pointer
      @OFFSETOF_MNTENT_MNT_DIR@ ?value))
  (define-inline (<pointer-to-mntent>-mnt_dir ?pointer)
    (pointer-c-ref @TYPEOF_MNTENT_MNT_DIR@ ?pointer
      @OFFSETOF_MNTENT_MNT_DIR@))
  (define-inline
    (<pointer-to-mntent>-mnt_fsname-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_MNTENT_MNT_FSNAME@ ?pointer
      @OFFSETOF_MNTENT_MNT_FSNAME@ ?value))
  (define-inline (<pointer-to-mntent>-mnt_fsname ?pointer)
    (pointer-c-ref @TYPEOF_MNTENT_MNT_FSNAME@ ?pointer
      @OFFSETOF_MNTENT_MNT_FSNAME@))
  (define-maker <pointer-to-mntent>-maker
    %<pointer-to-mntent>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-mntent>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-mntent)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (mntent-pointer->mntent-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (mntent-wrapper->mntent-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (mntent-mirror->mntent-pointer ?mirror ?malloc))))
  (define (mntent-pointer->mntent-pointer
            (src <pointer-to-mntent>) malloc)
    (let (((dst <pointer-to-mntent>)
           (malloc (c-sizeof struct-mntent))))
      (mem.memcpy dst src (c-sizeof struct-mntent))
      dst))
  (define (mntent-wrapper->mntent-pointer
            (src <struct-mntent>) malloc)
    (let (((dst <pointer-to-mntent>)
           (malloc (c-sizeof struct-mntent))))
      (mem.memcpy dst src (c-sizeof struct-mntent))
      dst))
  (define (mntent-mirror->mntent-pointer (src <mntent>)
            malloc)
    (let (((dst <pointer-to-mntent>)
           (malloc (c-sizeof struct-mntent))))
      (set! dst.mnt_fsname src.mnt_fsname)
      (set! dst.mnt_dir src.mnt_dir)
      (set! dst.mnt_type src.mnt_type)
      (set! dst.mnt_opts src.mnt_opts)
      (set! dst.mnt_freq src.mnt_freq)
      (set! dst.mnt_passno src.mnt_passno)
      dst))
  (define-class <struct-mntent>
    (nongenerative nausicaa:posix:<struct-mntent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-mntent>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-mntent))))))
    (fields (immutable pointer))
    (virtual-fields (mutable mnt_passno) (mutable mnt_freq)
      (mutable mnt_opts) (mutable mnt_type)
      (mutable mnt_dir) (mutable mnt_fsname)))
  (define-inline
    (<struct-mntent>-mnt_passno-set! ?wrapper ?value)
    (<pointer-to-mntent>-mnt_passno-set!
      (<struct-mntent>-pointer ?wrapper) ?value))
  (define-inline (<struct-mntent>-mnt_passno ?wrapper)
    (<pointer-to-mntent>-mnt_passno
      (<struct-mntent>-pointer ?wrapper)))
  (define-inline
    (<struct-mntent>-mnt_freq-set! ?wrapper ?value)
    (<pointer-to-mntent>-mnt_freq-set!
      (<struct-mntent>-pointer ?wrapper) ?value))
  (define-inline (<struct-mntent>-mnt_freq ?wrapper)
    (<pointer-to-mntent>-mnt_freq
      (<struct-mntent>-pointer ?wrapper)))
  (define-inline
    (<struct-mntent>-mnt_opts-set! ?wrapper ?value)
    (<pointer-to-mntent>-mnt_opts-set!
      (<struct-mntent>-pointer ?wrapper) ?value))
  (define-inline (<struct-mntent>-mnt_opts ?wrapper)
    (<pointer-to-mntent>-mnt_opts
      (<struct-mntent>-pointer ?wrapper)))
  (define-inline
    (<struct-mntent>-mnt_type-set! ?wrapper ?value)
    (<pointer-to-mntent>-mnt_type-set!
      (<struct-mntent>-pointer ?wrapper) ?value))
  (define-inline (<struct-mntent>-mnt_type ?wrapper)
    (<pointer-to-mntent>-mnt_type
      (<struct-mntent>-pointer ?wrapper)))
  (define-inline
    (<struct-mntent>-mnt_dir-set! ?wrapper ?value)
    (<pointer-to-mntent>-mnt_dir-set!
      (<struct-mntent>-pointer ?wrapper) ?value))
  (define-inline (<struct-mntent>-mnt_dir ?wrapper)
    (<pointer-to-mntent>-mnt_dir
      (<struct-mntent>-pointer ?wrapper)))
  (define-inline
    (<struct-mntent>-mnt_fsname-set! ?wrapper ?value)
    (<pointer-to-mntent>-mnt_fsname-set!
      (<struct-mntent>-pointer ?wrapper) ?value))
  (define-inline (<struct-mntent>-mnt_fsname ?wrapper)
    (<pointer-to-mntent>-mnt_fsname
      (<struct-mntent>-pointer ?wrapper)))
  (define-syntax <struct-mntent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-mntent))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (mntent-pointer->mntent-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (mntent-wrapper->mntent-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (mntent-mirror->mntent-wrapper ?constructor ?mirror
         ?malloc))))
  (define (mntent-pointer->mntent-wrapper constructor
            pointer malloc)
    (constructor
      (mntent-pointer->mntent-pointer pointer malloc)))
  (define (mntent-wrapper->mntent-wrapper constructor
            wrapper malloc)
    (constructor
      (mntent-wrapper->mntent-pointer wrapper malloc)))
  (define (mntent-mirror->mntent-wrapper constructor mirror
            malloc)
    (constructor
      (mntent-mirror->mntent-pointer mirror malloc)))
  (define-class <mntent>
    (nongenerative nausicaa:posix:<mntent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <mntent>-maker-transformer)
    (fields (mutable mnt_fsname) (mutable mnt_dir)
      (mutable mnt_type) (mutable mnt_opts)
      (mutable mnt_freq) (mutable mnt_passno)))
  (define-syntax <mntent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (mntent-pointer->mntent-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (mntent-wrapper->mntent-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (mntent-mirror->mntent-mirror ?constructor ?mirror))))
  (define (mntent-pointer->mntent-mirror constructor
            (src <pointer-to-mntent>))
    (constructor src.mnt_fsname src.mnt_dir src.mnt_type
      src.mnt_opts src.mnt_freq src.mnt_passno))
  (define (mntent-wrapper->mntent-mirror constructor
            (src <struct-mntent>))
    (constructor src.mnt_fsname src.mnt_dir src.mnt_type
      src.mnt_opts src.mnt_freq src.mnt_passno))
  (define (mntent-mirror->mntent-mirror constructor
            (src <mntent>))
    (constructor src.mnt_fsname src.mnt_dir src.mnt_type
      src.mnt_opts src.mnt_freq src.mnt_passno))
  (define-label <pointer-to-sockaddr>
    (custom-maker <pointer-to-sockaddr>-maker)
    (virtual-fields (mutable sa_data) (mutable sa_family)))
  (define-inline
    (<pointer-to-sockaddr>-sa_data-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_SOCKADDR_SA_DATA@
      ?value))
  (define-inline (<pointer-to-sockaddr>-sa_data ?pointer)
    (null-accessor ?pointer @OFFSETOF_SOCKADDR_SA_DATA@))
  (define-inline
    (<pointer-to-sockaddr>-sa_family-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_SOCKADDR_SA_FAMILY@ ?pointer
      @OFFSETOF_SOCKADDR_SA_FAMILY@ ?value))
  (define-inline (<pointer-to-sockaddr>-sa_family ?pointer)
    (pointer-c-ref @TYPEOF_SOCKADDR_SA_FAMILY@ ?pointer
      @OFFSETOF_SOCKADDR_SA_FAMILY@))
  (define-maker <pointer-to-sockaddr>-maker
    %<pointer-to-sockaddr>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-sockaddr>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-sockaddr)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (sockaddr-pointer->sockaddr-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (sockaddr-wrapper->sockaddr-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (sockaddr-mirror->sockaddr-pointer ?mirror ?malloc))))
  (define (sockaddr-pointer->sockaddr-pointer
            (src <pointer-to-sockaddr>) malloc)
    (let (((dst <pointer-to-sockaddr>)
           (malloc (c-sizeof struct-sockaddr))))
      (mem.memcpy dst src (c-sizeof struct-sockaddr))
      dst))
  (define (sockaddr-wrapper->sockaddr-pointer
            (src <struct-sockaddr>) malloc)
    (let (((dst <pointer-to-sockaddr>)
           (malloc (c-sizeof struct-sockaddr))))
      (mem.memcpy dst src (c-sizeof struct-sockaddr))
      dst))
  (define (sockaddr-mirror->sockaddr-pointer
            (src <sockaddr>) malloc)
    (let (((dst <pointer-to-sockaddr>)
           (malloc (c-sizeof struct-sockaddr))))
      (set! dst.sa_family src.sa_family)
      (set! dst.sa_data src.sa_data)
      dst))
  (define-class <struct-sockaddr>
    (nongenerative nausicaa:posix:<struct-sockaddr>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-sockaddr>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-sockaddr))))))
    (fields (immutable pointer))
    (virtual-fields (immutable sa_data) (mutable sa_family)))
  (define-inline (<struct-sockaddr>-sa_data ?wrapper)
    (<pointer-to-sockaddr>-sa_data
      (<struct-sockaddr>-pointer ?wrapper)))
  (define-inline
    (<struct-sockaddr>-sa_family-set! ?wrapper ?value)
    (<pointer-to-sockaddr>-sa_family-set!
      (<struct-sockaddr>-pointer ?wrapper) ?value))
  (define-inline (<struct-sockaddr>-sa_family ?wrapper)
    (<pointer-to-sockaddr>-sa_family
      (<struct-sockaddr>-pointer ?wrapper)))
  (define-syntax <struct-sockaddr>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-sockaddr))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (sockaddr-pointer->sockaddr-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (sockaddr-wrapper->sockaddr-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (sockaddr-mirror->sockaddr-wrapper ?constructor
         ?mirror ?malloc))))
  (define (sockaddr-pointer->sockaddr-wrapper constructor
            pointer malloc)
    (constructor
      (sockaddr-pointer->sockaddr-pointer pointer malloc)))
  (define (sockaddr-wrapper->sockaddr-wrapper constructor
            wrapper malloc)
    (constructor
      (sockaddr-wrapper->sockaddr-pointer wrapper malloc)))
  (define (sockaddr-mirror->sockaddr-wrapper constructor
            mirror malloc)
    (constructor
      (sockaddr-mirror->sockaddr-pointer mirror malloc)))
  (define-class <sockaddr>
    (nongenerative nausicaa:posix:<sockaddr>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <sockaddr>-maker-transformer)
    (fields (mutable sa_family) (mutable sa_data)))
  (define-syntax <sockaddr>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (sockaddr-pointer->sockaddr-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (sockaddr-wrapper->sockaddr-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (sockaddr-mirror->sockaddr-mirror ?constructor
         ?mirror))))
  (define (sockaddr-pointer->sockaddr-mirror constructor
            (src <pointer-to-sockaddr>))
    (constructor src.sa_family src.sa_data))
  (define (sockaddr-wrapper->sockaddr-mirror constructor
            (src <struct-sockaddr>))
    (constructor src.sa_family src.sa_data))
  (define (sockaddr-mirror->sockaddr-mirror constructor
            (src <sockaddr>))
    (constructor src.sa_family src.sa_data))
  (define-label <pointer-to-sockaddr_in>
    (custom-maker <pointer-to-sockaddr_in>-maker)
    (virtual-fields (mutable sin_port) (mutable sin_addr)
      (mutable sin_family)))
  (define-inline
    (<pointer-to-sockaddr_in>-sin_port-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_SOCKADDR_IN_SIN_PORT@ ?pointer
      @OFFSETOF_SOCKADDR_IN_SIN_PORT@ ?value))
  (define-inline
    (<pointer-to-sockaddr_in>-sin_port ?pointer)
    (pointer-c-ref @TYPEOF_SOCKADDR_IN_SIN_PORT@ ?pointer
      @OFFSETOF_SOCKADDR_IN_SIN_PORT@))
  (define-inline
    (<pointer-to-sockaddr_in>-sin_addr-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_SOCKADDR_IN_SIN_ADDR@
      ?value))
  (define-inline
    (<pointer-to-sockaddr_in>-sin_addr ?pointer)
    (null-accessor ?pointer @OFFSETOF_SOCKADDR_IN_SIN_ADDR@))
  (define-inline
    (<pointer-to-sockaddr_in>-sin_family-set! ?pointer
      ?value)
    (pointer-c-set! @TYPEOF_SOCKADDR_IN_SIN_FAMILY@ ?pointer
      @OFFSETOF_SOCKADDR_IN_SIN_FAMILY@ ?value))
  (define-inline
    (<pointer-to-sockaddr_in>-sin_family ?pointer)
    (pointer-c-ref @TYPEOF_SOCKADDR_IN_SIN_FAMILY@ ?pointer
      @OFFSETOF_SOCKADDR_IN_SIN_FAMILY@))
  (define-maker <pointer-to-sockaddr_in>-maker
    %<pointer-to-sockaddr_in>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-sockaddr_in>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-sockaddr_in)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (sockaddr_in-pointer->sockaddr_in-pointer ?pointer
         ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (sockaddr_in-wrapper->sockaddr_in-pointer ?wrapper
         ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (sockaddr_in-mirror->sockaddr_in-pointer ?mirror
         ?malloc))))
  (define (sockaddr_in-pointer->sockaddr_in-pointer
            (src <pointer-to-sockaddr_in>) malloc)
    (let (((dst <pointer-to-sockaddr_in>)
           (malloc (c-sizeof struct-sockaddr_in))))
      (mem.memcpy dst src (c-sizeof struct-sockaddr_in))
      dst))
  (define (sockaddr_in-wrapper->sockaddr_in-pointer
            (src <struct-sockaddr_in>) malloc)
    (let (((dst <pointer-to-sockaddr_in>)
           (malloc (c-sizeof struct-sockaddr_in))))
      (mem.memcpy dst src (c-sizeof struct-sockaddr_in))
      dst))
  (define (sockaddr_in-mirror->sockaddr_in-pointer
            (src <sockaddr_in>) malloc)
    (let (((dst <pointer-to-sockaddr_in>)
           (malloc (c-sizeof struct-sockaddr_in))))
      (set! dst.sin_family src.sin_family)
      (set! dst.sin_addr src.sin_addr)
      (set! dst.sin_port src.sin_port)
      dst))
  (define-class <struct-sockaddr_in>
    (nongenerative nausicaa:posix:<struct-sockaddr_in>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer
      <struct-sockaddr_in>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-sockaddr_in))))))
    (fields (immutable pointer))
    (virtual-fields (mutable sin_port) (immutable sin_addr)
      (mutable sin_family)))
  (define-inline
    (<struct-sockaddr_in>-sin_port-set! ?wrapper ?value)
    (<pointer-to-sockaddr_in>-sin_port-set!
      (<struct-sockaddr_in>-pointer ?wrapper) ?value))
  (define-inline (<struct-sockaddr_in>-sin_port ?wrapper)
    (<pointer-to-sockaddr_in>-sin_port
      (<struct-sockaddr_in>-pointer ?wrapper)))
  (define-inline (<struct-sockaddr_in>-sin_addr ?wrapper)
    (<pointer-to-sockaddr_in>-sin_addr
      (<struct-sockaddr_in>-pointer ?wrapper)))
  (define-inline
    (<struct-sockaddr_in>-sin_family-set! ?wrapper ?value)
    (<pointer-to-sockaddr_in>-sin_family-set!
      (<struct-sockaddr_in>-pointer ?wrapper) ?value))
  (define-inline (<struct-sockaddr_in>-sin_family ?wrapper)
    (<pointer-to-sockaddr_in>-sin_family
      (<struct-sockaddr_in>-pointer ?wrapper)))
  (define-syntax <struct-sockaddr_in>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-sockaddr_in))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (sockaddr_in-pointer->sockaddr_in-wrapper
         ?constructor ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (sockaddr_in-wrapper->sockaddr_in-wrapper
         ?constructor ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (sockaddr_in-mirror->sockaddr_in-wrapper ?constructor
         ?mirror ?malloc))))
  (define (sockaddr_in-pointer->sockaddr_in-wrapper
            constructor pointer malloc)
    (constructor
      (sockaddr_in-pointer->sockaddr_in-pointer pointer
        malloc)))
  (define (sockaddr_in-wrapper->sockaddr_in-wrapper
            constructor wrapper malloc)
    (constructor
      (sockaddr_in-wrapper->sockaddr_in-pointer wrapper
        malloc)))
  (define (sockaddr_in-mirror->sockaddr_in-wrapper
            constructor mirror malloc)
    (constructor
      (sockaddr_in-mirror->sockaddr_in-pointer mirror malloc)))
  (define-class <sockaddr_in>
    (nongenerative nausicaa:posix:<sockaddr_in>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <sockaddr_in>-maker-transformer)
    (fields (mutable sin_family) (mutable sin_addr)
      (mutable sin_port)))
  (define-syntax <sockaddr_in>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (sockaddr_in-pointer->sockaddr_in-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (sockaddr_in-wrapper->sockaddr_in-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (sockaddr_in-mirror->sockaddr_in-mirror ?constructor
         ?mirror))))
  (define (sockaddr_in-pointer->sockaddr_in-mirror
            constructor (src <pointer-to-sockaddr_in>))
    (constructor src.sin_family src.sin_addr src.sin_port))
  (define (sockaddr_in-wrapper->sockaddr_in-mirror
            constructor (src <struct-sockaddr_in>))
    (constructor src.sin_family src.sin_addr src.sin_port))
  (define (sockaddr_in-mirror->sockaddr_in-mirror
            constructor (src <sockaddr_in>))
    (constructor src.sin_family src.sin_addr src.sin_port))
  (define-label <pointer-to-sockaddr_in6>
    (custom-maker <pointer-to-sockaddr_in6>-maker)
    (virtual-fields (mutable sin6_port) (mutable sin6_addr)
      (mutable sin6_family)))
  (define-inline
    (<pointer-to-sockaddr_in6>-sin6_port-set! ?pointer
      ?value)
    (pointer-c-set! @TYPEOF_SOCKADDR_IN6_SIN6_PORT@ ?pointer
      @OFFSETOF_SOCKADDR_IN6_SIN6_PORT@ ?value))
  (define-inline
    (<pointer-to-sockaddr_in6>-sin6_port ?pointer)
    (pointer-c-ref @TYPEOF_SOCKADDR_IN6_SIN6_PORT@ ?pointer
      @OFFSETOF_SOCKADDR_IN6_SIN6_PORT@))
  (define-inline
    (<pointer-to-sockaddr_in6>-sin6_addr-set! ?pointer
      ?value)
    (null-mutator ?pointer @OFFSETOF_SOCKADDR_IN6_SIN6_ADDR@
      ?value))
  (define-inline
    (<pointer-to-sockaddr_in6>-sin6_addr ?pointer)
    (null-accessor ?pointer
      @OFFSETOF_SOCKADDR_IN6_SIN6_ADDR@))
  (define-inline
    (<pointer-to-sockaddr_in6>-sin6_family-set! ?pointer
      ?value)
    (pointer-c-set! @TYPEOF_SOCKADDR_IN6_SIN6_FAMILY@
      ?pointer @OFFSETOF_SOCKADDR_IN6_SIN6_FAMILY@ ?value))
  (define-inline
    (<pointer-to-sockaddr_in6>-sin6_family ?pointer)
    (pointer-c-ref @TYPEOF_SOCKADDR_IN6_SIN6_FAMILY@
      ?pointer @OFFSETOF_SOCKADDR_IN6_SIN6_FAMILY@))
  (define-maker <pointer-to-sockaddr_in6>-maker
    %<pointer-to-sockaddr_in6>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-sockaddr_in6>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-sockaddr_in6)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (sockaddr_in6-pointer->sockaddr_in6-pointer ?pointer
         ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (sockaddr_in6-wrapper->sockaddr_in6-pointer ?wrapper
         ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (sockaddr_in6-mirror->sockaddr_in6-pointer ?mirror
         ?malloc))))
  (define (sockaddr_in6-pointer->sockaddr_in6-pointer
            (src <pointer-to-sockaddr_in6>) malloc)
    (let (((dst <pointer-to-sockaddr_in6>)
           (malloc (c-sizeof struct-sockaddr_in6))))
      (mem.memcpy dst src (c-sizeof struct-sockaddr_in6))
      dst))
  (define (sockaddr_in6-wrapper->sockaddr_in6-pointer
            (src <struct-sockaddr_in6>) malloc)
    (let (((dst <pointer-to-sockaddr_in6>)
           (malloc (c-sizeof struct-sockaddr_in6))))
      (mem.memcpy dst src (c-sizeof struct-sockaddr_in6))
      dst))
  (define (sockaddr_in6-mirror->sockaddr_in6-pointer
            (src <sockaddr_in6>) malloc)
    (let (((dst <pointer-to-sockaddr_in6>)
           (malloc (c-sizeof struct-sockaddr_in6))))
      (set! dst.sin6_family src.sin6_family)
      (set! dst.sin6_addr src.sin6_addr)
      (set! dst.sin6_port src.sin6_port)
      dst))
  (define-class <struct-sockaddr_in6>
    (nongenerative nausicaa:posix:<struct-sockaddr_in6>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer
      <struct-sockaddr_in6>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top)
            (malloc (c-sizeof struct-sockaddr_in6))))))
    (fields (immutable pointer))
    (virtual-fields (mutable sin6_port)
      (immutable sin6_addr) (mutable sin6_family)))
  (define-inline
    (<struct-sockaddr_in6>-sin6_port-set! ?wrapper ?value)
    (<pointer-to-sockaddr_in6>-sin6_port-set!
      (<struct-sockaddr_in6>-pointer ?wrapper) ?value))
  (define-inline (<struct-sockaddr_in6>-sin6_port ?wrapper)
    (<pointer-to-sockaddr_in6>-sin6_port
      (<struct-sockaddr_in6>-pointer ?wrapper)))
  (define-inline (<struct-sockaddr_in6>-sin6_addr ?wrapper)
    (<pointer-to-sockaddr_in6>-sin6_addr
      (<struct-sockaddr_in6>-pointer ?wrapper)))
  (define-inline
    (<struct-sockaddr_in6>-sin6_family-set! ?wrapper ?value)
    (<pointer-to-sockaddr_in6>-sin6_family-set!
      (<struct-sockaddr_in6>-pointer ?wrapper) ?value))
  (define-inline
    (<struct-sockaddr_in6>-sin6_family ?wrapper)
    (<pointer-to-sockaddr_in6>-sin6_family
      (<struct-sockaddr_in6>-pointer ?wrapper)))
  (define-syntax <struct-sockaddr_in6>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor
         (?malloc (c-sizeof struct-sockaddr_in6))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (sockaddr_in6-pointer->sockaddr_in6-wrapper
         ?constructor ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (sockaddr_in6-wrapper->sockaddr_in6-wrapper
         ?constructor ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (sockaddr_in6-mirror->sockaddr_in6-wrapper
         ?constructor ?mirror ?malloc))))
  (define (sockaddr_in6-pointer->sockaddr_in6-wrapper
            constructor pointer malloc)
    (constructor
      (sockaddr_in6-pointer->sockaddr_in6-pointer pointer
        malloc)))
  (define (sockaddr_in6-wrapper->sockaddr_in6-wrapper
            constructor wrapper malloc)
    (constructor
      (sockaddr_in6-wrapper->sockaddr_in6-pointer wrapper
        malloc)))
  (define (sockaddr_in6-mirror->sockaddr_in6-wrapper
            constructor mirror malloc)
    (constructor
      (sockaddr_in6-mirror->sockaddr_in6-pointer mirror
        malloc)))
  (define-class <sockaddr_in6>
    (nongenerative nausicaa:posix:<sockaddr_in6>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <sockaddr_in6>-maker-transformer)
    (fields (mutable sin6_family) (mutable sin6_addr)
      (mutable sin6_port)))
  (define-syntax <sockaddr_in6>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (sockaddr_in6-pointer->sockaddr_in6-mirror
         ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (sockaddr_in6-wrapper->sockaddr_in6-mirror
         ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (sockaddr_in6-mirror->sockaddr_in6-mirror
         ?constructor ?mirror))))
  (define (sockaddr_in6-pointer->sockaddr_in6-mirror
            constructor (src <pointer-to-sockaddr_in6>))
    (constructor src.sin6_family src.sin6_addr src.sin6_port))
  (define (sockaddr_in6-wrapper->sockaddr_in6-mirror
            constructor (src <struct-sockaddr_in6>))
    (constructor src.sin6_family src.sin6_addr src.sin6_port))
  (define (sockaddr_in6-mirror->sockaddr_in6-mirror
            constructor (src <sockaddr_in6>))
    (constructor src.sin6_family src.sin6_addr src.sin6_port))
  (define-label <pointer-to-sockaddr_un>
    (custom-maker <pointer-to-sockaddr_un>-maker)
    (virtual-fields (mutable sun_path) (mutable sun_family)))
  (define-inline
    (<pointer-to-sockaddr_un>-sun_path-set! ?pointer ?value)
    (null-mutator ?pointer @OFFSETOF_SOCKADDR_UN_SUN_PATH@
      ?value))
  (define-inline
    (<pointer-to-sockaddr_un>-sun_path ?pointer)
    (null-accessor ?pointer @OFFSETOF_SOCKADDR_UN_SUN_PATH@))
  (define-inline
    (<pointer-to-sockaddr_un>-sun_family-set! ?pointer
      ?value)
    (pointer-c-set! @TYPEOF_SOCKADDR_UN_SUN_FAMILY@ ?pointer
      @OFFSETOF_SOCKADDR_UN_SUN_FAMILY@ ?value))
  (define-inline
    (<pointer-to-sockaddr_un>-sun_family ?pointer)
    (pointer-c-ref @TYPEOF_SOCKADDR_UN_SUN_FAMILY@ ?pointer
      @OFFSETOF_SOCKADDR_UN_SUN_FAMILY@))
  (define-maker <pointer-to-sockaddr_un>-maker
    %<pointer-to-sockaddr_un>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-sockaddr_un>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-sockaddr_un)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (sockaddr_un-pointer->sockaddr_un-pointer ?pointer
         ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (sockaddr_un-wrapper->sockaddr_un-pointer ?wrapper
         ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (sockaddr_un-mirror->sockaddr_un-pointer ?mirror
         ?malloc))))
  (define (sockaddr_un-pointer->sockaddr_un-pointer
            (src <pointer-to-sockaddr_un>) malloc)
    (let (((dst <pointer-to-sockaddr_un>)
           (malloc (c-sizeof struct-sockaddr_un))))
      (mem.memcpy dst src (c-sizeof struct-sockaddr_un))
      dst))
  (define (sockaddr_un-wrapper->sockaddr_un-pointer
            (src <struct-sockaddr_un>) malloc)
    (let (((dst <pointer-to-sockaddr_un>)
           (malloc (c-sizeof struct-sockaddr_un))))
      (mem.memcpy dst src (c-sizeof struct-sockaddr_un))
      dst))
  (define (sockaddr_un-mirror->sockaddr_un-pointer
            (src <sockaddr_un>) malloc)
    (let (((dst <pointer-to-sockaddr_un>)
           (malloc (c-sizeof struct-sockaddr_un))))
      (set! dst.sun_family src.sun_family)
      (set! dst.sun_path src.sun_path)
      dst))
  (define-class <struct-sockaddr_un>
    (nongenerative nausicaa:posix:<struct-sockaddr_un>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer
      <struct-sockaddr_un>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-sockaddr_un))))))
    (fields (immutable pointer))
    (virtual-fields (immutable sun_path)
      (mutable sun_family)))
  (define-inline (<struct-sockaddr_un>-sun_path ?wrapper)
    (<pointer-to-sockaddr_un>-sun_path
      (<struct-sockaddr_un>-pointer ?wrapper)))
  (define-inline
    (<struct-sockaddr_un>-sun_family-set! ?wrapper ?value)
    (<pointer-to-sockaddr_un>-sun_family-set!
      (<struct-sockaddr_un>-pointer ?wrapper) ?value))
  (define-inline (<struct-sockaddr_un>-sun_family ?wrapper)
    (<pointer-to-sockaddr_un>-sun_family
      (<struct-sockaddr_un>-pointer ?wrapper)))
  (define-syntax <struct-sockaddr_un>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-sockaddr_un))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (sockaddr_un-pointer->sockaddr_un-wrapper
         ?constructor ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (sockaddr_un-wrapper->sockaddr_un-wrapper
         ?constructor ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (sockaddr_un-mirror->sockaddr_un-wrapper ?constructor
         ?mirror ?malloc))))
  (define (sockaddr_un-pointer->sockaddr_un-wrapper
            constructor pointer malloc)
    (constructor
      (sockaddr_un-pointer->sockaddr_un-pointer pointer
        malloc)))
  (define (sockaddr_un-wrapper->sockaddr_un-wrapper
            constructor wrapper malloc)
    (constructor
      (sockaddr_un-wrapper->sockaddr_un-pointer wrapper
        malloc)))
  (define (sockaddr_un-mirror->sockaddr_un-wrapper
            constructor mirror malloc)
    (constructor
      (sockaddr_un-mirror->sockaddr_un-pointer mirror malloc)))
  (define-class <sockaddr_un>
    (nongenerative nausicaa:posix:<sockaddr_un>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <sockaddr_un>-maker-transformer)
    (fields (mutable sun_family) (mutable sun_path)))
  (define-syntax <sockaddr_un>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (sockaddr_un-pointer->sockaddr_un-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (sockaddr_un-wrapper->sockaddr_un-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (sockaddr_un-mirror->sockaddr_un-mirror ?constructor
         ?mirror))))
  (define (sockaddr_un-pointer->sockaddr_un-mirror
            constructor (src <pointer-to-sockaddr_un>))
    (constructor src.sun_family src.sun_path))
  (define (sockaddr_un-wrapper->sockaddr_un-mirror
            constructor (src <struct-sockaddr_un>))
    (constructor src.sun_family src.sun_path))
  (define (sockaddr_un-mirror->sockaddr_un-mirror
            constructor (src <sockaddr_un>))
    (constructor src.sun_family src.sun_path))
  (define-label <pointer-to-in_addr>
    (custom-maker <pointer-to-in_addr>-maker)
    (virtual-fields (mutable s_addr)))
  (define-inline
    (<pointer-to-in_addr>-s_addr-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_IN_ADDR_S_ADDR@ ?pointer
      @OFFSETOF_IN_ADDR_S_ADDR@ ?value))
  (define-inline (<pointer-to-in_addr>-s_addr ?pointer)
    (pointer-c-ref @TYPEOF_IN_ADDR_S_ADDR@ ?pointer
      @OFFSETOF_IN_ADDR_S_ADDR@))
  (define-maker <pointer-to-in_addr>-maker
    %<pointer-to-in_addr>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-in_addr>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-in_addr)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (in_addr-pointer->in_addr-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (in_addr-wrapper->in_addr-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (in_addr-mirror->in_addr-pointer ?mirror ?malloc))))
  (define (in_addr-pointer->in_addr-pointer
            (src <pointer-to-in_addr>) malloc)
    (let (((dst <pointer-to-in_addr>)
           (malloc (c-sizeof struct-in_addr))))
      (mem.memcpy dst src (c-sizeof struct-in_addr))
      dst))
  (define (in_addr-wrapper->in_addr-pointer
            (src <struct-in_addr>) malloc)
    (let (((dst <pointer-to-in_addr>)
           (malloc (c-sizeof struct-in_addr))))
      (mem.memcpy dst src (c-sizeof struct-in_addr))
      dst))
  (define (in_addr-mirror->in_addr-pointer (src <in_addr>)
            malloc)
    (let (((dst <pointer-to-in_addr>)
           (malloc (c-sizeof struct-in_addr))))
      (set! dst.s_addr src.s_addr)
      dst))
  (define-class <struct-in_addr>
    (nongenerative nausicaa:posix:<struct-in_addr>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-in_addr>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-in_addr))))))
    (fields (immutable pointer))
    (virtual-fields (mutable s_addr)))
  (define-inline
    (<struct-in_addr>-s_addr-set! ?wrapper ?value)
    (<pointer-to-in_addr>-s_addr-set!
      (<struct-in_addr>-pointer ?wrapper) ?value))
  (define-inline (<struct-in_addr>-s_addr ?wrapper)
    (<pointer-to-in_addr>-s_addr
      (<struct-in_addr>-pointer ?wrapper)))
  (define-syntax <struct-in_addr>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-in_addr))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (in_addr-pointer->in_addr-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (in_addr-wrapper->in_addr-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (in_addr-mirror->in_addr-wrapper ?constructor ?mirror
         ?malloc))))
  (define (in_addr-pointer->in_addr-wrapper constructor
            pointer malloc)
    (constructor
      (in_addr-pointer->in_addr-pointer pointer malloc)))
  (define (in_addr-wrapper->in_addr-wrapper constructor
            wrapper malloc)
    (constructor
      (in_addr-wrapper->in_addr-pointer wrapper malloc)))
  (define (in_addr-mirror->in_addr-wrapper constructor
            mirror malloc)
    (constructor
      (in_addr-mirror->in_addr-pointer mirror malloc)))
  (define-class <in_addr>
    (nongenerative nausicaa:posix:<in_addr>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <in_addr>-maker-transformer)
    (fields (mutable s_addr)))
  (define-syntax <in_addr>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (in_addr-pointer->in_addr-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (in_addr-wrapper->in_addr-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (in_addr-mirror->in_addr-mirror ?constructor ?mirror))))
  (define (in_addr-pointer->in_addr-mirror constructor
            (src <pointer-to-in_addr>))
    (constructor src.s_addr))
  (define (in_addr-wrapper->in_addr-mirror constructor
            (src <struct-in_addr>))
    (constructor src.s_addr))
  (define (in_addr-mirror->in_addr-mirror constructor
            (src <in_addr>))
    (constructor src.s_addr))
  (define-label <pointer-to-if_nameindex>
    (custom-maker <pointer-to-if_nameindex>-maker)
    (virtual-fields (mutable if_name) (mutable if_index)))
  (define-inline
    (<pointer-to-if_nameindex>-if_name-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_IF_NAMEINDEX_IF_NAME@ ?pointer
      @OFFSETOF_IF_NAMEINDEX_IF_NAME@ ?value))
  (define-inline
    (<pointer-to-if_nameindex>-if_name ?pointer)
    (pointer-c-ref @TYPEOF_IF_NAMEINDEX_IF_NAME@ ?pointer
      @OFFSETOF_IF_NAMEINDEX_IF_NAME@))
  (define-inline
    (<pointer-to-if_nameindex>-if_index-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_IF_NAMEINDEX_IF_INDEX@ ?pointer
      @OFFSETOF_IF_NAMEINDEX_IF_INDEX@ ?value))
  (define-inline
    (<pointer-to-if_nameindex>-if_index ?pointer)
    (pointer-c-ref @TYPEOF_IF_NAMEINDEX_IF_INDEX@ ?pointer
      @OFFSETOF_IF_NAMEINDEX_IF_INDEX@))
  (define-maker <pointer-to-if_nameindex>-maker
    %<pointer-to-if_nameindex>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-if_nameindex>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-if_nameindex)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (if_nameindex-pointer->if_nameindex-pointer ?pointer
         ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (if_nameindex-wrapper->if_nameindex-pointer ?wrapper
         ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (if_nameindex-mirror->if_nameindex-pointer ?mirror
         ?malloc))))
  (define (if_nameindex-pointer->if_nameindex-pointer
            (src <pointer-to-if_nameindex>) malloc)
    (let (((dst <pointer-to-if_nameindex>)
           (malloc (c-sizeof struct-if_nameindex))))
      (mem.memcpy dst src (c-sizeof struct-if_nameindex))
      dst))
  (define (if_nameindex-wrapper->if_nameindex-pointer
            (src <struct-if_nameindex>) malloc)
    (let (((dst <pointer-to-if_nameindex>)
           (malloc (c-sizeof struct-if_nameindex))))
      (mem.memcpy dst src (c-sizeof struct-if_nameindex))
      dst))
  (define (if_nameindex-mirror->if_nameindex-pointer
            (src <if_nameindex>) malloc)
    (let (((dst <pointer-to-if_nameindex>)
           (malloc (c-sizeof struct-if_nameindex))))
      (set! dst.if_index src.if_index)
      (set! dst.if_name src.if_name)
      dst))
  (define-class <struct-if_nameindex>
    (nongenerative nausicaa:posix:<struct-if_nameindex>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer
      <struct-if_nameindex>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top)
            (malloc (c-sizeof struct-if_nameindex))))))
    (fields (immutable pointer))
    (virtual-fields (mutable if_name) (mutable if_index)))
  (define-inline
    (<struct-if_nameindex>-if_name-set! ?wrapper ?value)
    (<pointer-to-if_nameindex>-if_name-set!
      (<struct-if_nameindex>-pointer ?wrapper) ?value))
  (define-inline (<struct-if_nameindex>-if_name ?wrapper)
    (<pointer-to-if_nameindex>-if_name
      (<struct-if_nameindex>-pointer ?wrapper)))
  (define-inline
    (<struct-if_nameindex>-if_index-set! ?wrapper ?value)
    (<pointer-to-if_nameindex>-if_index-set!
      (<struct-if_nameindex>-pointer ?wrapper) ?value))
  (define-inline (<struct-if_nameindex>-if_index ?wrapper)
    (<pointer-to-if_nameindex>-if_index
      (<struct-if_nameindex>-pointer ?wrapper)))
  (define-syntax <struct-if_nameindex>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor
         (?malloc (c-sizeof struct-if_nameindex))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (if_nameindex-pointer->if_nameindex-wrapper
         ?constructor ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (if_nameindex-wrapper->if_nameindex-wrapper
         ?constructor ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (if_nameindex-mirror->if_nameindex-wrapper
         ?constructor ?mirror ?malloc))))
  (define (if_nameindex-pointer->if_nameindex-wrapper
            constructor pointer malloc)
    (constructor
      (if_nameindex-pointer->if_nameindex-pointer pointer
        malloc)))
  (define (if_nameindex-wrapper->if_nameindex-wrapper
            constructor wrapper malloc)
    (constructor
      (if_nameindex-wrapper->if_nameindex-pointer wrapper
        malloc)))
  (define (if_nameindex-mirror->if_nameindex-wrapper
            constructor mirror malloc)
    (constructor
      (if_nameindex-mirror->if_nameindex-pointer mirror
        malloc)))
  (define-class <if_nameindex>
    (nongenerative nausicaa:posix:<if_nameindex>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <if_nameindex>-maker-transformer)
    (fields (mutable if_index) (mutable if_name)))
  (define-syntax <if_nameindex>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (if_nameindex-pointer->if_nameindex-mirror
         ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (if_nameindex-wrapper->if_nameindex-mirror
         ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (if_nameindex-mirror->if_nameindex-mirror
         ?constructor ?mirror))))
  (define (if_nameindex-pointer->if_nameindex-mirror
            constructor (src <pointer-to-if_nameindex>))
    (constructor src.if_index src.if_name))
  (define (if_nameindex-wrapper->if_nameindex-mirror
            constructor (src <struct-if_nameindex>))
    (constructor src.if_index src.if_name))
  (define (if_nameindex-mirror->if_nameindex-mirror
            constructor (src <if_nameindex>))
    (constructor src.if_index src.if_name))
  (define-label <pointer-to-netent>
    (custom-maker <pointer-to-netent>-maker)
    (virtual-fields (mutable n_net) (mutable n_addrtype)
      (mutable n_aliases) (mutable n_name)))
  (define-inline
    (<pointer-to-netent>-n_net-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_NETENT_N_NET@ ?pointer
      @OFFSETOF_NETENT_N_NET@ ?value))
  (define-inline (<pointer-to-netent>-n_net ?pointer)
    (pointer-c-ref @TYPEOF_NETENT_N_NET@ ?pointer
      @OFFSETOF_NETENT_N_NET@))
  (define-inline
    (<pointer-to-netent>-n_addrtype-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_NETENT_N_ADDRTYPE@ ?pointer
      @OFFSETOF_NETENT_N_ADDRTYPE@ ?value))
  (define-inline (<pointer-to-netent>-n_addrtype ?pointer)
    (pointer-c-ref @TYPEOF_NETENT_N_ADDRTYPE@ ?pointer
      @OFFSETOF_NETENT_N_ADDRTYPE@))
  (define-inline
    (<pointer-to-netent>-n_aliases-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_NETENT_N_ALIASES@ ?pointer
      @OFFSETOF_NETENT_N_ALIASES@ ?value))
  (define-inline (<pointer-to-netent>-n_aliases ?pointer)
    (pointer-c-ref @TYPEOF_NETENT_N_ALIASES@ ?pointer
      @OFFSETOF_NETENT_N_ALIASES@))
  (define-inline
    (<pointer-to-netent>-n_name-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_NETENT_N_NAME@ ?pointer
      @OFFSETOF_NETENT_N_NAME@ ?value))
  (define-inline (<pointer-to-netent>-n_name ?pointer)
    (pointer-c-ref @TYPEOF_NETENT_N_NAME@ ?pointer
      @OFFSETOF_NETENT_N_NAME@))
  (define-maker <pointer-to-netent>-maker
    %<pointer-to-netent>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-netent>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-netent)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (netent-pointer->netent-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (netent-wrapper->netent-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (netent-mirror->netent-pointer ?mirror ?malloc))))
  (define (netent-pointer->netent-pointer
            (src <pointer-to-netent>) malloc)
    (let (((dst <pointer-to-netent>)
           (malloc (c-sizeof struct-netent))))
      (mem.memcpy dst src (c-sizeof struct-netent))
      dst))
  (define (netent-wrapper->netent-pointer
            (src <struct-netent>) malloc)
    (let (((dst <pointer-to-netent>)
           (malloc (c-sizeof struct-netent))))
      (mem.memcpy dst src (c-sizeof struct-netent))
      dst))
  (define (netent-mirror->netent-pointer (src <netent>)
            malloc)
    (let (((dst <pointer-to-netent>)
           (malloc (c-sizeof struct-netent))))
      (set! dst.n_name src.n_name)
      (set! dst.n_aliases src.n_aliases)
      (set! dst.n_addrtype src.n_addrtype)
      (set! dst.n_net src.n_net)
      dst))
  (define-class <struct-netent>
    (nongenerative nausicaa:posix:<struct-netent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-netent>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-netent))))))
    (fields (immutable pointer))
    (virtual-fields (mutable n_net) (mutable n_addrtype)
      (mutable n_aliases) (mutable n_name)))
  (define-inline
    (<struct-netent>-n_net-set! ?wrapper ?value)
    (<pointer-to-netent>-n_net-set!
      (<struct-netent>-pointer ?wrapper) ?value))
  (define-inline (<struct-netent>-n_net ?wrapper)
    (<pointer-to-netent>-n_net
      (<struct-netent>-pointer ?wrapper)))
  (define-inline
    (<struct-netent>-n_addrtype-set! ?wrapper ?value)
    (<pointer-to-netent>-n_addrtype-set!
      (<struct-netent>-pointer ?wrapper) ?value))
  (define-inline (<struct-netent>-n_addrtype ?wrapper)
    (<pointer-to-netent>-n_addrtype
      (<struct-netent>-pointer ?wrapper)))
  (define-inline
    (<struct-netent>-n_aliases-set! ?wrapper ?value)
    (<pointer-to-netent>-n_aliases-set!
      (<struct-netent>-pointer ?wrapper) ?value))
  (define-inline (<struct-netent>-n_aliases ?wrapper)
    (<pointer-to-netent>-n_aliases
      (<struct-netent>-pointer ?wrapper)))
  (define-inline
    (<struct-netent>-n_name-set! ?wrapper ?value)
    (<pointer-to-netent>-n_name-set!
      (<struct-netent>-pointer ?wrapper) ?value))
  (define-inline (<struct-netent>-n_name ?wrapper)
    (<pointer-to-netent>-n_name
      (<struct-netent>-pointer ?wrapper)))
  (define-syntax <struct-netent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-netent))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (netent-pointer->netent-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (netent-wrapper->netent-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (netent-mirror->netent-wrapper ?constructor ?mirror
         ?malloc))))
  (define (netent-pointer->netent-wrapper constructor
            pointer malloc)
    (constructor
      (netent-pointer->netent-pointer pointer malloc)))
  (define (netent-wrapper->netent-wrapper constructor
            wrapper malloc)
    (constructor
      (netent-wrapper->netent-pointer wrapper malloc)))
  (define (netent-mirror->netent-wrapper constructor mirror
            malloc)
    (constructor
      (netent-mirror->netent-pointer mirror malloc)))
  (define-class <netent>
    (nongenerative nausicaa:posix:<netent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <netent>-maker-transformer)
    (fields (mutable n_name) (mutable n_aliases)
      (mutable n_addrtype) (mutable n_net)))
  (define-syntax <netent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (netent-pointer->netent-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (netent-wrapper->netent-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (netent-mirror->netent-mirror ?constructor ?mirror))))
  (define (netent-pointer->netent-mirror constructor
            (src <pointer-to-netent>))
    (constructor src.n_name src.n_aliases src.n_addrtype
      src.n_net))
  (define (netent-wrapper->netent-mirror constructor
            (src <struct-netent>))
    (constructor src.n_name src.n_aliases src.n_addrtype
      src.n_net))
  (define (netent-mirror->netent-mirror constructor
            (src <netent>))
    (constructor src.n_name src.n_aliases src.n_addrtype
      src.n_net))
  (define-label <pointer-to-linger>
    (custom-maker <pointer-to-linger>-maker)
    (virtual-fields (mutable l_linger) (mutable l_onoff)))
  (define-inline
    (<pointer-to-linger>-l_linger-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_LINGER_L_LINGER@ ?pointer
      @OFFSETOF_LINGER_L_LINGER@ ?value))
  (define-inline (<pointer-to-linger>-l_linger ?pointer)
    (pointer-c-ref @TYPEOF_LINGER_L_LINGER@ ?pointer
      @OFFSETOF_LINGER_L_LINGER@))
  (define-inline
    (<pointer-to-linger>-l_onoff-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_LINGER_L_ONOFF@ ?pointer
      @OFFSETOF_LINGER_L_ONOFF@ ?value))
  (define-inline (<pointer-to-linger>-l_onoff ?pointer)
    (pointer-c-ref @TYPEOF_LINGER_L_ONOFF@ ?pointer
      @OFFSETOF_LINGER_L_ONOFF@))
  (define-maker <pointer-to-linger>-maker
    %<pointer-to-linger>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-linger>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-linger)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (linger-pointer->linger-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (linger-wrapper->linger-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (linger-mirror->linger-pointer ?mirror ?malloc))))
  (define (linger-pointer->linger-pointer
            (src <pointer-to-linger>) malloc)
    (let (((dst <pointer-to-linger>)
           (malloc (c-sizeof struct-linger))))
      (mem.memcpy dst src (c-sizeof struct-linger))
      dst))
  (define (linger-wrapper->linger-pointer
            (src <struct-linger>) malloc)
    (let (((dst <pointer-to-linger>)
           (malloc (c-sizeof struct-linger))))
      (mem.memcpy dst src (c-sizeof struct-linger))
      dst))
  (define (linger-mirror->linger-pointer (src <linger>)
            malloc)
    (let (((dst <pointer-to-linger>)
           (malloc (c-sizeof struct-linger))))
      (set! dst.l_onoff src.l_onoff)
      (set! dst.l_linger src.l_linger)
      dst))
  (define-class <struct-linger>
    (nongenerative nausicaa:posix:<struct-linger>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-linger>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-linger))))))
    (fields (immutable pointer))
    (virtual-fields (mutable l_linger) (mutable l_onoff)))
  (define-inline
    (<struct-linger>-l_linger-set! ?wrapper ?value)
    (<pointer-to-linger>-l_linger-set!
      (<struct-linger>-pointer ?wrapper) ?value))
  (define-inline (<struct-linger>-l_linger ?wrapper)
    (<pointer-to-linger>-l_linger
      (<struct-linger>-pointer ?wrapper)))
  (define-inline
    (<struct-linger>-l_onoff-set! ?wrapper ?value)
    (<pointer-to-linger>-l_onoff-set!
      (<struct-linger>-pointer ?wrapper) ?value))
  (define-inline (<struct-linger>-l_onoff ?wrapper)
    (<pointer-to-linger>-l_onoff
      (<struct-linger>-pointer ?wrapper)))
  (define-syntax <struct-linger>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-linger))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (linger-pointer->linger-wrapper ?constructor ?pointer
         ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (linger-wrapper->linger-wrapper ?constructor ?wrapper
         ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (linger-mirror->linger-wrapper ?constructor ?mirror
         ?malloc))))
  (define (linger-pointer->linger-wrapper constructor
            pointer malloc)
    (constructor
      (linger-pointer->linger-pointer pointer malloc)))
  (define (linger-wrapper->linger-wrapper constructor
            wrapper malloc)
    (constructor
      (linger-wrapper->linger-pointer wrapper malloc)))
  (define (linger-mirror->linger-wrapper constructor mirror
            malloc)
    (constructor
      (linger-mirror->linger-pointer mirror malloc)))
  (define-class <linger>
    (nongenerative nausicaa:posix:<linger>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <linger>-maker-transformer)
    (fields (mutable l_onoff) (mutable l_linger)))
  (define-syntax <linger>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (linger-pointer->linger-mirror ?constructor ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (linger-wrapper->linger-mirror ?constructor ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (linger-mirror->linger-mirror ?constructor ?mirror))))
  (define (linger-pointer->linger-mirror constructor
            (src <pointer-to-linger>))
    (constructor src.l_onoff src.l_linger))
  (define (linger-wrapper->linger-mirror constructor
            (src <struct-linger>))
    (constructor src.l_onoff src.l_linger))
  (define (linger-mirror->linger-mirror constructor
            (src <linger>))
    (constructor src.l_onoff src.l_linger))
  (define-label <pointer-to-hostent>
    (custom-maker <pointer-to-hostent>-maker)
    (virtual-fields (mutable h_addr) (mutable h_addr_list)
      (mutable h_length) (mutable h_addrtype)
      (mutable h_aliases) (mutable h_name)))
  (define-inline
    (<pointer-to-hostent>-h_addr-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_HOSTENT_H_ADDR@ ?pointer
      @OFFSETOF_HOSTENT_H_ADDR@ ?value))
  (define-inline (<pointer-to-hostent>-h_addr ?pointer)
    (pointer-c-ref @TYPEOF_HOSTENT_H_ADDR@ ?pointer
      @OFFSETOF_HOSTENT_H_ADDR@))
  (define-inline
    (<pointer-to-hostent>-h_addr_list-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_HOSTENT_H_ADDR_LIST@ ?pointer
      @OFFSETOF_HOSTENT_H_ADDR_LIST@ ?value))
  (define-inline (<pointer-to-hostent>-h_addr_list ?pointer)
    (pointer-c-ref @TYPEOF_HOSTENT_H_ADDR_LIST@ ?pointer
      @OFFSETOF_HOSTENT_H_ADDR_LIST@))
  (define-inline
    (<pointer-to-hostent>-h_length-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_HOSTENT_H_LENGTH@ ?pointer
      @OFFSETOF_HOSTENT_H_LENGTH@ ?value))
  (define-inline (<pointer-to-hostent>-h_length ?pointer)
    (pointer-c-ref @TYPEOF_HOSTENT_H_LENGTH@ ?pointer
      @OFFSETOF_HOSTENT_H_LENGTH@))
  (define-inline
    (<pointer-to-hostent>-h_addrtype-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_HOSTENT_H_ADDRTYPE@ ?pointer
      @OFFSETOF_HOSTENT_H_ADDRTYPE@ ?value))
  (define-inline (<pointer-to-hostent>-h_addrtype ?pointer)
    (pointer-c-ref @TYPEOF_HOSTENT_H_ADDRTYPE@ ?pointer
      @OFFSETOF_HOSTENT_H_ADDRTYPE@))
  (define-inline
    (<pointer-to-hostent>-h_aliases-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_HOSTENT_H_ALIASES@ ?pointer
      @OFFSETOF_HOSTENT_H_ALIASES@ ?value))
  (define-inline (<pointer-to-hostent>-h_aliases ?pointer)
    (pointer-c-ref @TYPEOF_HOSTENT_H_ALIASES@ ?pointer
      @OFFSETOF_HOSTENT_H_ALIASES@))
  (define-inline
    (<pointer-to-hostent>-h_name-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_HOSTENT_H_NAME@ ?pointer
      @OFFSETOF_HOSTENT_H_NAME@ ?value))
  (define-inline (<pointer-to-hostent>-h_name ?pointer)
    (pointer-c-ref @TYPEOF_HOSTENT_H_NAME@ ?pointer
      @OFFSETOF_HOSTENT_H_NAME@))
  (define-maker <pointer-to-hostent>-maker
    %<pointer-to-hostent>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-hostent>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-hostent)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (hostent-pointer->hostent-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (hostent-wrapper->hostent-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (hostent-mirror->hostent-pointer ?mirror ?malloc))))
  (define (hostent-pointer->hostent-pointer
            (src <pointer-to-hostent>) malloc)
    (let (((dst <pointer-to-hostent>)
           (malloc (c-sizeof struct-hostent))))
      (mem.memcpy dst src (c-sizeof struct-hostent))
      dst))
  (define (hostent-wrapper->hostent-pointer
            (src <struct-hostent>) malloc)
    (let (((dst <pointer-to-hostent>)
           (malloc (c-sizeof struct-hostent))))
      (mem.memcpy dst src (c-sizeof struct-hostent))
      dst))
  (define (hostent-mirror->hostent-pointer (src <hostent>)
            malloc)
    (let (((dst <pointer-to-hostent>)
           (malloc (c-sizeof struct-hostent))))
      (set! dst.h_name src.h_name)
      (set! dst.h_aliases src.h_aliases)
      (set! dst.h_addrtype src.h_addrtype)
      (set! dst.h_length src.h_length)
      (set! dst.h_addr_list src.h_addr_list)
      (set! dst.h_addr src.h_addr)
      dst))
  (define-class <struct-hostent>
    (nongenerative nausicaa:posix:<struct-hostent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-hostent>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-hostent))))))
    (fields (immutable pointer))
    (virtual-fields (mutable h_addr) (mutable h_addr_list)
      (mutable h_length) (mutable h_addrtype)
      (mutable h_aliases) (mutable h_name)))
  (define-inline
    (<struct-hostent>-h_addr-set! ?wrapper ?value)
    (<pointer-to-hostent>-h_addr-set!
      (<struct-hostent>-pointer ?wrapper) ?value))
  (define-inline (<struct-hostent>-h_addr ?wrapper)
    (<pointer-to-hostent>-h_addr
      (<struct-hostent>-pointer ?wrapper)))
  (define-inline
    (<struct-hostent>-h_addr_list-set! ?wrapper ?value)
    (<pointer-to-hostent>-h_addr_list-set!
      (<struct-hostent>-pointer ?wrapper) ?value))
  (define-inline (<struct-hostent>-h_addr_list ?wrapper)
    (<pointer-to-hostent>-h_addr_list
      (<struct-hostent>-pointer ?wrapper)))
  (define-inline
    (<struct-hostent>-h_length-set! ?wrapper ?value)
    (<pointer-to-hostent>-h_length-set!
      (<struct-hostent>-pointer ?wrapper) ?value))
  (define-inline (<struct-hostent>-h_length ?wrapper)
    (<pointer-to-hostent>-h_length
      (<struct-hostent>-pointer ?wrapper)))
  (define-inline
    (<struct-hostent>-h_addrtype-set! ?wrapper ?value)
    (<pointer-to-hostent>-h_addrtype-set!
      (<struct-hostent>-pointer ?wrapper) ?value))
  (define-inline (<struct-hostent>-h_addrtype ?wrapper)
    (<pointer-to-hostent>-h_addrtype
      (<struct-hostent>-pointer ?wrapper)))
  (define-inline
    (<struct-hostent>-h_aliases-set! ?wrapper ?value)
    (<pointer-to-hostent>-h_aliases-set!
      (<struct-hostent>-pointer ?wrapper) ?value))
  (define-inline (<struct-hostent>-h_aliases ?wrapper)
    (<pointer-to-hostent>-h_aliases
      (<struct-hostent>-pointer ?wrapper)))
  (define-inline
    (<struct-hostent>-h_name-set! ?wrapper ?value)
    (<pointer-to-hostent>-h_name-set!
      (<struct-hostent>-pointer ?wrapper) ?value))
  (define-inline (<struct-hostent>-h_name ?wrapper)
    (<pointer-to-hostent>-h_name
      (<struct-hostent>-pointer ?wrapper)))
  (define-syntax <struct-hostent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-hostent))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (hostent-pointer->hostent-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (hostent-wrapper->hostent-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (hostent-mirror->hostent-wrapper ?constructor ?mirror
         ?malloc))))
  (define (hostent-pointer->hostent-wrapper constructor
            pointer malloc)
    (constructor
      (hostent-pointer->hostent-pointer pointer malloc)))
  (define (hostent-wrapper->hostent-wrapper constructor
            wrapper malloc)
    (constructor
      (hostent-wrapper->hostent-pointer wrapper malloc)))
  (define (hostent-mirror->hostent-wrapper constructor
            mirror malloc)
    (constructor
      (hostent-mirror->hostent-pointer mirror malloc)))
  (define-class <hostent>
    (nongenerative nausicaa:posix:<hostent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <hostent>-maker-transformer)
    (fields (mutable h_name) (mutable h_aliases)
      (mutable h_addrtype) (mutable h_length)
      (mutable h_addr_list) (mutable h_addr)))
  (define-syntax <hostent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (hostent-pointer->hostent-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (hostent-wrapper->hostent-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (hostent-mirror->hostent-mirror ?constructor ?mirror))))
  (define (hostent-pointer->hostent-mirror constructor
            (src <pointer-to-hostent>))
    (constructor src.h_name src.h_aliases src.h_addrtype
      src.h_length src.h_addr_list src.h_addr))
  (define (hostent-wrapper->hostent-mirror constructor
            (src <struct-hostent>))
    (constructor src.h_name src.h_aliases src.h_addrtype
      src.h_length src.h_addr_list src.h_addr))
  (define (hostent-mirror->hostent-mirror constructor
            (src <hostent>))
    (constructor src.h_name src.h_aliases src.h_addrtype
      src.h_length src.h_addr_list src.h_addr))
  (define-label <pointer-to-protoent>
    (custom-maker <pointer-to-protoent>-maker)
    (virtual-fields (mutable p_proto) (mutable p_aliases)
      (mutable p_name)))
  (define-inline
    (<pointer-to-protoent>-p_proto-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_PROTOENT_P_PROTO@ ?pointer
      @OFFSETOF_PROTOENT_P_PROTO@ ?value))
  (define-inline (<pointer-to-protoent>-p_proto ?pointer)
    (pointer-c-ref @TYPEOF_PROTOENT_P_PROTO@ ?pointer
      @OFFSETOF_PROTOENT_P_PROTO@))
  (define-inline
    (<pointer-to-protoent>-p_aliases-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_PROTOENT_P_ALIASES@ ?pointer
      @OFFSETOF_PROTOENT_P_ALIASES@ ?value))
  (define-inline (<pointer-to-protoent>-p_aliases ?pointer)
    (pointer-c-ref @TYPEOF_PROTOENT_P_ALIASES@ ?pointer
      @OFFSETOF_PROTOENT_P_ALIASES@))
  (define-inline
    (<pointer-to-protoent>-p_name-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_PROTOENT_P_NAME@ ?pointer
      @OFFSETOF_PROTOENT_P_NAME@ ?value))
  (define-inline (<pointer-to-protoent>-p_name ?pointer)
    (pointer-c-ref @TYPEOF_PROTOENT_P_NAME@ ?pointer
      @OFFSETOF_PROTOENT_P_NAME@))
  (define-maker <pointer-to-protoent>-maker
    %<pointer-to-protoent>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-protoent>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-protoent)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (protoent-pointer->protoent-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (protoent-wrapper->protoent-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (protoent-mirror->protoent-pointer ?mirror ?malloc))))
  (define (protoent-pointer->protoent-pointer
            (src <pointer-to-protoent>) malloc)
    (let (((dst <pointer-to-protoent>)
           (malloc (c-sizeof struct-protoent))))
      (mem.memcpy dst src (c-sizeof struct-protoent))
      dst))
  (define (protoent-wrapper->protoent-pointer
            (src <struct-protoent>) malloc)
    (let (((dst <pointer-to-protoent>)
           (malloc (c-sizeof struct-protoent))))
      (mem.memcpy dst src (c-sizeof struct-protoent))
      dst))
  (define (protoent-mirror->protoent-pointer
            (src <protoent>) malloc)
    (let (((dst <pointer-to-protoent>)
           (malloc (c-sizeof struct-protoent))))
      (set! dst.p_name src.p_name)
      (set! dst.p_aliases src.p_aliases)
      (set! dst.p_proto src.p_proto)
      dst))
  (define-class <struct-protoent>
    (nongenerative nausicaa:posix:<struct-protoent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-protoent>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-protoent))))))
    (fields (immutable pointer))
    (virtual-fields (mutable p_proto) (mutable p_aliases)
      (mutable p_name)))
  (define-inline
    (<struct-protoent>-p_proto-set! ?wrapper ?value)
    (<pointer-to-protoent>-p_proto-set!
      (<struct-protoent>-pointer ?wrapper) ?value))
  (define-inline (<struct-protoent>-p_proto ?wrapper)
    (<pointer-to-protoent>-p_proto
      (<struct-protoent>-pointer ?wrapper)))
  (define-inline
    (<struct-protoent>-p_aliases-set! ?wrapper ?value)
    (<pointer-to-protoent>-p_aliases-set!
      (<struct-protoent>-pointer ?wrapper) ?value))
  (define-inline (<struct-protoent>-p_aliases ?wrapper)
    (<pointer-to-protoent>-p_aliases
      (<struct-protoent>-pointer ?wrapper)))
  (define-inline
    (<struct-protoent>-p_name-set! ?wrapper ?value)
    (<pointer-to-protoent>-p_name-set!
      (<struct-protoent>-pointer ?wrapper) ?value))
  (define-inline (<struct-protoent>-p_name ?wrapper)
    (<pointer-to-protoent>-p_name
      (<struct-protoent>-pointer ?wrapper)))
  (define-syntax <struct-protoent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-protoent))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (protoent-pointer->protoent-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (protoent-wrapper->protoent-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (protoent-mirror->protoent-wrapper ?constructor
         ?mirror ?malloc))))
  (define (protoent-pointer->protoent-wrapper constructor
            pointer malloc)
    (constructor
      (protoent-pointer->protoent-pointer pointer malloc)))
  (define (protoent-wrapper->protoent-wrapper constructor
            wrapper malloc)
    (constructor
      (protoent-wrapper->protoent-pointer wrapper malloc)))
  (define (protoent-mirror->protoent-wrapper constructor
            mirror malloc)
    (constructor
      (protoent-mirror->protoent-pointer mirror malloc)))
  (define-class <protoent>
    (nongenerative nausicaa:posix:<protoent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <protoent>-maker-transformer)
    (fields (mutable p_name) (mutable p_aliases)
      (mutable p_proto)))
  (define-syntax <protoent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (protoent-pointer->protoent-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (protoent-wrapper->protoent-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (protoent-mirror->protoent-mirror ?constructor
         ?mirror))))
  (define (protoent-pointer->protoent-mirror constructor
            (src <pointer-to-protoent>))
    (constructor src.p_name src.p_aliases src.p_proto))
  (define (protoent-wrapper->protoent-mirror constructor
            (src <struct-protoent>))
    (constructor src.p_name src.p_aliases src.p_proto))
  (define (protoent-mirror->protoent-mirror constructor
            (src <protoent>))
    (constructor src.p_name src.p_aliases src.p_proto))
  (define-label <pointer-to-servent>
    (custom-maker <pointer-to-servent>-maker)
    (virtual-fields (mutable s_proto) (mutable s_port)
      (mutable s_aliases) (mutable s_name)))
  (define-inline
    (<pointer-to-servent>-s_proto-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_SERVENT_S_PROTO@ ?pointer
      @OFFSETOF_SERVENT_S_PROTO@ ?value))
  (define-inline (<pointer-to-servent>-s_proto ?pointer)
    (pointer-c-ref @TYPEOF_SERVENT_S_PROTO@ ?pointer
      @OFFSETOF_SERVENT_S_PROTO@))
  (define-inline
    (<pointer-to-servent>-s_port-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_SERVENT_S_PORT@ ?pointer
      @OFFSETOF_SERVENT_S_PORT@ ?value))
  (define-inline (<pointer-to-servent>-s_port ?pointer)
    (pointer-c-ref @TYPEOF_SERVENT_S_PORT@ ?pointer
      @OFFSETOF_SERVENT_S_PORT@))
  (define-inline
    (<pointer-to-servent>-s_aliases-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_SERVENT_S_ALIASES@ ?pointer
      @OFFSETOF_SERVENT_S_ALIASES@ ?value))
  (define-inline (<pointer-to-servent>-s_aliases ?pointer)
    (pointer-c-ref @TYPEOF_SERVENT_S_ALIASES@ ?pointer
      @OFFSETOF_SERVENT_S_ALIASES@))
  (define-inline
    (<pointer-to-servent>-s_name-set! ?pointer ?value)
    (pointer-c-set! @TYPEOF_SERVENT_S_NAME@ ?pointer
      @OFFSETOF_SERVENT_S_NAME@ ?value))
  (define-inline (<pointer-to-servent>-s_name ?pointer)
    (pointer-c-ref @TYPEOF_SERVENT_S_NAME@ ?pointer
      @OFFSETOF_SERVENT_S_NAME@))
  (define-maker <pointer-to-servent>-maker
    %<pointer-to-servent>-maker
    ((pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory))))
  (define-syntax %<pointer-to-servent>-maker
    (syntax-rules (sentinel)
      ((_ sentinel sentinel sentinel ?malloc)
       (?malloc (c-sizeof struct-servent)))
      ((_ ?pointer sentinel sentinel ?malloc)
       (servent-pointer->servent-pointer ?pointer ?malloc))
      ((_ sentinel ?wrapper sentinel ?malloc)
       (servent-wrapper->servent-pointer ?wrapper ?malloc))
      ((_ sentinel sentinel ?mirror ?malloc)
       (servent-mirror->servent-pointer ?mirror ?malloc))))
  (define (servent-pointer->servent-pointer
            (src <pointer-to-servent>) malloc)
    (let (((dst <pointer-to-servent>)
           (malloc (c-sizeof struct-servent))))
      (mem.memcpy dst src (c-sizeof struct-servent))
      dst))
  (define (servent-wrapper->servent-pointer
            (src <struct-servent>) malloc)
    (let (((dst <pointer-to-servent>)
           (malloc (c-sizeof struct-servent))))
      (mem.memcpy dst src (c-sizeof struct-servent))
      dst))
  (define (servent-mirror->servent-pointer (src <servent>)
            malloc)
    (let (((dst <pointer-to-servent>)
           (malloc (c-sizeof struct-servent))))
      (set! dst.s_name src.s_name)
      (set! dst.s_aliases src.s_aliases)
      (set! dst.s_port src.s_port)
      (set! dst.s_proto src.s_proto)
      dst))
  (define-class <struct-servent>
    (nongenerative nausicaa:posix:<struct-servent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:))
      (malloc: sentinel (mandatory)))
    (maker-transformer <struct-servent>-maker-transformer)
    (protocol
      (lambda (make-top)
        (lambda (malloc)
          ((make-top) (malloc (c-sizeof struct-servent))))))
    (fields (immutable pointer))
    (virtual-fields (mutable s_proto) (mutable s_port)
      (mutable s_aliases) (mutable s_name)))
  (define-inline
    (<struct-servent>-s_proto-set! ?wrapper ?value)
    (<pointer-to-servent>-s_proto-set!
      (<struct-servent>-pointer ?wrapper) ?value))
  (define-inline (<struct-servent>-s_proto ?wrapper)
    (<pointer-to-servent>-s_proto
      (<struct-servent>-pointer ?wrapper)))
  (define-inline
    (<struct-servent>-s_port-set! ?wrapper ?value)
    (<pointer-to-servent>-s_port-set!
      (<struct-servent>-pointer ?wrapper) ?value))
  (define-inline (<struct-servent>-s_port ?wrapper)
    (<pointer-to-servent>-s_port
      (<struct-servent>-pointer ?wrapper)))
  (define-inline
    (<struct-servent>-s_aliases-set! ?wrapper ?value)
    (<pointer-to-servent>-s_aliases-set!
      (<struct-servent>-pointer ?wrapper) ?value))
  (define-inline (<struct-servent>-s_aliases ?wrapper)
    (<pointer-to-servent>-s_aliases
      (<struct-servent>-pointer ?wrapper)))
  (define-inline
    (<struct-servent>-s_name-set! ?wrapper ?value)
    (<pointer-to-servent>-s_name-set!
      (<struct-servent>-pointer ?wrapper) ?value))
  (define-inline (<struct-servent>-s_name ?wrapper)
    (<pointer-to-servent>-s_name
      (<struct-servent>-pointer ?wrapper)))
  (define-syntax <struct-servent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor sentinel sentinel sentinel ?malloc)
       (?constructor (?malloc (c-sizeof struct-servent))))
      ((_ ?constructor ?pointer sentinel sentinel ?malloc)
       (servent-pointer->servent-wrapper ?constructor
         ?pointer ?malloc))
      ((_ ?constructor sentinel ?wrapper sentinel ?malloc)
       (servent-wrapper->servent-wrapper ?constructor
         ?wrapper ?malloc))
      ((_ ?constructor sentinel sentinel ?mirror ?malloc)
       (servent-mirror->servent-wrapper ?constructor ?mirror
         ?malloc))))
  (define (servent-pointer->servent-wrapper constructor
            pointer malloc)
    (constructor
      (servent-pointer->servent-pointer pointer malloc)))
  (define (servent-wrapper->servent-wrapper constructor
            wrapper malloc)
    (constructor
      (servent-wrapper->servent-pointer wrapper malloc)))
  (define (servent-mirror->servent-wrapper constructor
            mirror malloc)
    (constructor
      (servent-mirror->servent-pointer mirror malloc)))
  (define-class <servent>
    (nongenerative nausicaa:posix:<servent>)
    (maker () (pointer: sentinel (without wrapper: mirror:))
      (wrapper: sentinel (without pointer: mirror:))
      (mirror: sentinel (without pointer: wrapper:)))
    (maker-transformer <servent>-maker-transformer)
    (fields (mutable s_name) (mutable s_aliases)
      (mutable s_port) (mutable s_proto)))
  (define-syntax <servent>-maker-transformer
    (syntax-rules (sentinel)
      ((_ ?constructor ?pointer sentinel sentinel)
       (servent-pointer->servent-mirror ?constructor
         ?pointer))
      ((_ ?constructor sentinel ?wrapper sentinel)
       (servent-wrapper->servent-mirror ?constructor
         ?wrapper))
      ((_ ?constructor sentinel sentinel ?mirror)
       (servent-mirror->servent-mirror ?constructor ?mirror))))
  (define (servent-pointer->servent-mirror constructor
            (src <pointer-to-servent>))
    (constructor src.s_name src.s_aliases src.s_port
      src.s_proto))
  (define (servent-wrapper->servent-mirror constructor
            (src <struct-servent>))
    (constructor src.s_name src.s_aliases src.s_port
      src.s_proto))
  (define (servent-mirror->servent-mirror constructor
            (src <servent>))
    (constructor src.s_name src.s_aliases src.s_port
      src.s_proto)))


;;; end of file
