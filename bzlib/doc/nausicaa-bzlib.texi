\input texinfo.tex
@c %**start of header
@setfilename nausicaa-bzlib.info
@settitle Bzlib for Nausicaa
@c %**end of header

@c page
@c ------------------------------------------------------------
@c Macros.
@c ------------------------------------------------------------

@include version.texiinc

@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@c ------------------------------------------------------------
@c Special notes.
@c ------------------------------------------------------------

@macro forunix{}
@strong{Unix:}
@end macro

@macro fixme{TEXT}
@strong{FIXME: \TEXT\}
@end macro

@c ------------------------------------------------------------
@c Scheme related macros.
@c ------------------------------------------------------------

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro rsix{}
Revised^6 Report on the algorithmic language Scheme
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@c Separating the @srfi{} macro from the number with a '--' rather than
@c a '-'  makes the expansion look  ugly in menu entries  under the Info
@c reader.  IMHO  this should not happen,  but it does; so  we live with
@c this, because the main purpose of this document is to provide an Info
@c version.
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{SPEC}
@code{(\SPEC\)}
@end macro

@macro ffi{}
@acronym{FFI}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@macro condition{NAME}
@code{&\NAME\}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@c Remember that @url is already used by Texinfo.
@macro aurl{}
@acronym{URL}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro csv{}
@acronym{CSV}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@macro sql{}
@acronym{SQL}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro utc{}
@acronym{UTC}
@end macro

@macro tai{}
@acronym{TAI}
@end macro

@c ------------------------------------------------------------
@c Software acronyms.
@c ------------------------------------------------------------

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@c ------------------------------------------------------------
@c Network related acronyms.
@c ------------------------------------------------------------

@macro http{}
@acronym{HTTP}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro ssh{}
@acronym{SSH}
@end macro

@macro ssl{}
@acronym{SSL}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro tls{}
@acronym{TLS}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro func{NAME}
@code{\NAME\}
@end macro

@macro snull{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@c @macro rsixref{NODE, TITLE}
@c @ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@c @end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@macro autoconfref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,autoconf}
@end macro

@macro nauref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,nausicaa}
@end macro

@c ------------------------------------------------------------
@c RNRS document macros.
@c ------------------------------------------------------------

@macro rsixlibrary{THING}
@code{(rnrs \THING\ (6))}
@end macro

@macro arbno{THING}
\THING\*
@end macro

@macro atleastone{THING}
\THING\+
@end macro

@c ------------------------------------------------------------
@c To be used in normal text.

@macro meta{THING}
<\THING\>
@end macro

@macro metai{THING}
<\THING\1>
@end macro

@macro metaii{THING}
<\THING\2>
@end macro

@macro metaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside @example environment and @samp directives.

@macro cmeta{THING}
<\THING\>
@end macro

@macro cmetai{THING}
<\THING\1>
@end macro

@macro cmetaii{THING}
<\THING\2>
@end macro

@macro cmetaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------
@c To be used inside argument lists.

@macro ameta{THING}
<\THING\>
@end macro

@macro ametai{THING}
<\THING\1>
@end macro

@macro ametaii{THING}
<\THING\2>
@end macro

@macro ametaiii{THING}
<\THING\3>
@end macro

@c ------------------------------------------------------------

@macro hyper{THING}
<\THING\>
@end macro

@macro hyperi{THING}
<\THING\1>
@end macro

@macro hyperii{THING}
<\THING\2>
@end macro

@macro hyperiii{THING}
<\THING\3>
@end macro

@macro hypern{THING}
<\THING\n>
@end macro

@c ------------------------------------------------------------

@macro varo{THING}
@var{\THING\0}
@end macro

@macro vari{THING}
@var{\THING\1}
@end macro

@macro varii{THING}
@var{\THING\2}
@end macro

@macro variii{THING}
@var{\THING\3}
@end macro

@macro variv{THING}
@var{\THING\4}
@end macro

@macro varn{THING}
@var{\THING\n}
@end macro

@macro vark{THING}
@var{\THING\k}
@end macro

@macro varj{THING}
@var{\THING\j}
@end macro


@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Bzlib for Nausicaa

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Nausicaa/Bzlib

@c To be used as @value{PACKAGE_NICKNAME} whenever we need to include
@c the nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           nausicaa-bzlib

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2009

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
@noindent
This document describes version @version{} of @value{PACKAGE}, is a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides a binding to the Bzlib C language library.  It is built upon
Nausicaa/Scheme, making use of its foreign--functions interface.

The libraries support Ikarus, Mosh and Ypsilon Scheme; the package
supports @gnu{}+Linux systems.

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/nausicaa/downloads}

@noindent
the project home page of Nausicaa is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
development of Nausicaa takes place at:

@center @url{http://github.com/marcomaggi/nausicaa/tree/master}

@noindent
Bzlib is available at:

@center @url{http://www.bzip.org/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* nausicaa-bzlib: (nausicaa-bzlib).     Bzlib for Nausicaa.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* memory::                      Memory--to--memory operations.
* file::                        File operations.

Appendices

* bzlib::                       Original Bzlib documentation.
* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @version{} of @value{PACKAGE}, is a
distribution of libraries for @rnrs{6} Scheme implementations; it
provides a binding to the Bzlib C language library.  It is built upon
Nausicaa/Scheme, making use of its foreign--functions interface.

The libraries support Ikarus, Mosh and Ypsilon Scheme; the package
supports @gnu{}+Linux systems.

The installed libraries are:

@table @library
@item foreign compression bzlib shared-object
Exports the single binding @code{bzlib-shared-object} which references
the foreign shared library.

@item foreign compression bzlib sizeof
Exports bindings to constant values and data structures accessors.

@item foreign compression bzlib platform
Exports one binding for each foreign function; the Scheme functions have
the same name of the C functions, so @cfunc{BZ2_bzCompressInit} is
availale as @func{BZ2_bzCompressInit}.  This library makes the original
Bzlib documentation relevant for this package.  @ref{bzlib, Original
Bzlib documentation}.

@item foreign compression bzlib primitives
Exports one binding for each foreign function, implementing marshaling
of arguments and return values.  The Scheme functions have name similar
to the one of the C functions: with the exception of the Zlib
compatibility functions, the @code{BZ2_bz} is converted to
@code{bzlib-}, camel case is converted to dash separated words; so
@cfunc{BZ2_bzCompressInit} is availale as @func{bzlib-compress-init}.

@item foreign compression bzlib
Compound library exporting the high--level @api{}; it reexports bindings
from the @samp{primitives} library and the constant values and structure
accessors from the @samp{sizeof} library.

@item foreign compression bzlib compensated
Exports bindings to constructor functions making use of the
@library{compensations} library from Nausicaa/Scheme.
@nauref{compensations, Compensation stacks}.
@end table

@c page
@node memory
@chapter Memory to memory operations


Basically, to compress a data buffer we should do:

@example
(import (rnrs)
  (compensations)
  (foreign memory)
  (foreign compression bzlib))

(with-compensations
  (let* ((bz*     (malloc/c sizeof-bz_stream))

         (in.len  ---)  ;input number of bytes
         (in.ptr  ---)  ;pointer object

         (ou.len  ---)  ;output number of bytes
         (ou.ptr  ---)) ;pointer ojbect

    ;;initialise
    (struct-bz_stream-bzalloc-set! bz* pointer-null)
    (struct-bz_stream-bzfree-set!  bz* pointer-null)
    (struct-bz_stream-opaque-set!  bz* pointer-null)
    (bzlib-compress-init bz* 1 0 0)

    ;;compress
    (struct-bz_stream-next_in-set!   bz* in.ptr)
    (struct-bz_stream-avail_in-set!  bz* in.len)
    (struct-bz_stream-next_out-set!  bz* ou.ptr)
    (struct-bz_stream-avail_out-set! bz* ou.len)
    (bzlib-compress bz* BZ_RUN)
    (let loop ()
      (unless (= BZ_STREAM_END (bzlib-compress bz* BZ_FINISH))
        (loop)))

    ;;finalise
    (bzlib-compress-end bz*)

    (let ((compr.len (struct-bz_stream-total_out_lo32-ref bz*)))
      ---)))
@end example

@noindent
and to decompress a data buffer we should do:

@example
(import (rnrs)
  (compensations)
  (foreign memory)
  (foreign compression bzlib))

(with-compensations
  (let* ((bz*     (malloc/c sizeof-bz_stream))

         (in.len  ---)  ;input number of bytes
         (in.ptr  ---)  ;pointer object

         (ou.len  ---)  ;output number of bytes
         (ou.ptr  ---)) ;pointer ojbect

    ;;initialise
    (struct-bz_stream-bzalloc-set! bz* pointer-null)
    (struct-bz_stream-bzfree-set!  bz* pointer-null)
    (struct-bz_stream-opaque-set!  bz* pointer-null)
    (bzlib-decompress-init bz* 0 #f)

    ;;decompress
    (struct-bz_stream-next_in-set!   bz* cm.ptr)
    (struct-bz_stream-avail_in-set!  bz* cm.len)
    (struct-bz_stream-next_out-set!  bz* ou.ptr)
    (struct-bz_stream-avail_out-set! bz* ou.len)
    (let loop ()
      (unless (= BZ_STREAM_END (bzlib-decompress bz*))
        (loop)))

    ;;finalise
    (bzlib-decompress-end bz*)

    (let ((decomp.len (struct-bz_stream-total_out_lo32-ref bz*)))
      ---)))
@end example

@noindent
tuning the management of input and output buffers and handling of errors
are application specific.

To use the simplified one--shot compression function:

@example
(import (rnrs)
  (compensations)
  (foreign memory)
  (foreign compression bzlib))

(with-compensations
  (let* ((in.len  ---)    ;input number of bytes
         (in.ptr  ---)    ;pointer object

         (cm.len  ---)    ;output number of bytes
         (cm.ptr  ---)    ;pointer object

         (cm.len* (let ((p (malloc-small/c)))
                    (pointer-set-c-unsigned-int! p 0 cm.len)
                    p)))

    (bzlib-buff-to-buff-compress cm.ptr cm.len* in.ptr in.len 1 0 1)

    (let ((compr.len (pointer-ref-c-unsigned-int cm.len* 0)))
      ---)))
@end example

@noindent
and to use the simplified one--shot decompression function:

@example
(import (rnrs)
  (compensations)
  (foreign memory)
  (foreign compression bzlib))

(with-compensations
  (let* ((cm.len  ---)    ;input number of bytes
         (cm.ptr  ---)    ;pointer object

         (ou.len  ---)    ;output number of bytes
         (ou.ptr  ---)    ;pointer object

         (ou.len* (let ((p (malloc-small/c)))
                    (pointer-set-c-unsigned-int! p 0 ou.len)
                    p)))

    (bzlib-buff-to-buff-decompress ou.ptr ou.len* cm.ptr cm.len 0 0)

    (let ((decomp.len (pointer-ref-c-unsigned-int ou.len* 0)))
      ---)))
@end example

All the functions behave as explained in the original Bzlib
documentation, accepting the same arguments, with the following
exceptions.


@defun bzlib-decompress-init @var{stream} @var{verbosity} @var{small}
The argument @var{small} can be any Scheme object: if true, it turns on
``small memory usage'' decompression; if @false{}, it causes the default
algorithm to be used.
@end defun

@c page
@node file
@chapter File operations


The Bzlib proper file functions allow to read and write more compressed
streams from/to the same file.  The Zlib compatibility functions only
use a single strea, but they are easier to use.

The proper file functions are exported by @library{foreign compression
bzlib primitives} with no marshaling of values with respect to the
foreign C functions; the original documentation is relevant for them.
@ref{bzlib file}.

The Zlib compatibility functions are exported by @library{foreign
compression bzlib primitives} with marshaling of arguments and return
values; they are documented here.


@defun bzopen @var{pathname} @var{mode}
@defunx bzdopen @var{fd} @var{mode}
Open a @code{.bz2} file for reading or writing, using either its name or
a file descriptor; return a pointer to the Bzlib stream or @false{} if
an error occurred.  Analogous to @cfunc{fopen} and @cfunc{fdopen}.

@var{pathname} must be a Scheme string representing the file pathname.
@var{mode} must be a Scheme string representing the open mode as
documented for @cfunc{fopen} and @cfunc{fdopen}.  @glibcref{Opening
Streams, Opening Streams}.
@end defun


@defun bzread @var{stream} @var{buffer-pointer} @var{buffer-len}
@defunx bzwrite @var{stream} @var{buffer-pointer} @var{buffer-len}
Read or write data from/to a previously opened Bzlib @var{stream};
return the number of bytes read or written.  Analogous to @cfunc{fread}
and @cfunc{fwrite}.
@end defun


@defun bzflush @var{stream}
@defunx bzclose @var{stream}
Flush or close a @var{stream}.  Analogous to @cfunc{fflush} and
@cfunc{fclose}.  @cfunc{BZ2_bzflush} actually does nothing.
@end defun


@defun bzerror @var{stream}
Return two values: the numerical value of the most recent error status
for @var{stream} and a Scheme string describing the error.
@end defun

@c page

@include bzlib.texiinc
@include gpl-3.0.texiinc
@include fdl-1.3.texiinc

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
